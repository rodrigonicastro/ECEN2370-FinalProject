
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001400  080088cc  080088cc  000098cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ccc  08009ccc  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009ccc  08009ccc  0000accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cd4  08009cd4  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd4  08009cd4  0000acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009cdc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00025e28  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ea8  20025ea8  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148a9  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341c  00000000  00000000  0001f959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00022d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9f  00000000  00000000  000241c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e43  00000000  00000000  00025167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a14e  00000000  00000000  0004bfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e13f1  00000000  00000000  000660f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001474e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d8  00000000  00000000  0014752c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0014d604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080088b4 	.word	0x080088b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080088b4 	.word	0x080088b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
extern void initialise_monitor_handles(void); 

static bool Drop_Coin = 0;

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f006 ffac 	bl	80074f0 <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f001 f8a6 	bl	80016e8 <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f001 f863 	bl	8001668 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 f9bc 	bl	8001924 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ac:	f001 faac 	bl	8001b08 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <ApplicationInit+0x44>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
	
	greenLEDInit();
 80005b6:	f000 f815 	bl	80005e4 <greenLEDInit>
	turnOffGreenLED();
 80005ba:	f000 f821 	bl	8000600 <turnOffGreenLED>
	redLEDInit();
 80005be:	f000 f818 	bl	80005f2 <redLEDInit>
	turnOffRedLED();
 80005c2:	f000 f824 	bl	800060e <turnOffRedLED>
	ButtonInit();
 80005c6:	f000 f807 	bl	80005d8 <ButtonInit>
	addSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f001 fb62 	bl	8001c94 <addSchedulerEvent>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <ButtonInit>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void ButtonInit(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	Button_Init();
 80005dc:	f000 ff26 	bl	800142c <Button_Init>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <greenLEDInit>:

void greenLEDInit(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	LED_Init(GREEN_LED);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f001 faf9 	bl	8001be0 <LED_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <redLEDInit>:

void redLEDInit(){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	LED_Init(RED_LED);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 faf2 	bl	8001be0 <LED_Init>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <turnOffGreenLED>:

void turnOnRedLED(){
	TurnOnLED(RED_LED);
}

void turnOffGreenLED(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	TurnOffLED(GREEN_LED);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 fb25 	bl	8001c54 <TurnOffLED>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}

0800060e <turnOffRedLED>:

void turnOffRedLED(){
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	TurnOffLED(RED_LED);
 8000612:	2000      	movs	r0, #0
 8000614:	f001 fb1e 	bl	8001c54 <TurnOffLED>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <Display_Menu_Screen>:

void Display_Menu_Screen(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000620:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000624:	2000      	movs	r0, #0
 8000626:	f001 f97d 	bl	8001924 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800062a:	2000      	movs	r0, #0
 800062c:	f001 f99c 	bl	8001968 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000630:	4836      	ldr	r0, [pc, #216]	@ (800070c <Display_Menu_Screen+0xf0>)
 8000632:	f001 f9a9 	bl	8001988 <LCD_SetFont>

	LCD_DisplayChar(80,10,"W");
 8000636:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <Display_Menu_Screen+0xf4>)
 8000638:	210a      	movs	r1, #10
 800063a:	2050      	movs	r0, #80	@ 0x50
 800063c:	f001 fa22 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(92,10,"e");
 8000640:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <Display_Menu_Screen+0xf8>)
 8000642:	210a      	movs	r1, #10
 8000644:	205c      	movs	r0, #92	@ 0x5c
 8000646:	f001 fa1d 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(100,10,"l");
 800064a:	4a33      	ldr	r2, [pc, #204]	@ (8000718 <Display_Menu_Screen+0xfc>)
 800064c:	210a      	movs	r1, #10
 800064e:	2064      	movs	r0, #100	@ 0x64
 8000650:	f001 fa18 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(107,10,"c");
 8000654:	4a31      	ldr	r2, [pc, #196]	@ (800071c <Display_Menu_Screen+0x100>)
 8000656:	210a      	movs	r1, #10
 8000658:	206b      	movs	r0, #107	@ 0x6b
 800065a:	f001 fa13 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(117,10,"o");
 800065e:	4a30      	ldr	r2, [pc, #192]	@ (8000720 <Display_Menu_Screen+0x104>)
 8000660:	210a      	movs	r1, #10
 8000662:	2075      	movs	r0, #117	@ 0x75
 8000664:	f001 fa0e 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(133,10,"m");
 8000668:	4a2e      	ldr	r2, [pc, #184]	@ (8000724 <Display_Menu_Screen+0x108>)
 800066a:	210a      	movs	r1, #10
 800066c:	2085      	movs	r0, #133	@ 0x85
 800066e:	f001 fa09 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(148,10,"e");
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <Display_Menu_Screen+0xf8>)
 8000674:	210a      	movs	r1, #10
 8000676:	2094      	movs	r0, #148	@ 0x94
 8000678:	f001 fa04 	bl	8001a84 <LCD_DisplayChar>
	

	LCD_DisplayChar(45,30,"t");
 800067c:	4a2a      	ldr	r2, [pc, #168]	@ (8000728 <Display_Menu_Screen+0x10c>)
 800067e:	211e      	movs	r1, #30
 8000680:	202d      	movs	r0, #45	@ 0x2d
 8000682:	f001 f9ff 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(55,30,"o");
 8000686:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <Display_Menu_Screen+0x104>)
 8000688:	211e      	movs	r1, #30
 800068a:	2037      	movs	r0, #55	@ 0x37
 800068c:	f001 f9fa 	bl	8001a84 <LCD_DisplayChar>
	
	LCD_DisplayChar(85,30,"C");
 8000690:	4a26      	ldr	r2, [pc, #152]	@ (800072c <Display_Menu_Screen+0x110>)
 8000692:	211e      	movs	r1, #30
 8000694:	2055      	movs	r0, #85	@ 0x55
 8000696:	f001 f9f5 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(100,30,"o");
 800069a:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <Display_Menu_Screen+0x104>)
 800069c:	211e      	movs	r1, #30
 800069e:	2064      	movs	r0, #100	@ 0x64
 80006a0:	f001 f9f0 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(113,30,"n");
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <Display_Menu_Screen+0x114>)
 80006a6:	211e      	movs	r1, #30
 80006a8:	2071      	movs	r0, #113	@ 0x71
 80006aa:	f001 f9eb 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(126,30,"n");
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <Display_Menu_Screen+0x114>)
 80006b0:	211e      	movs	r1, #30
 80006b2:	207e      	movs	r0, #126	@ 0x7e
 80006b4:	f001 f9e6 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(139,30,"e");
 80006b8:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <Display_Menu_Screen+0xf8>)
 80006ba:	211e      	movs	r1, #30
 80006bc:	208b      	movs	r0, #139	@ 0x8b
 80006be:	f001 f9e1 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(151,30,"c");
 80006c2:	4a16      	ldr	r2, [pc, #88]	@ (800071c <Display_Menu_Screen+0x100>)
 80006c4:	211e      	movs	r1, #30
 80006c6:	2097      	movs	r0, #151	@ 0x97
 80006c8:	f001 f9dc 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(161,30,"t");
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <Display_Menu_Screen+0x10c>)
 80006ce:	211e      	movs	r1, #30
 80006d0:	20a1      	movs	r0, #161	@ 0xa1
 80006d2:	f001 f9d7 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(181,30,"4");
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <Display_Menu_Screen+0x118>)
 80006d8:	211e      	movs	r1, #30
 80006da:	20b5      	movs	r0, #181	@ 0xb5
 80006dc:	f001 f9d2 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(190,30,"!");
 80006e0:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <Display_Menu_Screen+0x11c>)
 80006e2:	211e      	movs	r1, #30
 80006e4:	20be      	movs	r0, #190	@ 0xbe
 80006e6:	f001 f9cd 	bl	8001a84 <LCD_DisplayChar>

	LCD_DisplayChar(60,70,"Select Mode:");
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <Display_Menu_Screen+0x120>)
 80006ec:	2146      	movs	r1, #70	@ 0x46
 80006ee:	203c      	movs	r0, #60	@ 0x3c
 80006f0:	f001 f9c8 	bl	8001a84 <LCD_DisplayChar>

	LCD_DisplayChar(15,180,"1-player");
 80006f4:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <Display_Menu_Screen+0x124>)
 80006f6:	21b4      	movs	r1, #180	@ 0xb4
 80006f8:	200f      	movs	r0, #15
 80006fa:	f001 f9c3 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(150,180,"2-player");
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <Display_Menu_Screen+0x128>)
 8000700:	21b4      	movs	r1, #180	@ 0xb4
 8000702:	2096      	movs	r0, #150	@ 0x96
 8000704:	f001 f9be 	bl	8001a84 <LCD_DisplayChar>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000004 	.word	0x20000004
 8000710:	080088f0 	.word	0x080088f0
 8000714:	080088f4 	.word	0x080088f4
 8000718:	080088f8 	.word	0x080088f8
 800071c:	080088fc 	.word	0x080088fc
 8000720:	08008900 	.word	0x08008900
 8000724:	08008904 	.word	0x08008904
 8000728:	08008908 	.word	0x08008908
 800072c:	0800890c 	.word	0x0800890c
 8000730:	08008910 	.word	0x08008910
 8000734:	08008914 	.word	0x08008914
 8000738:	08008918 	.word	0x08008918
 800073c:	0800891c 	.word	0x0800891c
 8000740:	0800892c 	.word	0x0800892c
 8000744:	08008938 	.word	0x08008938

08000748 <Display_Board>:

void Display_Board(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	for(int i = 0; i <= NUM_COLS; i++){
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e010      	b.n	8000776 <Display_Board+0x2e>
		LCD_Draw_Vertical_Line(15+30*i, 80, 181, LCD_COLOR_BLACK);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	b29b      	uxth	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	b29b      	uxth	r3, r3
 8000762:	330f      	adds	r3, #15
 8000764:	b298      	uxth	r0, r3
 8000766:	2300      	movs	r3, #0
 8000768:	22b5      	movs	r2, #181	@ 0xb5
 800076a:	2150      	movs	r1, #80	@ 0x50
 800076c:	f001 f88b 	bl	8001886 <LCD_Draw_Vertical_Line>
	for(int i = 0; i <= NUM_COLS; i++){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b07      	cmp	r3, #7
 800077a:	ddeb      	ble.n	8000754 <Display_Board+0xc>
	}

	for(int i = 0; i <= NUM_ROWS; i++){
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	e010      	b.n	80007a4 <Display_Board+0x5c>
		LCD_Draw_Horizontal_Line(15, 80+30*i, 210, LCD_COLOR_BLACK);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b29b      	uxth	r3, r3
 8000790:	3350      	adds	r3, #80	@ 0x50
 8000792:	b299      	uxth	r1, r3
 8000794:	2300      	movs	r3, #0
 8000796:	22d2      	movs	r2, #210	@ 0xd2
 8000798:	200f      	movs	r0, #15
 800079a:	f001 f89b 	bl	80018d4 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i <= NUM_ROWS; i++){
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	ddeb      	ble.n	8000782 <Display_Board+0x3a>
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Update_Board>:

void Update_Board(int row, int col, int value){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	board[row][col] = value;
 80007c0:	4907      	ldr	r1, [pc, #28]	@ (80007e0 <Update_Board+0x2c>)
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4613      	mov	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	200000a4 	.word	0x200000a4

080007e4 <Display_Coins>:

void Display_Coins(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++){
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e04d      	b.n	800088c <Display_Coins+0xa8>
		for(int j = 0; j < NUM_COLS; j++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e044      	b.n	8000880 <Display_Coins+0x9c>
			if(board[i][j] == 1){
 80007f6:	4929      	ldr	r1, [pc, #164]	@ (800089c <Display_Coins+0xb8>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	4413      	add	r3, r2
 8000804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d115      	bne.n	8000838 <Display_Coins+0x54>
				LCD_Draw_Circle_Fill(30+30*j, 95+30*i, 8, LCD_COLOR_BLUE);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	b298      	uxth	r0, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b29b      	uxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	335f      	adds	r3, #95	@ 0x5f
 800082c:	b299      	uxth	r1, r3
 800082e:	231f      	movs	r3, #31
 8000830:	2208      	movs	r2, #8
 8000832:	f000 ffd5 	bl	80017e0 <LCD_Draw_Circle_Fill>
 8000836:	e020      	b.n	800087a <Display_Coins+0x96>
			}

			else if(board[i][j] == 2){
 8000838:	4918      	ldr	r1, [pc, #96]	@ (800089c <Display_Coins+0xb8>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d115      	bne.n	800087a <Display_Coins+0x96>
				LCD_Draw_Circle_Fill(30+30*j, 95+30*i, 8, LCD_COLOR_RED);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b298      	uxth	r0, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	335f      	adds	r3, #95	@ 0x5f
 800086e:	b299      	uxth	r1, r3
 8000870:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000874:	2208      	movs	r2, #8
 8000876:	f000 ffb3 	bl	80017e0 <LCD_Draw_Circle_Fill>
		for(int j = 0; j < NUM_COLS; j++){
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b06      	cmp	r3, #6
 8000884:	ddb7      	ble.n	80007f6 <Display_Coins+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b05      	cmp	r3, #5
 8000890:	ddae      	ble.n	80007f0 <Display_Coins+0xc>
			}
		}
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000a4 	.word	0x200000a4

080008a0 <Single_Player>:

void Single_Player(RNG_HandleTypeDef* hrng){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	turns = 0;
 80008a8:	4b58      	ldr	r3, [pc, #352]	@ (8000a0c <Single_Player+0x16c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]

	while(Game_Status() == ONGOING){
 80008ae:	e0a0      	b.n	80009f2 <Single_Player+0x152>
		//User Turn
		if(turns % 2 == 0){
 80008b0:	4b56      	ldr	r3, [pc, #344]	@ (8000a0c <Single_Player+0x16c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d16f      	bne.n	800099c <Single_Player+0xfc>
			int position = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
			LCD_Clear(0, LCD_COLOR_WHITE);
 80008c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008c4:	2000      	movs	r0, #0
 80008c6:	f001 f82d 	bl	8001924 <LCD_Clear>
			Display_Board();
 80008ca:	f7ff ff3d 	bl	8000748 <Display_Board>
			Display_Coins();
 80008ce:	f7ff ff89 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_BLUE);
 80008d2:	231f      	movs	r3, #31
 80008d4:	2208      	movs	r2, #8
 80008d6:	2141      	movs	r1, #65	@ 0x41
 80008d8:	201e      	movs	r0, #30
 80008da:	f000 ff81 	bl	80017e0 <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	72fb      	strb	r3, [r7, #11]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 80008e2:	484b      	ldr	r0, [pc, #300]	@ (8000a10 <Single_Player+0x170>)
 80008e4:	f001 f91b 	bl	8001b1e <returnTouchStateAndLocation>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d125      	bne.n	800093a <Single_Player+0x9a>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80008ee:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <Single_Player+0x170>)
 80008f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008f4:	f001 f920 	bl	8001b38 <returnTouchQuadrant>
 80008f8:	4603      	mov	r3, r0
 80008fa:	72bb      	strb	r3, [r7, #10]
					if(touchedQuadrant == BOTTOM_RIGHT){
 80008fc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10b      	bne.n	800091c <Single_Player+0x7c>
						if(position <= 0) position = 6;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dc02      	bgt.n	8000910 <Single_Player+0x70>
 800090a:	2306      	movs	r3, #6
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e002      	b.n	8000916 <Single_Player+0x76>
						else position--;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3b01      	subs	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	72fb      	strb	r3, [r7, #11]
 800091a:	e00e      	b.n	800093a <Single_Player+0x9a>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT){
 800091c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10a      	bne.n	800093a <Single_Player+0x9a>
						if(position >= 6) position = 0;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b05      	cmp	r3, #5
 8000928:	dd02      	ble.n	8000930 <Single_Player+0x90>
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e002      	b.n	8000936 <Single_Player+0x96>
						else position++;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	72fb      	strb	r3, [r7, #11]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d018      	beq.n	8000972 <Single_Player+0xd2>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8000940:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000944:	2000      	movs	r0, #0
 8000946:	f000 ffed 	bl	8001924 <LCD_Clear>
					Display_Board();
 800094a:	f7ff fefd 	bl	8000748 <Display_Board>
					Display_Coins();
 800094e:	f7ff ff49 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_BLUE2);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	b29b      	uxth	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b298      	uxth	r0, r3
 8000962:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000966:	2208      	movs	r2, #8
 8000968:	2141      	movs	r1, #65	@ 0x41
 800096a:	f000 ff39 	bl	80017e0 <LCD_Draw_Circle_Fill>

					touched = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	72fb      	strb	r3, [r7, #11]
				}

				if(Drop_Coin){
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <Single_Player+0x174>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0b1      	beq.n	80008de <Single_Player+0x3e>
					Drop_Coin = 0;
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <Single_Player+0x174>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
					break;
 8000980:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, BLUE_PLAYER);
 8000982:	2101      	movs	r1, #1
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 f86d 	bl	8000a64 <Place_Coin>
 800098a:	4603      	mov	r3, r0
 800098c:	727b      	strb	r3, [r7, #9]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 800098e:	7a7b      	ldrb	r3, [r7, #9]
 8000990:	f083 0301 	eor.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d026      	beq.n	80009e8 <Single_Player+0x148>
 800099a:	e02a      	b.n	80009f2 <Single_Player+0x152>
		}

		//ai turn
		else{
			LCD_DisplayChar(30, 35, "Generating Move.");
 800099c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <Single_Player+0x178>)
 800099e:	2123      	movs	r1, #35	@ 0x23
 80009a0:	201e      	movs	r0, #30
 80009a2:	f001 f86f 	bl	8001a84 <LCD_DisplayChar>
			HAL_Delay(750);
 80009a6:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80009aa:	f002 ff8d 	bl	80038c8 <HAL_Delay>
			LCD_DisplayChar(30, 35, "Generating Move..");
 80009ae:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <Single_Player+0x17c>)
 80009b0:	2123      	movs	r1, #35	@ 0x23
 80009b2:	201e      	movs	r0, #30
 80009b4:	f001 f866 	bl	8001a84 <LCD_DisplayChar>
			HAL_Delay(750);
 80009b8:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80009bc:	f002 ff84 	bl	80038c8 <HAL_Delay>
			LCD_DisplayChar(30, 35, "Generating Move...");
 80009c0:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <Single_Player+0x180>)
 80009c2:	2123      	movs	r1, #35	@ 0x23
 80009c4:	201e      	movs	r0, #30
 80009c6:	f001 f85d 	bl	8001a84 <LCD_DisplayChar>

			#if USE_AI_FOR_SINGLE_PLAYER == 0
			while(!Place_Coin(Generate_Random_Move(hrng), RED_PLAYER)); //generate random moves until one is valid
 80009ca:	bf00      	nop
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f829 	bl	8000a24 <Generate_Random_Move>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f844 	bl	8000a64 <Place_Coin>
 80009dc:	4603      	mov	r3, r0
 80009de:	f083 0301 	eor.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f1      	bne.n	80009cc <Single_Player+0x12c>
			#else
			//Intelligent AI move generator
			#endif

		}
		turns++;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <Single_Player+0x16c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <Single_Player+0x16c>)
 80009f0:	6013      	str	r3, [r2, #0]
	while(Game_Status() == ONGOING){
 80009f2:	f000 f975 	bl	8000ce0 <Game_Status>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f43f af59 	beq.w	80008b0 <Single_Player+0x10>
	}
	addSchedulerEvent(DISPLAY_RESULTS_EVENT);
 80009fe:	2020      	movs	r0, #32
 8000a00:	f001 f948 	bl	8001c94 <addSchedulerEvent>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000158 	.word	0x20000158
 8000a10:	2000009c 	.word	0x2000009c
 8000a14:	2000015c 	.word	0x2000015c
 8000a18:	08008944 	.word	0x08008944
 8000a1c:	08008958 	.word	0x08008958
 8000a20:	0800896c 	.word	0x0800896c

08000a24 <Generate_Random_Move>:

int Generate_Random_Move(RNG_HandleTypeDef* hrng){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint32_t randNum = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
	HAL_RNG_GenerateRandomNumber(hrng, &randNum);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f005 fd34 	bl	80064a4 <HAL_RNG_GenerateRandomNumber>

	return randNum % 7;
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <Generate_Random_Move+0x3c>)
 8000a40:	fba3 1302 	umull	r1, r3, r3, r2
 8000a44:	1ad1      	subs	r1, r2, r3
 8000a46:	0849      	lsrs	r1, r1, #1
 8000a48:	440b      	add	r3, r1
 8000a4a:	0899      	lsrs	r1, r3, #2
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	1ad1      	subs	r1, r2, r3
 8000a54:	460b      	mov	r3, r1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24924925 	.word	0x24924925

08000a64 <Place_Coin>:

bool Place_Coin(int position, int player){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	if(position > 6 || position < 0) return false;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	dc02      	bgt.n	8000a7a <Place_Coin+0x16>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	da01      	bge.n	8000a7e <Place_Coin+0x1a>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e024      	b.n	8000ac8 <Place_Coin+0x64>

	for(int i = NUM_ROWS-1; i >= 0; i--){
 8000a7e:	2305      	movs	r3, #5
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e01d      	b.n	8000ac0 <Place_Coin+0x5c>
		if(board[i][position] == 0){
 8000a84:	4912      	ldr	r1, [pc, #72]	@ (8000ad0 <Place_Coin+0x6c>)
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10f      	bne.n	8000aba <Place_Coin+0x56>
			Update_Board(i, position, player);
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff fe88 	bl	80007b4 <Update_Board>
			LCD_Clear(0, LCD_COLOR_WHITE);
 8000aa4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 ff3b 	bl	8001924 <LCD_Clear>
			Display_Board();
 8000aae:	f7ff fe4b 	bl	8000748 <Display_Board>
			Display_Coins();
 8000ab2:	f7ff fe97 	bl	80007e4 <Display_Coins>
			return true;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e006      	b.n	8000ac8 <Place_Coin+0x64>
	for(int i = NUM_ROWS-1; i >= 0; i--){
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dade      	bge.n	8000a84 <Place_Coin+0x20>
		}
	}

	return false;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000a4 	.word	0x200000a4

08000ad4 <Two_Player>:

void Two_Player(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
	turns = 0;
 8000ada:	4b7e      	ldr	r3, [pc, #504]	@ (8000cd4 <Two_Player+0x200>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]

	while(Game_Status() == ONGOING){
 8000ae0:	e0ea      	b.n	8000cb8 <Two_Player+0x1e4>
		//Blue's Turn
		if(turns % 2 == 0){
 8000ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8000cd4 <Two_Player+0x200>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d16e      	bne.n	8000bcc <Two_Player+0xf8>
			int position = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
			LCD_Clear(0, LCD_COLOR_WHITE);
 8000af2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 ff14 	bl	8001924 <LCD_Clear>
			Display_Board();
 8000afc:	f7ff fe24 	bl	8000748 <Display_Board>
			Display_Coins();
 8000b00:	f7ff fe70 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_BLUE);
 8000b04:	231f      	movs	r3, #31
 8000b06:	2208      	movs	r2, #8
 8000b08:	2141      	movs	r1, #65	@ 0x41
 8000b0a:	201e      	movs	r0, #30
 8000b0c:	f000 fe68 	bl	80017e0 <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	74fb      	strb	r3, [r7, #19]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8000b14:	4870      	ldr	r0, [pc, #448]	@ (8000cd8 <Two_Player+0x204>)
 8000b16:	f001 f802 	bl	8001b1e <returnTouchStateAndLocation>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d125      	bne.n	8000b6c <Two_Player+0x98>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 8000b20:	4b6d      	ldr	r3, [pc, #436]	@ (8000cd8 <Two_Player+0x204>)
 8000b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b26:	f001 f807 	bl	8001b38 <returnTouchQuadrant>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	723b      	strb	r3, [r7, #8]
					if(touchedQuadrant == BOTTOM_RIGHT){
 8000b2e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10b      	bne.n	8000b4e <Two_Player+0x7a>
						if(position <= 0) position = 6;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dc02      	bgt.n	8000b42 <Two_Player+0x6e>
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e002      	b.n	8000b48 <Two_Player+0x74>
						else position--;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]

						touched = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	74fb      	strb	r3, [r7, #19]
 8000b4c:	e00e      	b.n	8000b6c <Two_Player+0x98>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT){
 8000b4e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <Two_Player+0x98>
						if(position >= 6) position = 0;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2b05      	cmp	r3, #5
 8000b5a:	dd02      	ble.n	8000b62 <Two_Player+0x8e>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e002      	b.n	8000b68 <Two_Player+0x94>
						else position++;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]

						touched = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	74fb      	strb	r3, [r7, #19]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 8000b6c:	7cfb      	ldrb	r3, [r7, #19]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d017      	beq.n	8000ba2 <Two_Player+0xce>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8000b72:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fed4 	bl	8001924 <LCD_Clear>
					Display_Board();
 8000b7c:	f7ff fde4 	bl	8000748 <Display_Board>
					Display_Coins();
 8000b80:	f7ff fe30 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_BLUE);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	b298      	uxth	r0, r3
 8000b94:	231f      	movs	r3, #31
 8000b96:	2208      	movs	r2, #8
 8000b98:	2141      	movs	r1, #65	@ 0x41
 8000b9a:	f000 fe21 	bl	80017e0 <LCD_Draw_Circle_Fill>

					touched = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	74fb      	strb	r3, [r7, #19]
				}

				if(Drop_Coin){
 8000ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cdc <Two_Player+0x208>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0b2      	beq.n	8000b10 <Two_Player+0x3c>
					Drop_Coin = 0;
 8000baa:	4b4c      	ldr	r3, [pc, #304]	@ (8000cdc <Two_Player+0x208>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
					break;
 8000bb0:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, BLUE_PLAYER);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	6978      	ldr	r0, [r7, #20]
 8000bb6:	f7ff ff55 	bl	8000a64 <Place_Coin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d071      	beq.n	8000cae <Two_Player+0x1da>
 8000bca:	e075      	b.n	8000cb8 <Two_Player+0x1e4>
		}

		//Red's Turn
		else{
			int position = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
			LCD_Clear(0, LCD_COLOR_WHITE);
 8000bd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fea5 	bl	8001924 <LCD_Clear>
			Display_Board();
 8000bda:	f7ff fdb5 	bl	8000748 <Display_Board>
			Display_Coins();
 8000bde:	f7ff fe01 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_RED);
 8000be2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000be6:	2208      	movs	r2, #8
 8000be8:	2141      	movs	r1, #65	@ 0x41
 8000bea:	201e      	movs	r0, #30
 8000bec:	f000 fdf8 	bl	80017e0 <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	72fb      	strb	r3, [r7, #11]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8000bf4:	4838      	ldr	r0, [pc, #224]	@ (8000cd8 <Two_Player+0x204>)
 8000bf6:	f000 ff92 	bl	8001b1e <returnTouchStateAndLocation>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d125      	bne.n	8000c4c <Two_Player+0x178>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 8000c00:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <Two_Player+0x204>)
 8000c02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c06:	f000 ff97 	bl	8001b38 <returnTouchQuadrant>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	72bb      	strb	r3, [r7, #10]
					if(touchedQuadrant == BOTTOM_RIGHT){
 8000c0e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d10b      	bne.n	8000c2e <Two_Player+0x15a>
						if(position <= 0) position = 6;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dc02      	bgt.n	8000c22 <Two_Player+0x14e>
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e002      	b.n	8000c28 <Two_Player+0x154>
						else position--;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	72fb      	strb	r3, [r7, #11]
 8000c2c:	e00e      	b.n	8000c4c <Two_Player+0x178>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT){
 8000c2e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10a      	bne.n	8000c4c <Two_Player+0x178>
						if(position >= 6) position = 0;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	dd02      	ble.n	8000c42 <Two_Player+0x16e>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e002      	b.n	8000c48 <Two_Player+0x174>
						else position++;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	72fb      	strb	r3, [r7, #11]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d018      	beq.n	8000c84 <Two_Player+0x1b0>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8000c52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 fe64 	bl	8001924 <LCD_Clear>
					Display_Board();
 8000c5c:	f7ff fd74 	bl	8000748 <Display_Board>
					Display_Coins();
 8000c60:	f7ff fdc0 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_RED);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	b298      	uxth	r0, r3
 8000c74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c78:	2208      	movs	r2, #8
 8000c7a:	2141      	movs	r1, #65	@ 0x41
 8000c7c:	f000 fdb0 	bl	80017e0 <LCD_Draw_Circle_Fill>

					touched = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	72fb      	strb	r3, [r7, #11]
				}

				if(Drop_Coin){
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <Two_Player+0x208>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0b1      	beq.n	8000bf0 <Two_Player+0x11c>
					Drop_Coin = 0;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <Two_Player+0x208>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
					break;
 8000c92:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, RED_PLAYER);
 8000c94:	2102      	movs	r1, #2
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff fee4 	bl	8000a64 <Place_Coin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	727b      	strb	r3, [r7, #9]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 8000ca0:	7a7b      	ldrb	r3, [r7, #9]
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <Two_Player+0x1da>
 8000cac:	e004      	b.n	8000cb8 <Two_Player+0x1e4>
		}
		turns++;
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <Two_Player+0x200>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <Two_Player+0x200>)
 8000cb6:	6013      	str	r3, [r2, #0]
	while(Game_Status() == ONGOING){
 8000cb8:	f000 f812 	bl	8000ce0 <Game_Status>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f43f af0f 	beq.w	8000ae2 <Two_Player+0xe>
	}
	addSchedulerEvent(DISPLAY_RESULTS_EVENT);
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	f000 ffe5 	bl	8001c94 <addSchedulerEvent>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000158 	.word	0x20000158
 8000cd8:	2000009c 	.word	0x2000009c
 8000cdc:	2000015c 	.word	0x2000015c

08000ce0 <Game_Status>:

GAME_RESULT Game_Status(){
 8000ce0:	b490      	push	{r4, r7}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
	//algo idea (brute force): first check for all vertical solutions, then horizontal, then diagonal
	
	//Check for wins in each position
	for(int i = 0; i < NUM_ROWS; i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e22d      	b.n	8001148 <Game_Status+0x468>
		for(int j = 0; j < NUM_COLS; j++){
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	e223      	b.n	800113a <Game_Status+0x45a>
			//If curr position is 0, don't check it
			if(board[i][j] != 0){
 8000cf2:	49b4      	ldr	r1, [pc, #720]	@ (8000fc4 <Game_Status+0x2e4>)
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8215 	beq.w	8001134 <Game_Status+0x454>
				//Horizomtal win (only check if it won't exceed dimensions)
				if(j+3 < NUM_COLS){
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	dc4f      	bgt.n	8000db0 <Game_Status+0xd0>
					if(board[i][j] == board[i][j+1] && board[i][j+1] == board[i][j+2] && board[i][j+2] == board[i][j+3]){
 8000d10:	49ac      	ldr	r1, [pc, #688]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4613      	mov	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1c58      	adds	r0, r3, #1
 8000d26:	4ca7      	ldr	r4, [pc, #668]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	4403      	add	r3, r0
 8000d32:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d13a      	bne.n	8000db0 <Game_Status+0xd0>
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c59      	adds	r1, r3, #1
 8000d3e:	48a1      	ldr	r0, [pc, #644]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1c98      	adds	r0, r3, #2
 8000d52:	4c9c      	ldr	r4, [pc, #624]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	4403      	add	r3, r0
 8000d5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d124      	bne.n	8000db0 <Game_Status+0xd0>
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1c99      	adds	r1, r3, #2
 8000d6a:	4896      	ldr	r0, [pc, #600]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1cd8      	adds	r0, r3, #3
 8000d7e:	4c91      	ldr	r4, [pc, #580]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	4403      	add	r3, r0
 8000d8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d10e      	bne.n	8000db0 <Game_Status+0xd0>
						if(board[i][j] == 1) return BLUE_WINS;
 8000d92:	498c      	ldr	r1, [pc, #560]	@ (8000fc4 <Game_Status+0x2e4>)
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	4413      	add	r3, r2
 8000da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <Game_Status+0xcc>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e1f1      	b.n	8001190 <Game_Status+0x4b0>
						else return RED_WINS;
 8000dac:	2302      	movs	r3, #2
 8000dae:	e1ef      	b.n	8001190 <Game_Status+0x4b0>
					}
				}

				//Vertical win (only check if it won't exceed dimensions)
				if(i+3 < NUM_ROWS){
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	dc4f      	bgt.n	8000e56 <Game_Status+0x176>
					if(board[i][j] == board[i+1][j] && board[i+1][j] == board[i+2][j] && board[i+2][j] == board[i+3][j]){
 8000db6:	4983      	ldr	r1, [pc, #524]	@ (8000fc4 <Game_Status+0x2e4>)
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	487d      	ldr	r0, [pc, #500]	@ (8000fc4 <Game_Status+0x2e4>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d13a      	bne.n	8000e56 <Game_Status+0x176>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	4977      	ldr	r1, [pc, #476]	@ (8000fc4 <Game_Status+0x2e4>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	4413      	add	r3, r2
 8000df0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1c9a      	adds	r2, r3, #2
 8000df8:	4872      	ldr	r0, [pc, #456]	@ (8000fc4 <Game_Status+0x2e4>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	4413      	add	r3, r2
 8000e04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d124      	bne.n	8000e56 <Game_Status+0x176>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1c9a      	adds	r2, r3, #2
 8000e10:	496c      	ldr	r1, [pc, #432]	@ (8000fc4 <Game_Status+0x2e4>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1cda      	adds	r2, r3, #3
 8000e24:	4867      	ldr	r0, [pc, #412]	@ (8000fc4 <Game_Status+0x2e4>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	1a9b      	subs	r3, r3, r2
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	4413      	add	r3, r2
 8000e30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d10e      	bne.n	8000e56 <Game_Status+0x176>
						if(board[i][j] == 1) return BLUE_WINS;
 8000e38:	4962      	ldr	r1, [pc, #392]	@ (8000fc4 <Game_Status+0x2e4>)
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	4413      	add	r3, r2
 8000e46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d101      	bne.n	8000e52 <Game_Status+0x172>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e19e      	b.n	8001190 <Game_Status+0x4b0>
						else return RED_WINS;
 8000e52:	2302      	movs	r3, #2
 8000e54:	e19c      	b.n	8001190 <Game_Status+0x4b0>
				}

				//Diagonal win (only check if it won't exceed dimensions)
				//4 different diagonals to check
				//Bottom-right diagonal
				if(i+3 < NUM_ROWS && j+3 < NUM_COLS){////////////////
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	dc57      	bgt.n	8000f0c <Game_Status+0x22c>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	dc54      	bgt.n	8000f0c <Game_Status+0x22c>
					if(board[i][j] == board[i+1][j+1] && board[i+1][j+1] == board[i+2][j+2] && board[i+2][j+2] == board[i+3][j+3]){
 8000e62:	4958      	ldr	r1, [pc, #352]	@ (8000fc4 <Game_Status+0x2e4>)
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	4413      	add	r3, r2
 8000e70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c58      	adds	r0, r3, #1
 8000e7c:	4c51      	ldr	r4, [pc, #324]	@ (8000fc4 <Game_Status+0x2e4>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	4403      	add	r3, r0
 8000e86:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d13e      	bne.n	8000f0c <Game_Status+0x22c>
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	484b      	ldr	r0, [pc, #300]	@ (8000fc4 <Game_Status+0x2e4>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	1c9a      	adds	r2, r3, #2
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c98      	adds	r0, r3, #2
 8000eac:	4c45      	ldr	r4, [pc, #276]	@ (8000fc4 <Game_Status+0x2e4>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	4403      	add	r3, r0
 8000eb6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d126      	bne.n	8000f0c <Game_Status+0x22c>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1c9a      	adds	r2, r3, #2
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1c99      	adds	r1, r3, #2
 8000ec6:	483f      	ldr	r0, [pc, #252]	@ (8000fc4 <Game_Status+0x2e4>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	1cda      	adds	r2, r3, #3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1cd8      	adds	r0, r3, #3
 8000edc:	4c39      	ldr	r4, [pc, #228]	@ (8000fc4 <Game_Status+0x2e4>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	4403      	add	r3, r0
 8000ee6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000eea:	4299      	cmp	r1, r3
 8000eec:	d10e      	bne.n	8000f0c <Game_Status+0x22c>
						if(board[i][j] == 1) return BLUE_WINS;
 8000eee:	4935      	ldr	r1, [pc, #212]	@ (8000fc4 <Game_Status+0x2e4>)
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	4413      	add	r3, r2
 8000efc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <Game_Status+0x228>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e143      	b.n	8001190 <Game_Status+0x4b0>
						else return RED_WINS;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e141      	b.n	8001190 <Game_Status+0x4b0>
					}
				}

				//Top-right diagonal
				if(i+3 < NUM_ROWS && j-3 >= 0){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	dc5a      	bgt.n	8000fc8 <Game_Status+0x2e8>
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	dd57      	ble.n	8000fc8 <Game_Status+0x2e8>
					if(board[i][j] == board[i+1][j-1] && board[i+1][j-1] == board[i+2][j-2] && board[i+2][j-2] == board[i+3][j-3]){
 8000f18:	492a      	ldr	r1, [pc, #168]	@ (8000fc4 <Game_Status+0x2e4>)
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	4413      	add	r3, r2
 8000f26:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1e58      	subs	r0, r3, #1
 8000f32:	4c24      	ldr	r4, [pc, #144]	@ (8000fc4 <Game_Status+0x2e4>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	4403      	add	r3, r0
 8000f3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d141      	bne.n	8000fc8 <Game_Status+0x2e8>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1e59      	subs	r1, r3, #1
 8000f4c:	481d      	ldr	r0, [pc, #116]	@ (8000fc4 <Game_Status+0x2e4>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1c9a      	adds	r2, r3, #2
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1e98      	subs	r0, r3, #2
 8000f62:	4c18      	ldr	r4, [pc, #96]	@ (8000fc4 <Game_Status+0x2e4>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	4403      	add	r3, r0
 8000f6c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000f70:	4299      	cmp	r1, r3
 8000f72:	d129      	bne.n	8000fc8 <Game_Status+0x2e8>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1c9a      	adds	r2, r3, #2
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1e99      	subs	r1, r3, #2
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <Game_Status+0x2e4>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1cda      	adds	r2, r3, #3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ed8      	subs	r0, r3, #3
 8000f92:	4c0c      	ldr	r4, [pc, #48]	@ (8000fc4 <Game_Status+0x2e4>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	4403      	add	r3, r0
 8000f9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000fa0:	4299      	cmp	r1, r3
 8000fa2:	d111      	bne.n	8000fc8 <Game_Status+0x2e8>
						if(board[i][j] == 1) return BLUE_WINS;
 8000fa4:	4907      	ldr	r1, [pc, #28]	@ (8000fc4 <Game_Status+0x2e4>)
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <Game_Status+0x2de>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0e8      	b.n	8001190 <Game_Status+0x4b0>
						else return RED_WINS;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e0e6      	b.n	8001190 <Game_Status+0x4b0>
 8000fc2:	bf00      	nop
 8000fc4:	200000a4 	.word	0x200000a4
					}
				}

				//Bottom-left diagonal
				if(i-3 >= 0 && j+3 < NUM_COLS){
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dd57      	ble.n	800107e <Game_Status+0x39e>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	dc54      	bgt.n	800107e <Game_Status+0x39e>
					if(board[i][j] == board[i-1][j+1] && board[i-1][j+1] == board[i-2][j+2] && board[i-2][j+2] == board[i-3][j+3]){
 8000fd4:	4971      	ldr	r1, [pc, #452]	@ (800119c <Game_Status+0x4bc>)
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1c58      	adds	r0, r3, #1
 8000fee:	4c6b      	ldr	r4, [pc, #428]	@ (800119c <Game_Status+0x4bc>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	4403      	add	r3, r0
 8000ff8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d13e      	bne.n	800107e <Game_Status+0x39e>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c59      	adds	r1, r3, #1
 8001008:	4864      	ldr	r0, [pc, #400]	@ (800119c <Game_Status+0x4bc>)
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	440b      	add	r3, r1
 8001012:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1e9a      	subs	r2, r3, #2
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c98      	adds	r0, r3, #2
 800101e:	4c5f      	ldr	r4, [pc, #380]	@ (800119c <Game_Status+0x4bc>)
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	4403      	add	r3, r0
 8001028:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800102c:	4299      	cmp	r1, r3
 800102e:	d126      	bne.n	800107e <Game_Status+0x39e>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1e9a      	subs	r2, r3, #2
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c99      	adds	r1, r3, #2
 8001038:	4858      	ldr	r0, [pc, #352]	@ (800119c <Game_Status+0x4bc>)
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	440b      	add	r3, r1
 8001042:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1eda      	subs	r2, r3, #3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1cd8      	adds	r0, r3, #3
 800104e:	4c53      	ldr	r4, [pc, #332]	@ (800119c <Game_Status+0x4bc>)
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	4403      	add	r3, r0
 8001058:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800105c:	4299      	cmp	r1, r3
 800105e:	d10e      	bne.n	800107e <Game_Status+0x39e>
						if(board[i][j] == 1) return BLUE_WINS;
 8001060:	494e      	ldr	r1, [pc, #312]	@ (800119c <Game_Status+0x4bc>)
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <Game_Status+0x39a>
 8001076:	2301      	movs	r3, #1
 8001078:	e08a      	b.n	8001190 <Game_Status+0x4b0>
						else return RED_WINS;
 800107a:	2302      	movs	r3, #2
 800107c:	e088      	b.n	8001190 <Game_Status+0x4b0>
					}
				}

				//Top-left diagonal
				if(i-3 >= 0 && j-3 >= 0){
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b02      	cmp	r3, #2
 8001082:	dd57      	ble.n	8001134 <Game_Status+0x454>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b02      	cmp	r3, #2
 8001088:	dd54      	ble.n	8001134 <Game_Status+0x454>
					if(board[i][j] == board[i-1][j-1] && board[i-1][j-1] == board[i-2][j-2] && board[i-2][j-2] == board[i-3][j-3]){
 800108a:	4944      	ldr	r1, [pc, #272]	@ (800119c <Game_Status+0x4bc>)
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1e58      	subs	r0, r3, #1
 80010a4:	4c3d      	ldr	r4, [pc, #244]	@ (800119c <Game_Status+0x4bc>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	4403      	add	r3, r0
 80010ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d13e      	bne.n	8001134 <Game_Status+0x454>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1e59      	subs	r1, r3, #1
 80010be:	4837      	ldr	r0, [pc, #220]	@ (800119c <Game_Status+0x4bc>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	1e9a      	subs	r2, r3, #2
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1e98      	subs	r0, r3, #2
 80010d4:	4c31      	ldr	r4, [pc, #196]	@ (800119c <Game_Status+0x4bc>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	4403      	add	r3, r0
 80010de:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80010e2:	4299      	cmp	r1, r3
 80010e4:	d126      	bne.n	8001134 <Game_Status+0x454>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1e9a      	subs	r2, r3, #2
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1e99      	subs	r1, r3, #2
 80010ee:	482b      	ldr	r0, [pc, #172]	@ (800119c <Game_Status+0x4bc>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1eda      	subs	r2, r3, #3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1ed8      	subs	r0, r3, #3
 8001104:	4c25      	ldr	r4, [pc, #148]	@ (800119c <Game_Status+0x4bc>)
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	4403      	add	r3, r0
 800110e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001112:	4299      	cmp	r1, r3
 8001114:	d10e      	bne.n	8001134 <Game_Status+0x454>
						if(board[i][j] == 1) return BLUE_WINS;
 8001116:	4921      	ldr	r1, [pc, #132]	@ (800119c <Game_Status+0x4bc>)
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <Game_Status+0x450>
 800112c:	2301      	movs	r3, #1
 800112e:	e02f      	b.n	8001190 <Game_Status+0x4b0>
						else return RED_WINS;
 8001130:	2302      	movs	r3, #2
 8001132:	e02d      	b.n	8001190 <Game_Status+0x4b0>
		for(int j = 0; j < NUM_COLS; j++){
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3301      	adds	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b06      	cmp	r3, #6
 800113e:	f77f add8 	ble.w	8000cf2 <Game_Status+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b05      	cmp	r3, #5
 800114c:	f77f adce 	ble.w	8000cec <Game_Status+0xc>
			
		}
	}

	//Check for tie (board is full)
	for(int i = 0; i < NUM_ROWS; i++){
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e018      	b.n	8001188 <Game_Status+0x4a8>
		for(int j = 0; j < NUM_COLS; j++){
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	e00f      	b.n	800117c <Game_Status+0x49c>
			if(board[i][j] == 0) return ONGOING;
 800115c:	490f      	ldr	r1, [pc, #60]	@ (800119c <Game_Status+0x4bc>)
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <Game_Status+0x496>
 8001172:	2300      	movs	r3, #0
 8001174:	e00c      	b.n	8001190 <Game_Status+0x4b0>
		for(int j = 0; j < NUM_COLS; j++){
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b06      	cmp	r3, #6
 8001180:	ddec      	ble.n	800115c <Game_Status+0x47c>
	for(int i = 0; i < NUM_ROWS; i++){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b05      	cmp	r3, #5
 800118c:	dde3      	ble.n	8001156 <Game_Status+0x476>
		}
	}
	return TIE;
 800118e:	2303      	movs	r3, #3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bc90      	pop	{r4, r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200000a4 	.word	0x200000a4

080011a0 <Display_Results>:

void Display_Results(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	@ 0x58
 80011a4:	af00      	add	r7, sp, #0
	GAME_RESULT result = Game_Status();
 80011a6:	f7ff fd9b 	bl	8000ce0 <Game_Status>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if(result == BLUE_WINS) num_blue_victories++;
 80011b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <Display_Results+0x24>
 80011b8:	4b7f      	ldr	r3, [pc, #508]	@ (80013b8 <Display_Results+0x218>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a7e      	ldr	r2, [pc, #504]	@ (80013b8 <Display_Results+0x218>)
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e012      	b.n	80011ea <Display_Results+0x4a>
	else if (result == RED_WINS) num_red_victories++;
 80011c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d105      	bne.n	80011d8 <Display_Results+0x38>
 80011cc:	4b7b      	ldr	r3, [pc, #492]	@ (80013bc <Display_Results+0x21c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a7a      	ldr	r2, [pc, #488]	@ (80013bc <Display_Results+0x21c>)
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e008      	b.n	80011ea <Display_Results+0x4a>
	else if (result == TIE) num_ties++;
 80011d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d104      	bne.n	80011ea <Display_Results+0x4a>
 80011e0:	4b77      	ldr	r3, [pc, #476]	@ (80013c0 <Display_Results+0x220>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a76      	ldr	r2, [pc, #472]	@ (80013c0 <Display_Results+0x220>)
 80011e8:	6013      	str	r3, [r2, #0]

	switch(result){
 80011ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d019      	beq.n	8001226 <Display_Results+0x86>
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	dc20      	bgt.n	8001238 <Display_Results+0x98>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <Display_Results+0x60>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d009      	beq.n	8001212 <Display_Results+0x72>
 80011fe:	e01b      	b.n	8001238 <Display_Results+0x98>
		case BLUE_WINS:
			LCD_SetTextColor(LCD_COLOR_BLUE);
 8001200:	201f      	movs	r0, #31
 8001202:	f000 fbb1 	bl	8001968 <LCD_SetTextColor>
			LCD_DisplayChar(65, 10, "Blue Wins!");
 8001206:	4a6f      	ldr	r2, [pc, #444]	@ (80013c4 <Display_Results+0x224>)
 8001208:	210a      	movs	r1, #10
 800120a:	2041      	movs	r0, #65	@ 0x41
 800120c:	f000 fc3a 	bl	8001a84 <LCD_DisplayChar>
			break;
 8001210:	e01b      	b.n	800124a <Display_Results+0xaa>
		case RED_WINS:
			LCD_SetTextColor(LCD_COLOR_RED);
 8001212:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001216:	f000 fba7 	bl	8001968 <LCD_SetTextColor>
			LCD_DisplayChar(70, 10, "Red Wins!");
 800121a:	4a6b      	ldr	r2, [pc, #428]	@ (80013c8 <Display_Results+0x228>)
 800121c:	210a      	movs	r1, #10
 800121e:	2046      	movs	r0, #70	@ 0x46
 8001220:	f000 fc30 	bl	8001a84 <LCD_DisplayChar>
			break;
 8001224:	e011      	b.n	800124a <Display_Results+0xaa>
		case TIE:
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 fb9e 	bl	8001968 <LCD_SetTextColor>
			LCD_DisplayChar(60, 10, "It's a tie!");
 800122c:	4a67      	ldr	r2, [pc, #412]	@ (80013cc <Display_Results+0x22c>)
 800122e:	210a      	movs	r1, #10
 8001230:	203c      	movs	r0, #60	@ 0x3c
 8001232:	f000 fc27 	bl	8001a84 <LCD_DisplayChar>
			break;
 8001236:	e008      	b.n	800124a <Display_Results+0xaa>
		default:
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 fb95 	bl	8001968 <LCD_SetTextColor>
			LCD_DisplayChar(80, 10, "Unknown erorr :(");
 800123e:	4a64      	ldr	r2, [pc, #400]	@ (80013d0 <Display_Results+0x230>)
 8001240:	210a      	movs	r1, #10
 8001242:	2050      	movs	r0, #80	@ 0x50
 8001244:	f000 fc1e 	bl	8001a84 <LCD_DisplayChar>
			break;
 8001248:	bf00      	nop
	}
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 fb8c 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(65, 45, "Show stats");
 8001250:	4a60      	ldr	r2, [pc, #384]	@ (80013d4 <Display_Results+0x234>)
 8001252:	212d      	movs	r1, #45	@ 0x2d
 8001254:	2041      	movs	r0, #65	@ 0x41
 8001256:	f000 fc15 	bl	8001a84 <LCD_DisplayChar>

	//Wait for user to click show stats
	while(1){
		if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 800125a:	485f      	ldr	r0, [pc, #380]	@ (80013d8 <Display_Results+0x238>)
 800125c:	f000 fc5f 	bl	8001b1e <returnTouchStateAndLocation>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f9      	bne.n	800125a <Display_Results+0xba>
			LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 8001266:	4b5c      	ldr	r3, [pc, #368]	@ (80013d8 <Display_Results+0x238>)
 8001268:	e893 0003 	ldmia.w	r3, {r0, r1}
 800126c:	f000 fc64 	bl	8001b38 <returnTouchQuadrant>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			if(touchedQuadrant == BOTTOM_LEFT || touchedQuadrant == BOTTOM_RIGHT) break;
 8001276:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <Display_Results+0xe8>
 800127e:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8001282:	2b01      	cmp	r3, #1
 8001284:	d000      	beq.n	8001288 <Display_Results+0xe8>
		if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8001286:	e7e8      	b.n	800125a <Display_Results+0xba>
		}
	}

	LCD_Clear(0, LCD_COLOR_WHITE);
 8001288:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fb49 	bl	8001924 <LCD_Clear>

	char str_blue_wins[20];
	sprintf(str_blue_wins, "%d", num_blue_victories);
 8001292:	4b49      	ldr	r3, [pc, #292]	@ (80013b8 <Display_Results+0x218>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800129a:	4950      	ldr	r1, [pc, #320]	@ (80013dc <Display_Results+0x23c>)
 800129c:	4618      	mov	r0, r3
 800129e:	f006 fad7 	bl	8007850 <siprintf>

	char str_red_wins[20];
	sprintf(str_red_wins, "%d", num_red_victories);
 80012a2:	4b46      	ldr	r3, [pc, #280]	@ (80013bc <Display_Results+0x21c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012aa:	494c      	ldr	r1, [pc, #304]	@ (80013dc <Display_Results+0x23c>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 facf 	bl	8007850 <siprintf>

	char str_ties[20];
	sprintf(str_ties, "%d", num_ties);
 80012b2:	4b43      	ldr	r3, [pc, #268]	@ (80013c0 <Display_Results+0x220>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4948      	ldr	r1, [pc, #288]	@ (80013dc <Display_Results+0x23c>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f006 fac7 	bl	8007850 <siprintf>

	int num_games = num_blue_victories + num_red_victories + num_ties;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	@ (80013b8 <Display_Results+0x218>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b3d      	ldr	r3, [pc, #244]	@ (80013bc <Display_Results+0x21c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	441a      	add	r2, r3
 80012cc:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <Display_Results+0x220>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	653b      	str	r3, [r7, #80]	@ 0x50
	char str_games[20];
	sprintf(str_games, "%d", num_games);
 80012d4:	463b      	mov	r3, r7
 80012d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80012d8:	4940      	ldr	r1, [pc, #256]	@ (80013dc <Display_Results+0x23c>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 fab8 	bl	8007850 <siprintf>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 fb41 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(5, 10, "Total games played: ");
 80012e6:	4a3e      	ldr	r2, [pc, #248]	@ (80013e0 <Display_Results+0x240>)
 80012e8:	210a      	movs	r1, #10
 80012ea:	2005      	movs	r0, #5
 80012ec:	f000 fbca 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(200, 10, str_games);
 80012f0:	463b      	mov	r3, r7
 80012f2:	461a      	mov	r2, r3
 80012f4:	210a      	movs	r1, #10
 80012f6:	20c8      	movs	r0, #200	@ 0xc8
 80012f8:	f000 fbc4 	bl	8001a84 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_BLUE);
 80012fc:	201f      	movs	r0, #31
 80012fe:	f000 fb33 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(5, 40, "Blue won ");
 8001302:	4a38      	ldr	r2, [pc, #224]	@ (80013e4 <Display_Results+0x244>)
 8001304:	2128      	movs	r1, #40	@ 0x28
 8001306:	2005      	movs	r0, #5
 8001308:	f000 fbbc 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(93, 40, str_blue_wins);
 800130c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001310:	461a      	mov	r2, r3
 8001312:	2128      	movs	r1, #40	@ 0x28
 8001314:	205d      	movs	r0, #93	@ 0x5d
 8001316:	f000 fbb5 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(110, 40, "games");
 800131a:	4a33      	ldr	r2, [pc, #204]	@ (80013e8 <Display_Results+0x248>)
 800131c:	2128      	movs	r1, #40	@ 0x28
 800131e:	206e      	movs	r0, #110	@ 0x6e
 8001320:	f000 fbb0 	bl	8001a84 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8001324:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001328:	f000 fb1e 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(5, 70, "Red won ");
 800132c:	4a2f      	ldr	r2, [pc, #188]	@ (80013ec <Display_Results+0x24c>)
 800132e:	2146      	movs	r1, #70	@ 0x46
 8001330:	2005      	movs	r0, #5
 8001332:	f000 fba7 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(93, 70, str_red_wins);
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	461a      	mov	r2, r3
 800133c:	2146      	movs	r1, #70	@ 0x46
 800133e:	205d      	movs	r0, #93	@ 0x5d
 8001340:	f000 fba0 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(110, 70, "games");
 8001344:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <Display_Results+0x248>)
 8001346:	2146      	movs	r1, #70	@ 0x46
 8001348:	206e      	movs	r0, #110	@ 0x6e
 800134a:	f000 fb9b 	bl	8001a84 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fb0a 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(5, 100, str_ties);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	461a      	mov	r2, r3
 800135a:	2164      	movs	r1, #100	@ 0x64
 800135c:	2005      	movs	r0, #5
 800135e:	f000 fb91 	bl	8001a84 <LCD_DisplayChar>
	LCD_DisplayChar(20, 100, "games ended in a tie");
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <Display_Results+0x250>)
 8001364:	2164      	movs	r1, #100	@ 0x64
 8001366:	2014      	movs	r0, #20
 8001368:	f000 fb8c 	bl	8001a84 <LCD_DisplayChar>

	LCD_DisplayChar(5, 130, "This game took ");
 800136c:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <Display_Results+0x254>)
 800136e:	2182      	movs	r1, #130	@ 0x82
 8001370:	2005      	movs	r0, #5
 8001372:	f000 fb87 	bl	8001a84 <LCD_DisplayChar>
	// LCD_DisplayChar(160, 130, timer_value);
	LCD_DisplayChar(155, 150, "seconds");
 8001376:	4a20      	ldr	r2, [pc, #128]	@ (80013f8 <Display_Results+0x258>)
 8001378:	2196      	movs	r1, #150	@ 0x96
 800137a:	209b      	movs	r0, #155	@ 0x9b
 800137c:	f000 fb82 	bl	8001a84 <LCD_DisplayChar>

	LCD_DisplayChar(10, 200, "Play another game?");
 8001380:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <Display_Results+0x25c>)
 8001382:	21c8      	movs	r1, #200	@ 0xc8
 8001384:	200a      	movs	r0, #10
 8001386:	f000 fb7d 	bl	8001a84 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 800138a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800138e:	f000 faeb 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(20, 250, "No");
 8001392:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <Display_Results+0x260>)
 8001394:	21fa      	movs	r1, #250	@ 0xfa
 8001396:	2014      	movs	r0, #20
 8001398:	f000 fb74 	bl	8001a84 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_GREEN);
 800139c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80013a0:	f000 fae2 	bl	8001968 <LCD_SetTextColor>
	LCD_DisplayChar(190, 250, "Yes");
 80013a4:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <Display_Results+0x264>)
 80013a6:	21fa      	movs	r1, #250	@ 0xfa
 80013a8:	20be      	movs	r0, #190	@ 0xbe
 80013aa:	f000 fb6b 	bl	8001a84 <LCD_DisplayChar>
}
 80013ae:	bf00      	nop
 80013b0:	3758      	adds	r7, #88	@ 0x58
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000014c 	.word	0x2000014c
 80013bc:	20000150 	.word	0x20000150
 80013c0:	20000154 	.word	0x20000154
 80013c4:	08008980 	.word	0x08008980
 80013c8:	0800898c 	.word	0x0800898c
 80013cc:	08008998 	.word	0x08008998
 80013d0:	080089a4 	.word	0x080089a4
 80013d4:	080089b8 	.word	0x080089b8
 80013d8:	2000009c 	.word	0x2000009c
 80013dc:	080089c4 	.word	0x080089c4
 80013e0:	080089c8 	.word	0x080089c8
 80013e4:	080089e0 	.word	0x080089e0
 80013e8:	080089ec 	.word	0x080089ec
 80013ec:	080089f4 	.word	0x080089f4
 80013f0:	08008a00 	.word	0x08008a00
 80013f4:	08008a18 	.word	0x08008a18
 80013f8:	08008a28 	.word	0x08008a28
 80013fc:	08008a30 	.word	0x08008a30
 8001400:	08008a44 	.word	0x08008a44
 8001404:	08008a48 	.word	0x08008a48

08001408 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){ //Button Interrupt Handler
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	DisableInterrupt(EXTI0_IRQ_NUMBER);
 800140c:	2006      	movs	r0, #6
 800140e:	f000 f845 	bl	800149c <DisableInterrupt>
	
	Drop_Coin = 1;
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <EXTI0_IRQHandler+0x20>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]

	ClearPendingEXTIBit(1 << GPIOA_PORT_NUMBER);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 f84d 	bl	80014b8 <ClearPendingEXTIBit>
	EnableInterrupt(EXTI0_IRQ_NUMBER);
 800141e:	2006      	movs	r0, #6
 8001420:	f000 f82e 	bl	8001480 <EnableInterrupt>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000015c 	.word	0x2000015c

0800142c <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef button;

	button.Pin = GPIO_PIN_0;
 8001432:	2301      	movs	r3, #1
 8001434:	607b      	str	r3, [r7, #4]
	button.Mode = GPIO_MODE_IT_RISING;
 8001436:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800143a:	60bb      	str	r3, [r7, #8]
	button.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <Button_Init+0x4c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <Button_Init+0x4c>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	@ 0x30
 8001454:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <Button_Init+0x4c>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &button);
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	@ (800147c <Button_Init+0x50>)
 8001466:	f002 fb97 	bl	8003b98 <HAL_GPIO_Init>
	EnableInterrupt(EXTI0_IRQ_NUMBER);
 800146a:	2006      	movs	r0, #6
 800146c:	f000 f808 	bl	8001480 <EnableInterrupt>
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <EnableInterrupt>:
#include "InterruptControl.h"

void EnableInterrupt(IRQn_Type IRQ_Number){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_EnableIRQ(IRQ_Number);
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fb59 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <DisableInterrupt>:

void DisableInterrupt(IRQn_Type IRQ_Number){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(IRQ_Number);
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fb59 	bl	8003b62 <HAL_NVIC_DisableIRQ>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <ClearPendingEXTIBit>:

void ClearPendingInterrupt(IRQn_Type IRQ_Number){
	HAL_NVIC_ClearPendingIRQ(IRQ_Number);
}

void ClearPendingEXTIBit(uint8_t PinNumber){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	__HAL_GPIO_EXTI_CLEAR_FLAG(PinNumber);
 80014c2:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <ClearPendingEXTIBit+0x1c>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	6153      	str	r3, [r2, #20]
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	4b5a      	ldr	r3, [pc, #360]	@ (800164c <LCD_GPIO_Init+0x174>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a59      	ldr	r2, [pc, #356]	@ (800164c <LCD_GPIO_Init+0x174>)
 80014e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b57      	ldr	r3, [pc, #348]	@ (800164c <LCD_GPIO_Init+0x174>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	4b53      	ldr	r3, [pc, #332]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a52      	ldr	r2, [pc, #328]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b50      	ldr	r3, [pc, #320]	@ (800164c <LCD_GPIO_Init+0x174>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <LCD_GPIO_Init+0x174>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a4b      	ldr	r2, [pc, #300]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b49      	ldr	r3, [pc, #292]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b45      	ldr	r3, [pc, #276]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a44      	ldr	r2, [pc, #272]	@ (800164c <LCD_GPIO_Init+0x174>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b42      	ldr	r3, [pc, #264]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a3d      	ldr	r2, [pc, #244]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a36      	ldr	r2, [pc, #216]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <LCD_GPIO_Init+0x174>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b30      	ldr	r3, [pc, #192]	@ (800164c <LCD_GPIO_Init+0x174>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a2f      	ldr	r2, [pc, #188]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <LCD_GPIO_Init+0x174>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80015a2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80015a6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80015b4:	230e      	movs	r3, #14
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4824      	ldr	r0, [pc, #144]	@ (8001650 <LCD_GPIO_Init+0x178>)
 80015c0:	f002 faea 	bl	8003b98 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80015c4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80015c8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4820      	ldr	r0, [pc, #128]	@ (8001654 <LCD_GPIO_Init+0x17c>)
 80015d2:	f002 fae1 	bl	8003b98 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80015d6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	481d      	ldr	r0, [pc, #116]	@ (8001658 <LCD_GPIO_Init+0x180>)
 80015e4:	f002 fad8 	bl	8003b98 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80015e8:	2348      	movs	r3, #72	@ 0x48
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	481a      	ldr	r0, [pc, #104]	@ (800165c <LCD_GPIO_Init+0x184>)
 80015f4:	f002 fad0 	bl	8003b98 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80015f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4816      	ldr	r0, [pc, #88]	@ (8001660 <LCD_GPIO_Init+0x188>)
 8001606:	f002 fac7 	bl	8003b98 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800160a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800160e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4813      	ldr	r0, [pc, #76]	@ (8001664 <LCD_GPIO_Init+0x18c>)
 8001618:	f002 fabe 	bl	8003b98 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800161c:	2303      	movs	r3, #3
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001620:	2309      	movs	r3, #9
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	480a      	ldr	r0, [pc, #40]	@ (8001654 <LCD_GPIO_Init+0x17c>)
 800162c:	f002 fab4 	bl	8003b98 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001630:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <LCD_GPIO_Init+0x18c>)
 800163e:	f002 faab 	bl	8003b98 <HAL_GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	3730      	adds	r7, #48	@ 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021400 	.word	0x40021400
 8001664:	40021800 	.word	0x40021800

08001668 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b090      	sub	sp, #64	@ 0x40
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001676:	23f0      	movs	r3, #240	@ 0xf0
 8001678:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800167e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001682:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001684:	2302      	movs	r3, #2
 8001686:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001688:	23ff      	movs	r3, #255	@ 0xff
 800168a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001696:	2305      	movs	r3, #5
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <LTCD_Layer_Init+0x78>)
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80016a4:	23f0      	movs	r3, #240	@ 0xf0
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80016a8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <LTCD_Layer_Init+0x7c>)
 80016ca:	f003 fea7 	bl	800541c <HAL_LTDC_ConfigLayer>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80016d4:	f000 fa12 	bl	8001afc <LCD_Error_Handler>
	}
}
 80016d8:	bf00      	nop
 80016da:	3740      	adds	r7, #64	@ 0x40
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000023c 	.word	0x2000023c
 80016e4:	20000160 	.word	0x20000160

080016e8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80016ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <LTCD__Init+0xb0>)
 80016ee:	4a2b      	ldr	r2, [pc, #172]	@ (800179c <LTCD__Init+0xb4>)
 80016f0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80016f2:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <LTCD__Init+0xb0>)
 80016f4:	2209      	movs	r2, #9
 80016f6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <LTCD__Init+0xb0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <LTCD__Init+0xb0>)
 8001700:	221d      	movs	r2, #29
 8001702:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <LTCD__Init+0xb0>)
 8001706:	2203      	movs	r2, #3
 8001708:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <LTCD__Init+0xb0>)
 800170c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <LTCD__Init+0xb0>)
 8001714:	f240 1243 	movw	r2, #323	@ 0x143
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800171a:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <LTCD__Init+0xb0>)
 800171c:	f240 1217 	movw	r2, #279	@ 0x117
 8001720:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <LTCD__Init+0xb0>)
 8001724:	f240 1247 	movw	r2, #327	@ 0x147
 8001728:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <LTCD__Init+0xb0>)
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <LTCD__Init+0xb0>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <LTCD__Init+0xb0>)
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001742:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <LTCD__Init+0xb8>)
 8001744:	2208      	movs	r2, #8
 8001746:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <LTCD__Init+0xb8>)
 800174a:	22c0      	movs	r2, #192	@ 0xc0
 800174c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <LTCD__Init+0xb8>)
 8001750:	2204      	movs	r2, #4
 8001752:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <LTCD__Init+0xb8>)
 8001756:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800175c:	4810      	ldr	r0, [pc, #64]	@ (80017a0 <LTCD__Init+0xb8>)
 800175e:	f004 fcb7 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <LTCD__Init+0xb0>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <LTCD__Init+0xb0>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <LTCD__Init+0xb0>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <LTCD__Init+0xb0>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800177a:	f7ff fead 	bl	80014d8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <LTCD__Init+0xb0>)
 8001780:	f003 fd7c 	bl	800527c <HAL_LTDC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800178a:	f000 f9b7 	bl	8001afc <LCD_Error_Handler>
	 }

	ili9341_Init();
 800178e:	f000 fab3 	bl	8001cf8 <ili9341_Init>
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000160 	.word	0x20000160
 800179c:	40016800 	.word	0x40016800
 80017a0:	20000208 	.word	0x20000208

080017a4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	460b      	mov	r3, r1
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80017b6:	88ba      	ldrh	r2, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	461a      	mov	r2, r3
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4413      	add	r3, r2
 80017c6:	4905      	ldr	r1, [pc, #20]	@ (80017dc <LCD_Draw_Pixel+0x38>)
 80017c8:	887a      	ldrh	r2, [r7, #2]
 80017ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2000023c 	.word	0x2000023c

080017e0 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	80fb      	strh	r3, [r7, #6]
 80017f2:	4603      	mov	r3, r0
 80017f4:	80bb      	strh	r3, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	807b      	strh	r3, [r7, #2]
 80017fa:	4613      	mov	r3, r2
 80017fc:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	425b      	negs	r3, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	81fb      	strh	r3, [r7, #14]
 8001806:	e034      	b.n	8001872 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	425b      	negs	r3, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	81bb      	strh	r3, [r7, #12]
 8001810:	e024      	b.n	800185c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001816:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800181a:	fb03 f202 	mul.w	r2, r3, r2
 800181e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001822:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	441a      	add	r2, r3
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	8879      	ldrh	r1, [r7, #2]
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	429a      	cmp	r2, r3
 8001836:	dc0b      	bgt.n	8001850 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001838:	89ba      	ldrh	r2, [r7, #12]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	4413      	add	r3, r2
 800183e:	b298      	uxth	r0, r3
 8001840:	89fa      	ldrh	r2, [r7, #14]
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	883a      	ldrh	r2, [r7, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff ffaa 	bl	80017a4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001850:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001854:	b29b      	uxth	r3, r3
 8001856:	3301      	adds	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	81bb      	strh	r3, [r7, #12]
 800185c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	429a      	cmp	r2, r3
 8001864:	ddd5      	ble.n	8001812 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800186a:	b29b      	uxth	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	81fb      	strh	r3, [r7, #14]
 8001872:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	429a      	cmp	r2, r3
 800187a:	ddc5      	ble.n	8001808 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}

08001886 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001886:	b590      	push	{r4, r7, lr}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	4604      	mov	r4, r0
 800188e:	4608      	mov	r0, r1
 8001890:	4611      	mov	r1, r2
 8001892:	461a      	mov	r2, r3
 8001894:	4623      	mov	r3, r4
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	4603      	mov	r3, r0
 800189a:	80bb      	strh	r3, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	81fb      	strh	r3, [r7, #14]
 80018a8:	e00b      	b.n	80018c2 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80018aa:	89fa      	ldrh	r2, [r7, #14]
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	b299      	uxth	r1, r3
 80018b2:	883a      	ldrh	r2, [r7, #0]
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff74 	bl	80017a4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	3301      	adds	r3, #1
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	89fa      	ldrh	r2, [r7, #14]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3ef      	bcc.n	80018aa <LCD_Draw_Vertical_Line+0x24>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	4603      	mov	r3, r0
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	807b      	strh	r3, [r7, #2]
 80018ee:	4613      	mov	r3, r2
 80018f0:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	81fb      	strh	r3, [r7, #14]
 80018f6:	e00b      	b.n	8001910 <LCD_Draw_Horizontal_Line+0x3c>
	{
		LCD_Draw_Pixel(i+x, y, color);
 80018f8:	89fa      	ldrh	r2, [r7, #14]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	883a      	ldrh	r2, [r7, #0]
 8001902:	88b9      	ldrh	r1, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff4d 	bl	80017a4 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	3301      	adds	r3, #1
 800190e:	81fb      	strh	r3, [r7, #14]
 8001910:	89fa      	ldrh	r2, [r7, #14]
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3ef      	bcc.n	80018f8 <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}
	...

08001924 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	460a      	mov	r2, r1
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e007      	b.n	8001950 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001940:	4908      	ldr	r1, [pc, #32]	@ (8001964 <LCD_Clear+0x40>)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	88ba      	ldrh	r2, [r7, #4]
 8001946:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001956:	d3f3      	bcc.n	8001940 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	2000023c 	.word	0x2000023c

08001968 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <LCD_SetTextColor+0x1c>)
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	8013      	strh	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000

08001988 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <LCD_SetFont+0x1c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000238 	.word	0x20000238

080019a8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	603a      	str	r2, [r7, #0]
 80019b2:	80fb      	strh	r3, [r7, #6]
 80019b4:	460b      	mov	r3, r1
 80019b6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e04c      	b.n	8001a60 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e03f      	b.n	8001a4c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <LCD_Draw_Char+0xd0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	889b      	ldrh	r3, [r3, #4]
 80019de:	4a27      	ldr	r2, [pc, #156]	@ (8001a7c <LCD_Draw_Char+0xd4>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	fa42 f303 	asr.w	r3, r2, r3
 80019f4:	400b      	ands	r3, r1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d104      	bne.n	8001a04 <LCD_Draw_Char+0x5c>
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <LCD_Draw_Char+0xd0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d920      	bls.n	8001a46 <LCD_Draw_Char+0x9e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	fa42 f303 	asr.w	r3, r2, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <LCD_Draw_Char+0x80>
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <LCD_Draw_Char+0xd0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	889b      	ldrh	r3, [r3, #4]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d80e      	bhi.n	8001a46 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b298      	uxth	r0, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <LCD_Draw_Char+0xd8>)
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff feaf 	bl	80017a4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <LCD_Draw_Char+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	889b      	ldrh	r3, [r3, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d3b8      	bcc.n	80019cc <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <LCD_Draw_Char+0xd0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	88db      	ldrh	r3, [r3, #6]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d3ab      	bcc.n	80019c6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000238 	.word	0x20000238
 8001a7c:	aaaaaaab 	.word	0xaaaaaaab
 8001a80:	20000000 	.word	0x20000000

08001a84 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, char text_to_print[])
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	603a      	str	r2, [r7, #0]
 8001a8e:	80fb      	strh	r3, [r7, #6]
 8001a90:	460b      	mov	r3, r1
 8001a92:	80bb      	strh	r3, [r7, #4]
	//altering function to print strings. Printing one char at a time is more customizeable, but takes too long.
	//Might switch back to printing char by char when everything is functional to make it prettier.
	for(int i = 0; i < strlen(text_to_print); i++){
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e022      	b.n	8001ae0 <LCD_DisplayChar+0x5c>
		int print_increment = 10*i;
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
		uint8_t Ascii = text_to_print[i] - 32;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	3b20      	subs	r3, #32
 8001ab0:	73fb      	strb	r3, [r7, #15]
		LCD_Draw_Char(Xpos+print_increment, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4413      	add	r3, r2
 8001aba:	b298      	uxth	r0, r3
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <LCD_DisplayChar+0x74>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <LCD_DisplayChar+0x74>)
 8001ac6:	6809      	ldr	r1, [r1, #0]
 8001ac8:	88c9      	ldrh	r1, [r1, #6]
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	441a      	add	r2, r3
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff ff67 	bl	80019a8 <LCD_Draw_Char>
	for(int i = 0; i < strlen(text_to_print); i++){
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f7fe fb85 	bl	80001f0 <strlen>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d8d5      	bhi.n	8001a9a <LCD_DisplayChar+0x16>
	}
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000238 	.word	0x20000238

08001afc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <LCD_Error_Handler+0x8>

08001b08 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001b0c:	f001 faaf 	bl	800306e <STMPE811_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d001      	beq.n	8001b1a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001b16:	bf00      	nop
 8001b18:	e7fd      	b.n	8001b16 <InitializeLCDTouch+0xe>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f001 fb59 	bl	80031de <STMPE811_ReadTouch>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <returnTouchQuadrant>:
void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
	STMPE811_Write(RegToWrite, writeData);
}

LCD_Quadrant returnTouchQuadrant(STMPE811_TouchData touchLocation){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	463b      	mov	r3, r7
 8001b40:	e883 0003 	stmia.w	r3, {r0, r1}
	//DIMENSIONS: X: (0, 240) ; Y: (0, 320)

	if(touchLocation.x >= 0 && touchLocation.x < 120 && touchLocation.y >= 0 && touchLocation.y < 160){
 8001b44:	883b      	ldrh	r3, [r7, #0]
 8001b46:	2b77      	cmp	r3, #119	@ 0x77
 8001b48:	d807      	bhi.n	8001b5a <returnTouchQuadrant+0x22>
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	2b9f      	cmp	r3, #159	@ 0x9f
 8001b4e:	d804      	bhi.n	8001b5a <returnTouchQuadrant+0x22>
		printf("Top Right\n");
 8001b50:	481e      	ldr	r0, [pc, #120]	@ (8001bcc <returnTouchQuadrant+0x94>)
 8001b52:	f005 fe75 	bl	8007840 <puts>
		return TOP_RIGHT;
 8001b56:	2302      	movs	r3, #2
 8001b58:	e033      	b.n	8001bc2 <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 120 && touchLocation.x <= 240 && touchLocation.y >= 0 && touchLocation.y < 160){
 8001b5a:	883b      	ldrh	r3, [r7, #0]
 8001b5c:	2b77      	cmp	r3, #119	@ 0x77
 8001b5e:	d90a      	bls.n	8001b76 <returnTouchQuadrant+0x3e>
 8001b60:	883b      	ldrh	r3, [r7, #0]
 8001b62:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b64:	d807      	bhi.n	8001b76 <returnTouchQuadrant+0x3e>
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	2b9f      	cmp	r3, #159	@ 0x9f
 8001b6a:	d804      	bhi.n	8001b76 <returnTouchQuadrant+0x3e>
		printf("Top Left\n");
 8001b6c:	4818      	ldr	r0, [pc, #96]	@ (8001bd0 <returnTouchQuadrant+0x98>)
 8001b6e:	f005 fe67 	bl	8007840 <puts>
		return TOP_LEFT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e025      	b.n	8001bc2 <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 0 && touchLocation.x < 120 && touchLocation.y >= 160 && touchLocation.y <= 320){
 8001b76:	883b      	ldrh	r3, [r7, #0]
 8001b78:	2b77      	cmp	r3, #119	@ 0x77
 8001b7a:	d80b      	bhi.n	8001b94 <returnTouchQuadrant+0x5c>
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	2b9f      	cmp	r3, #159	@ 0x9f
 8001b80:	d908      	bls.n	8001b94 <returnTouchQuadrant+0x5c>
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b88:	d804      	bhi.n	8001b94 <returnTouchQuadrant+0x5c>
		printf("Bottom Right\n");
 8001b8a:	4812      	ldr	r0, [pc, #72]	@ (8001bd4 <returnTouchQuadrant+0x9c>)
 8001b8c:	f005 fe58 	bl	8007840 <puts>
		return BOTTOM_RIGHT;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e016      	b.n	8001bc2 <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 120 && touchLocation.x <= 240 && touchLocation.y >= 160 && touchLocation.y <= 320){
 8001b94:	883b      	ldrh	r3, [r7, #0]
 8001b96:	2b77      	cmp	r3, #119	@ 0x77
 8001b98:	d90e      	bls.n	8001bb8 <returnTouchQuadrant+0x80>
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b9e:	d80b      	bhi.n	8001bb8 <returnTouchQuadrant+0x80>
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	2b9f      	cmp	r3, #159	@ 0x9f
 8001ba4:	d908      	bls.n	8001bb8 <returnTouchQuadrant+0x80>
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001bac:	d804      	bhi.n	8001bb8 <returnTouchQuadrant+0x80>
		printf("Bottom Left\n");
 8001bae:	480a      	ldr	r0, [pc, #40]	@ (8001bd8 <returnTouchQuadrant+0xa0>)
 8001bb0:	f005 fe46 	bl	8007840 <puts>
		return BOTTOM_LEFT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e004      	b.n	8001bc2 <returnTouchQuadrant+0x8a>
	}

	else{
		printf("Detection Error\n");
 8001bb8:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <returnTouchQuadrant+0xa4>)
 8001bba:	f005 fe41 	bl	8007840 <puts>
		return DETECTION_ERROR;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08008a4c 	.word	0x08008a4c
 8001bd0:	08008a58 	.word	0x08008a58
 8001bd4:	08008a64 	.word	0x08008a64
 8001bd8:	08008a74 	.word	0x08008a74
 8001bdc:	08008a80 	.word	0x08008a80

08001be0 <LED_Init>:
#include "LED_Driver.h"

void LED_Init(uint8_t LED){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef led;
	switch(LED){
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <LED_Init+0x16>
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d00a      	beq.n	8001c0a <LED_Init+0x2a>
 8001bf4:	e012      	b.n	8001c1c <LED_Init+0x3c>
		case 0:
			led.Pin = GPIO_PIN_14;
 8001bf6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
			led.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	61bb      	str	r3, [r7, #24]
			led.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
			break;
 8001c08:	e008      	b.n	8001c1c <LED_Init+0x3c>
		case 1:
			led.Pin = GPIO_PIN_13;
 8001c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0e:	60fb      	str	r3, [r7, #12]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
			led.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	61bb      	str	r3, [r7, #24]
			led.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
	}

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <LED_Init+0x6c>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <LED_Init+0x6c>)
 8001c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <LED_Init+0x6c>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOG, &led);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4804      	ldr	r0, [pc, #16]	@ (8001c50 <LED_Init+0x70>)
 8001c40:	f001 ffaa 	bl	8003b98 <HAL_GPIO_Init>
}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40021800 	.word	0x40021800

08001c54 <TurnOffLED>:
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
			break;
	}
}

void TurnOffLED(uint8_t LED){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	switch(LED){
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <TurnOffLED+0x16>
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d007      	beq.n	8001c78 <TurnOffLED+0x24>

		case 1:
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
			break;
	}
}
 8001c68:	e00d      	b.n	8001c86 <TurnOffLED+0x32>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <TurnOffLED+0x3c>)
 8001c72:	f002 fa49 	bl	8004108 <HAL_GPIO_WritePin>
			break;
 8001c76:	e006      	b.n	8001c86 <TurnOffLED+0x32>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c7e:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <TurnOffLED+0x3c>)
 8001c80:	f002 fa42 	bl	8004108 <HAL_GPIO_WritePin>
			break;
 8001c84:	bf00      	nop
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40021800 	.word	0x40021800

08001c94 <addSchedulerEvent>:
#include "Scheduler.h"
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event){
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <addSchedulerEvent+0x20>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	4a03      	ldr	r2, [pc, #12]	@ (8001cb4 <addSchedulerEvent+0x20>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	20025a3c 	.word	0x20025a3c

08001cb8 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <removeSchedulerEvent+0x24>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <removeSchedulerEvent+0x24>)
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20025a3c 	.word	0x20025a3c

08001ce0 <getScheduledEvents>:

uint32_t getScheduledEvents(){
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <getScheduledEvents+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20025a3c 	.word	0x20025a3c

08001cf8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cfc:	f000 f9fe 	bl	80020fc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001d00:	20ca      	movs	r0, #202	@ 0xca
 8001d02:	f000 f943 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001d06:	20c3      	movs	r0, #195	@ 0xc3
 8001d08:	f000 f94d 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001d0c:	2008      	movs	r0, #8
 8001d0e:	f000 f94a 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001d12:	2050      	movs	r0, #80	@ 0x50
 8001d14:	f000 f947 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001d18:	20cf      	movs	r0, #207	@ 0xcf
 8001d1a:	f000 f937 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f941 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001d24:	20c1      	movs	r0, #193	@ 0xc1
 8001d26:	f000 f93e 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001d2a:	2030      	movs	r0, #48	@ 0x30
 8001d2c:	f000 f93b 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001d30:	20ed      	movs	r0, #237	@ 0xed
 8001d32:	f000 f92b 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001d36:	2064      	movs	r0, #100	@ 0x64
 8001d38:	f000 f935 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f932 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001d42:	2012      	movs	r0, #18
 8001d44:	f000 f92f 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001d48:	2081      	movs	r0, #129	@ 0x81
 8001d4a:	f000 f92c 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001d4e:	20e8      	movs	r0, #232	@ 0xe8
 8001d50:	f000 f91c 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001d54:	2085      	movs	r0, #133	@ 0x85
 8001d56:	f000 f926 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 f923 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d60:	2078      	movs	r0, #120	@ 0x78
 8001d62:	f000 f920 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001d66:	20cb      	movs	r0, #203	@ 0xcb
 8001d68:	f000 f910 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001d6c:	2039      	movs	r0, #57	@ 0x39
 8001d6e:	f000 f91a 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001d72:	202c      	movs	r0, #44	@ 0x2c
 8001d74:	f000 f917 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 f914 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001d7e:	2034      	movs	r0, #52	@ 0x34
 8001d80:	f000 f911 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001d84:	2002      	movs	r0, #2
 8001d86:	f000 f90e 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001d8a:	20f7      	movs	r0, #247	@ 0xf7
 8001d8c:	f000 f8fe 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001d90:	2020      	movs	r0, #32
 8001d92:	f000 f908 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001d96:	20ea      	movs	r0, #234	@ 0xea
 8001d98:	f000 f8f8 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f000 f902 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f8ff 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001da8:	20b1      	movs	r0, #177	@ 0xb1
 8001daa:	f000 f8ef 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f8f9 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001db4:	201b      	movs	r0, #27
 8001db6:	f000 f8f6 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001dba:	20b6      	movs	r0, #182	@ 0xb6
 8001dbc:	f000 f8e6 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f000 f8f0 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001dc6:	20a2      	movs	r0, #162	@ 0xa2
 8001dc8:	f000 f8ed 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001dcc:	20c0      	movs	r0, #192	@ 0xc0
 8001dce:	f000 f8dd 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001dd2:	2010      	movs	r0, #16
 8001dd4:	f000 f8e7 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001dd8:	20c1      	movs	r0, #193	@ 0xc1
 8001dda:	f000 f8d7 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001dde:	2010      	movs	r0, #16
 8001de0:	f000 f8e1 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001de4:	20c5      	movs	r0, #197	@ 0xc5
 8001de6:	f000 f8d1 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001dea:	2045      	movs	r0, #69	@ 0x45
 8001dec:	f000 f8db 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001df0:	2015      	movs	r0, #21
 8001df2:	f000 f8d8 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001df6:	20c7      	movs	r0, #199	@ 0xc7
 8001df8:	f000 f8c8 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001dfc:	2090      	movs	r0, #144	@ 0x90
 8001dfe:	f000 f8d2 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001e02:	2036      	movs	r0, #54	@ 0x36
 8001e04:	f000 f8c2 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001e08:	20c8      	movs	r0, #200	@ 0xc8
 8001e0a:	f000 f8cc 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001e0e:	20f2      	movs	r0, #242	@ 0xf2
 8001e10:	f000 f8bc 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 f8c6 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001e1a:	20b0      	movs	r0, #176	@ 0xb0
 8001e1c:	f000 f8b6 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001e20:	20c2      	movs	r0, #194	@ 0xc2
 8001e22:	f000 f8c0 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001e26:	20b6      	movs	r0, #182	@ 0xb6
 8001e28:	f000 f8b0 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	f000 f8ba 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001e32:	20a7      	movs	r0, #167	@ 0xa7
 8001e34:	f000 f8b7 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001e38:	2027      	movs	r0, #39	@ 0x27
 8001e3a:	f000 f8b4 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f000 f8b1 	bl	8001fa6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001e44:	202a      	movs	r0, #42	@ 0x2a
 8001e46:	f000 f8a1 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f8ab 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f8a8 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f8a5 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001e5c:	20ef      	movs	r0, #239	@ 0xef
 8001e5e:	f000 f8a2 	bl	8001fa6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001e62:	202b      	movs	r0, #43	@ 0x2b
 8001e64:	f000 f892 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 f89c 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f899 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 f896 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001e7a:	203f      	movs	r0, #63	@ 0x3f
 8001e7c:	f000 f893 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001e80:	20f6      	movs	r0, #246	@ 0xf6
 8001e82:	f000 f883 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f000 f88d 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f88a 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001e92:	2006      	movs	r0, #6
 8001e94:	f000 f887 	bl	8001fa6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001e98:	202c      	movs	r0, #44	@ 0x2c
 8001e9a:	f000 f877 	bl	8001f8c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e9e:	20c8      	movs	r0, #200	@ 0xc8
 8001ea0:	f000 f9e8 	bl	8002274 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001ea4:	2026      	movs	r0, #38	@ 0x26
 8001ea6:	f000 f871 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 f87b 	bl	8001fa6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001eb0:	20e0      	movs	r0, #224	@ 0xe0
 8001eb2:	f000 f86b 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f000 f875 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001ebc:	2029      	movs	r0, #41	@ 0x29
 8001ebe:	f000 f872 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001ec2:	2024      	movs	r0, #36	@ 0x24
 8001ec4:	f000 f86f 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001ec8:	200c      	movs	r0, #12
 8001eca:	f000 f86c 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001ece:	200e      	movs	r0, #14
 8001ed0:	f000 f869 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ed4:	2009      	movs	r0, #9
 8001ed6:	f000 f866 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001eda:	204e      	movs	r0, #78	@ 0x4e
 8001edc:	f000 f863 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ee0:	2078      	movs	r0, #120	@ 0x78
 8001ee2:	f000 f860 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001ee6:	203c      	movs	r0, #60	@ 0x3c
 8001ee8:	f000 f85d 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001eec:	2009      	movs	r0, #9
 8001eee:	f000 f85a 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001ef2:	2013      	movs	r0, #19
 8001ef4:	f000 f857 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001ef8:	2005      	movs	r0, #5
 8001efa:	f000 f854 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001efe:	2017      	movs	r0, #23
 8001f00:	f000 f851 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001f04:	2011      	movs	r0, #17
 8001f06:	f000 f84e 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f84b 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001f10:	20e1      	movs	r0, #225	@ 0xe1
 8001f12:	f000 f83b 	bl	8001f8c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f845 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001f1c:	2016      	movs	r0, #22
 8001f1e:	f000 f842 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001f22:	201b      	movs	r0, #27
 8001f24:	f000 f83f 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f28:	2004      	movs	r0, #4
 8001f2a:	f000 f83c 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001f2e:	2011      	movs	r0, #17
 8001f30:	f000 f839 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001f34:	2007      	movs	r0, #7
 8001f36:	f000 f836 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001f3a:	2031      	movs	r0, #49	@ 0x31
 8001f3c:	f000 f833 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001f40:	2033      	movs	r0, #51	@ 0x33
 8001f42:	f000 f830 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001f46:	2042      	movs	r0, #66	@ 0x42
 8001f48:	f000 f82d 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001f4c:	2005      	movs	r0, #5
 8001f4e:	f000 f82a 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001f52:	200c      	movs	r0, #12
 8001f54:	f000 f827 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001f58:	200a      	movs	r0, #10
 8001f5a:	f000 f824 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001f5e:	2028      	movs	r0, #40	@ 0x28
 8001f60:	f000 f821 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001f64:	202f      	movs	r0, #47	@ 0x2f
 8001f66:	f000 f81e 	bl	8001fa6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f000 f81b 	bl	8001fa6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001f70:	2011      	movs	r0, #17
 8001f72:	f000 f80b 	bl	8001f8c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f76:	20c8      	movs	r0, #200	@ 0xc8
 8001f78:	f000 f97c 	bl	8002274 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001f7c:	2029      	movs	r0, #41	@ 0x29
 8001f7e:	f000 f805 	bl	8001f8c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001f82:	202c      	movs	r0, #44	@ 0x2c
 8001f84:	f000 f802 	bl	8001f8c <ili9341_Write_Reg>
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f949 	bl	8002230 <LCD_IO_WriteReg>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f91a 	bl	80021ec <LCD_IO_WriteData>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001fc4:	4819      	ldr	r0, [pc, #100]	@ (800202c <SPI_Init+0x6c>)
 8001fc6:	f004 fcb8 	bl	800693a <HAL_SPI_GetState>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d12b      	bne.n	8002028 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	@ (800202c <SPI_Init+0x6c>)
 8001fd2:	4a17      	ldr	r2, [pc, #92]	@ (8002030 <SPI_Init+0x70>)
 8001fd4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <SPI_Init+0x6c>)
 8001fd8:	2218      	movs	r2, #24
 8001fda:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <SPI_Init+0x6c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <SPI_Init+0x6c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	@ (800202c <SPI_Init+0x6c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <SPI_Init+0x6c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <SPI_Init+0x6c>)
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <SPI_Init+0x6c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <SPI_Init+0x6c>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <SPI_Init+0x6c>)
 8002008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <SPI_Init+0x6c>)
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <SPI_Init+0x6c>)
 8002016:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800201a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800201c:	4803      	ldr	r0, [pc, #12]	@ (800202c <SPI_Init+0x6c>)
 800201e:	f000 f833 	bl	8002088 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002022:	4802      	ldr	r0, [pc, #8]	@ (800202c <SPI_Init+0x6c>)
 8002024:	f004 fa94 	bl	8006550 <HAL_SPI_Init>
  }
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20025a40 	.word	0x20025a40
 8002030:	40015000 	.word	0x40015000

08002034 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <SPI_Write+0x34>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1db9      	adds	r1, r7, #6
 8002048:	2201      	movs	r2, #1
 800204a:	4808      	ldr	r0, [pc, #32]	@ (800206c <SPI_Write+0x38>)
 800204c:	f004 fb31 	bl	80066b2 <HAL_SPI_Transmit>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800205a:	f000 f809 	bl	8002070 <SPI_Error>
  }
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20025a40 	.word	0x20025a40

08002070 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <SPI_Error+0x14>)
 8002076:	f004 faf4 	bl	8006662 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800207a:	f7ff ffa1 	bl	8001fc0 <SPI_Init>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20025a40 	.word	0x20025a40

08002088 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <SPI_MspInit+0x6c>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	4a16      	ldr	r2, [pc, #88]	@ (80020f4 <SPI_MspInit+0x6c>)
 800209a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800209e:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <SPI_MspInit+0x6c>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <SPI_MspInit+0x6c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	4a0f      	ldr	r2, [pc, #60]	@ (80020f4 <SPI_MspInit+0x6c>)
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <SPI_MspInit+0x6c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80020c8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020d6:	2301      	movs	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80020da:	2305      	movs	r3, #5
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4804      	ldr	r0, [pc, #16]	@ (80020f8 <SPI_MspInit+0x70>)
 80020e6:	f001 fd57 	bl	8003b98 <HAL_GPIO_Init>
}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	@ 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40021400 	.word	0x40021400

080020fc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002102:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <LCD_IO_Init+0xe0>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d164      	bne.n	80021d4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800210a:	4b34      	ldr	r3, [pc, #208]	@ (80021dc <LCD_IO_Init+0xe0>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	4b32      	ldr	r3, [pc, #200]	@ (80021e0 <LCD_IO_Init+0xe4>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	4a31      	ldr	r2, [pc, #196]	@ (80021e0 <LCD_IO_Init+0xe4>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <LCD_IO_Init+0xe4>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800212c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002130:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002132:	2301      	movs	r3, #1
 8002134:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	4619      	mov	r1, r3
 8002144:	4827      	ldr	r0, [pc, #156]	@ (80021e4 <LCD_IO_Init+0xe8>)
 8002146:	f001 fd27 	bl	8003b98 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b24      	ldr	r3, [pc, #144]	@ (80021e0 <LCD_IO_Init+0xe4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a23      	ldr	r2, [pc, #140]	@ (80021e0 <LCD_IO_Init+0xe4>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <LCD_IO_Init+0xe4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4619      	mov	r1, r3
 800217e:	4819      	ldr	r0, [pc, #100]	@ (80021e4 <LCD_IO_Init+0xe8>)
 8002180:	f001 fd0a 	bl	8003b98 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <LCD_IO_Init+0xe4>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	4a14      	ldr	r2, [pc, #80]	@ (80021e0 <LCD_IO_Init+0xe4>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6313      	str	r3, [r2, #48]	@ 0x30
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <LCD_IO_Init+0xe4>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80021a0:	2304      	movs	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4619      	mov	r1, r3
 80021b6:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <LCD_IO_Init+0xec>)
 80021b8:	f001 fcee 	bl	8003b98 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80021bc:	2200      	movs	r2, #0
 80021be:	2104      	movs	r1, #4
 80021c0:	4809      	ldr	r0, [pc, #36]	@ (80021e8 <LCD_IO_Init+0xec>)
 80021c2:	f001 ffa1 	bl	8004108 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80021c6:	2201      	movs	r2, #1
 80021c8:	2104      	movs	r1, #4
 80021ca:	4807      	ldr	r0, [pc, #28]	@ (80021e8 <LCD_IO_Init+0xec>)
 80021cc:	f001 ff9c 	bl	8004108 <HAL_GPIO_WritePin>

    SPI_Init();
 80021d0:	f7ff fef6 	bl	8001fc0 <SPI_Init>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20025a98 	.word	0x20025a98
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40020800 	.word	0x40020800

080021ec <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021fc:	480a      	ldr	r0, [pc, #40]	@ (8002228 <LCD_IO_WriteData+0x3c>)
 80021fe:	f001 ff83 	bl	8004108 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002202:	2200      	movs	r2, #0
 8002204:	2104      	movs	r1, #4
 8002206:	4809      	ldr	r0, [pc, #36]	@ (800222c <LCD_IO_WriteData+0x40>)
 8002208:	f001 ff7e 	bl	8004108 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff10 	bl	8002034 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002214:	2201      	movs	r2, #1
 8002216:	2104      	movs	r1, #4
 8002218:	4804      	ldr	r0, [pc, #16]	@ (800222c <LCD_IO_WriteData+0x40>)
 800221a:	f001 ff75 	bl	8004108 <HAL_GPIO_WritePin>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40020800 	.word	0x40020800

08002230 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002240:	480a      	ldr	r0, [pc, #40]	@ (800226c <LCD_IO_WriteReg+0x3c>)
 8002242:	f001 ff61 	bl	8004108 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002246:	2200      	movs	r2, #0
 8002248:	2104      	movs	r1, #4
 800224a:	4809      	ldr	r0, [pc, #36]	@ (8002270 <LCD_IO_WriteReg+0x40>)
 800224c:	f001 ff5c 	bl	8004108 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff feed 	bl	8002034 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800225a:	2201      	movs	r2, #1
 800225c:	2104      	movs	r1, #4
 800225e:	4804      	ldr	r0, [pc, #16]	@ (8002270 <LCD_IO_WriteReg+0x40>)
 8002260:	f001 ff52 	bl	8004108 <HAL_GPIO_WritePin>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40020800 	.word	0x40020800

08002274 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 fb23 	bl	80038c8 <HAL_Delay>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8002292:	f005 f92d 	bl	80074f0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002296:	f001 faa5 	bl	80037e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800229a:	f000 f8b1 	bl	8002400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229e:	f000 faa1 	bl	80027e4 <MX_GPIO_Init>
  MX_LTDC_Init();
 80022a2:	f000 f957 	bl	8002554 <MX_LTDC_Init>
  MX_RNG_Init();
 80022a6:	f000 fa07 	bl	80026b8 <MX_RNG_Init>
  MX_TIM2_Init();
 80022aa:	f000 fa4f 	bl	800274c <MX_TIM2_Init>
  MX_SPI5_Init();
 80022ae:	f000 fa17 	bl	80026e0 <MX_SPI5_Init>
  MX_I2C3_Init();
 80022b2:	f000 f90f 	bl	80024d4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80022b6:	f7fe f96b 	bl	8000590 <ApplicationInit>
  // LCD_Visual_Demo();
  HAL_Delay(5000);
 80022ba:	f241 3088 	movw	r0, #5000	@ 0x1388
 80022be:	f001 fb03 	bl	80038c8 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  // LCD_Touch_Polling_Demo(); // This function Will not return
#endif

  GAME_STATE state = MENU;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
  //State Machine Loop
  while(1){
    if(state == MENU){
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d12a      	bne.n	8002322 <main+0x96>
      printf("%d\n", state);
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4848      	ldr	r0, [pc, #288]	@ (80023f4 <main+0x168>)
 80022d2:	f005 fa4d 	bl	8007770 <iprintf>
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 80022d6:	f7ff fd03 	bl	8001ce0 <getScheduledEvents>
 80022da:	6078      	str	r0, [r7, #4]
        
        if(scheduledEvents && DISPLAY_MENU_SCREEN_EVENT){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <main+0x60>
          Display_Menu_Screen();
 80022e2:	f7fe f99b 	bl	800061c <Display_Menu_Screen>
          removeSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7ff fce6 	bl	8001cb8 <removeSchedulerEvent>
        }

        if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 80022ec:	4842      	ldr	r0, [pc, #264]	@ (80023f8 <main+0x16c>)
 80022ee:	f7ff fc16 	bl	8001b1e <returnTouchStateAndLocation>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <main+0x4a>
            LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80022f8:	4b3f      	ldr	r3, [pc, #252]	@ (80023f8 <main+0x16c>)
 80022fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022fe:	f7ff fc1b 	bl	8001b38 <returnTouchQuadrant>
 8002302:	4603      	mov	r3, r0
 8002304:	70fb      	strb	r3, [r7, #3]
            if(touchedQuadrant == BOTTOM_LEFT){
 8002306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <main+0x88>
                state = SINGLE_PLAYER;
 800230e:	2301      	movs	r3, #1
 8002310:	75fb      	strb	r3, [r7, #23]
                break;
 8002312:	e06e      	b.n	80023f2 <main+0x166>
            }
            else if(touchedQuadrant == BOTTOM_RIGHT){
 8002314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d1dc      	bne.n	80022d6 <main+0x4a>
              state = TWO_PLAYER;
 800231c:	2302      	movs	r3, #2
 800231e:	75fb      	strb	r3, [r7, #23]
              break;
 8002320:	e067      	b.n	80023f2 <main+0x166>
            }
        }
      }
    }
    
    else if(state == SINGLE_PLAYER){
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d126      	bne.n	8002376 <main+0xea>
      addSchedulerEvent(DISPLAY_BOARD_EVENT);
 8002328:	2002      	movs	r0, #2
 800232a:	f7ff fcb3 	bl	8001c94 <addSchedulerEvent>
      addSchedulerEvent(SINGLE_PLAYER_EVENT);
 800232e:	2004      	movs	r0, #4
 8002330:	f7ff fcb0 	bl	8001c94 <addSchedulerEvent>

      LCD_Clear(0, LCD_COLOR_WHITE);
 8002334:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff faf3 	bl	8001924 <LCD_Clear>

      printf("%d\n", state);
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	4619      	mov	r1, r3
 8002342:	482c      	ldr	r0, [pc, #176]	@ (80023f4 <main+0x168>)
 8002344:	f005 fa14 	bl	8007770 <iprintf>

      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 8002348:	f7ff fcca 	bl	8001ce0 <getScheduledEvents>
 800234c:	60b8      	str	r0, [r7, #8]
        if(scheduledEvents && DISPLAY_BOARD_EVENT){
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <main+0xd2>
            Display_Board();
 8002354:	f7fe f9f8 	bl	8000748 <Display_Board>
            removeSchedulerEvent(DISPLAY_BOARD_EVENT);
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff fcad 	bl	8001cb8 <removeSchedulerEvent>
        }

        if(scheduledEvents && SINGLE_PLAYER_EVENT){
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <main+0xe4>
            Single_Player(&hrng);
 8002364:	4825      	ldr	r0, [pc, #148]	@ (80023fc <main+0x170>)
 8002366:	f7fe fa9b 	bl	80008a0 <Single_Player>
            removeSchedulerEvent(SINGLE_PLAYER_EVENT);
 800236a:	2004      	movs	r0, #4
 800236c:	f7ff fca4 	bl	8001cb8 <removeSchedulerEvent>
        }
        state = RESULTS;
 8002370:	2303      	movs	r3, #3
 8002372:	75fb      	strb	r3, [r7, #23]
        break;
 8002374:	e03d      	b.n	80023f2 <main+0x166>
      }
    }

    else if(state == TWO_PLAYER){
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d125      	bne.n	80023c8 <main+0x13c>
      addSchedulerEvent(DISPLAY_BOARD_EVENT);
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff fc89 	bl	8001c94 <addSchedulerEvent>
      addSchedulerEvent(TWO_PLAYER_EVENT);
 8002382:	2008      	movs	r0, #8
 8002384:	f7ff fc86 	bl	8001c94 <addSchedulerEvent>

      LCD_Clear(0, LCD_COLOR_WHITE);
 8002388:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff fac9 	bl	8001924 <LCD_Clear>

      printf("%d\n", state);
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	4619      	mov	r1, r3
 8002396:	4817      	ldr	r0, [pc, #92]	@ (80023f4 <main+0x168>)
 8002398:	f005 f9ea 	bl	8007770 <iprintf>

      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 800239c:	f7ff fca0 	bl	8001ce0 <getScheduledEvents>
 80023a0:	60f8      	str	r0, [r7, #12]
        if(scheduledEvents && DISPLAY_BOARD_EVENT){
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <main+0x126>
            Display_Board();
 80023a8:	f7fe f9ce 	bl	8000748 <Display_Board>
            removeSchedulerEvent(DISPLAY_BOARD_EVENT);
 80023ac:	2002      	movs	r0, #2
 80023ae:	f7ff fc83 	bl	8001cb8 <removeSchedulerEvent>
        }

        if(scheduledEvents && TWO_PLAYER_EVENT){
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <main+0x136>
            Two_Player();
 80023b8:	f7fe fb8c 	bl	8000ad4 <Two_Player>
            removeSchedulerEvent(TWO_PLAYER_EVENT);
 80023bc:	2008      	movs	r0, #8
 80023be:	f7ff fc7b 	bl	8001cb8 <removeSchedulerEvent>
        }
        state = RESULTS;
 80023c2:	2303      	movs	r3, #3
 80023c4:	75fb      	strb	r3, [r7, #23]
        break;
 80023c6:	e014      	b.n	80023f2 <main+0x166>
      }
    }

    else if(state == RESULTS){
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	f47f af7b 	bne.w	80022c6 <main+0x3a>
      printf("%d\n", state);
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <main+0x168>)
 80023d6:	f005 f9cb 	bl	8007770 <iprintf>
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 80023da:	f7ff fc81 	bl	8001ce0 <getScheduledEvents>
 80023de:	6138      	str	r0, [r7, #16]
        if(scheduledEvents && DISPLAY_RESULTS_EVENT){
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f9      	beq.n	80023da <main+0x14e>
          Display_Results();
 80023e6:	f7fe fedb 	bl	80011a0 <Display_Results>
          removeSchedulerEvent(DISPLAY_RESULTS_EVENT);
 80023ea:	2020      	movs	r0, #32
 80023ec:	f7ff fc64 	bl	8001cb8 <removeSchedulerEvent>
      while (1){
 80023f0:	e7f3      	b.n	80023da <main+0x14e>
    if(state == MENU){
 80023f2:	e768      	b.n	80022c6 <main+0x3a>
 80023f4:	08008a90 	.word	0x08008a90
 80023f8:	20025a9c 	.word	0x20025a9c
 80023fc:	20025af8 	.word	0x20025af8

08002400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	@ 0x50
 8002404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002406:	f107 0320 	add.w	r3, r7, #32
 800240a:	2230      	movs	r2, #48	@ 0x30
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f005 fb16 	bl	8007a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	4b28      	ldr	r3, [pc, #160]	@ (80024cc <SystemClock_Config+0xcc>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <SystemClock_Config+0xcc>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002432:	6413      	str	r3, [r2, #64]	@ 0x40
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <SystemClock_Config+0xcc>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <SystemClock_Config+0xd0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <SystemClock_Config+0xd0>)
 800244a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <SystemClock_Config+0xd0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800245c:	2301      	movs	r3, #1
 800245e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002460:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002466:	2302      	movs	r3, #2
 8002468:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800246a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002470:	2308      	movs	r3, #8
 8002472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002474:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002478:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800247a:	2302      	movs	r3, #2
 800247c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800247e:	2307      	movs	r3, #7
 8002480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002482:	f107 0320 	add.w	r3, r7, #32
 8002486:	4618      	mov	r0, r3
 8002488:	f003 f99e 	bl	80057c8 <HAL_RCC_OscConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002492:	f000 fb55 	bl	8002b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002496:	230f      	movs	r3, #15
 8002498:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249a:	2302      	movs	r3, #2
 800249c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	2105      	movs	r1, #5
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fbff 	bl	8005cb8 <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024c0:	f000 fb3e 	bl	8002b40 <Error_Handler>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3750      	adds	r7, #80	@ 0x50
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000

080024d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <MX_I2C3_Init+0x74>)
 80024da:	4a1c      	ldr	r2, [pc, #112]	@ (800254c <MX_I2C3_Init+0x78>)
 80024dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024de:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <MX_I2C3_Init+0x74>)
 80024e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <MX_I2C3_Init+0x7c>)
 80024e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e4:	4b18      	ldr	r3, [pc, #96]	@ (8002548 <MX_I2C3_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024ea:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <MX_I2C3_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f0:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <MX_I2C3_Init+0x74>)
 80024f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <MX_I2C3_Init+0x74>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024fe:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <MX_I2C3_Init+0x74>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <MX_I2C3_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800250a:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <MX_I2C3_Init+0x74>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002510:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MX_I2C3_Init+0x74>)
 8002512:	f001 fe13 	bl	800413c <HAL_I2C_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800251c:	f000 fb10 	bl	8002b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002520:	2100      	movs	r1, #0
 8002522:	4809      	ldr	r0, [pc, #36]	@ (8002548 <MX_I2C3_Init+0x74>)
 8002524:	f002 fe2e 	bl	8005184 <HAL_I2CEx_ConfigAnalogFilter>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800252e:	f000 fb07 	bl	8002b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002532:	2100      	movs	r1, #0
 8002534:	4804      	ldr	r0, [pc, #16]	@ (8002548 <MX_I2C3_Init+0x74>)
 8002536:	f002 fe61 	bl	80051fc <HAL_I2CEx_ConfigDigitalFilter>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002540:	f000 fafe 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20025aa4 	.word	0x20025aa4
 800254c:	40005c00 	.word	0x40005c00
 8002550:	000186a0 	.word	0x000186a0

08002554 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b09a      	sub	sp, #104	@ 0x68
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800255a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800255e:	2234      	movs	r2, #52	@ 0x34
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f005 fa6c 	bl	8007a40 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002568:	463b      	mov	r3, r7
 800256a:	2234      	movs	r2, #52	@ 0x34
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f005 fa66 	bl	8007a40 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002574:	4b4e      	ldr	r3, [pc, #312]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 8002576:	4a4f      	ldr	r2, [pc, #316]	@ (80026b4 <MX_LTDC_Init+0x160>)
 8002578:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800257a:	4b4d      	ldr	r3, [pc, #308]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002580:	4b4b      	ldr	r3, [pc, #300]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002586:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800258c:	4b48      	ldr	r3, [pc, #288]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 8002594:	2207      	movs	r2, #7
 8002596:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002598:	4b45      	ldr	r3, [pc, #276]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 800259a:	2203      	movs	r2, #3
 800259c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800259e:	4b44      	ldr	r3, [pc, #272]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025a0:	220e      	movs	r2, #14
 80025a2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80025a4:	4b42      	ldr	r3, [pc, #264]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025a6:	2205      	movs	r2, #5
 80025a8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025ac:	f240 228e 	movw	r2, #654	@ 0x28e
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80025b2:	4b3f      	ldr	r3, [pc, #252]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025b4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80025b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025bc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80025c2:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025c4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80025c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80025ca:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80025d2:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80025e2:	4833      	ldr	r0, [pc, #204]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 80025e4:	f002 fe4a 	bl	800527c <HAL_LTDC_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80025ee:	f000 faa7 	bl	8002b40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002602:	2300      	movs	r3, #0
 8002604:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800260e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002612:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002614:	2305      	movs	r3, #5
 8002616:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002636:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800263a:	2200      	movs	r2, #0
 800263c:	4619      	mov	r1, r3
 800263e:	481c      	ldr	r0, [pc, #112]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 8002640:	f002 feec 	bl	800541c <HAL_LTDC_ConfigLayer>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800264a:	f000 fa79 	bl	8002b40 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800266a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800266e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002670:	2305      	movs	r3, #5
 8002672:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002692:	463b      	mov	r3, r7
 8002694:	2201      	movs	r2, #1
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_LTDC_Init+0x15c>)
 800269a:	f002 febf 	bl	800541c <HAL_LTDC_ConfigLayer>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80026a4:	f000 fa4c 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	3768      	adds	r7, #104	@ 0x68
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20025b08 	.word	0x20025b08
 80026b4:	40016800 	.word	0x40016800

080026b8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <MX_RNG_Init+0x20>)
 80026be:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <MX_RNG_Init+0x24>)
 80026c0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_RNG_Init+0x20>)
 80026c4:	f003 fec4 	bl	8006450 <HAL_RNG_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80026ce:	f000 fa37 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20025af8 	.word	0x20025af8
 80026dc:	50060800 	.word	0x50060800

080026e0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80026e4:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <MX_SPI5_Init+0x64>)
 80026e6:	4a18      	ldr	r2, [pc, #96]	@ (8002748 <MX_SPI5_Init+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <MX_SPI5_Init+0x64>)
 80026ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026f0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <MX_SPI5_Init+0x64>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <MX_SPI5_Init+0x64>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026fe:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <MX_SPI5_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <MX_SPI5_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <MX_SPI5_Init+0x64>)
 800270c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002710:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <MX_SPI5_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <MX_SPI5_Init+0x64>)
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <MX_SPI5_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002724:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <MX_SPI5_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <MX_SPI5_Init+0x64>)
 800272c:	220a      	movs	r2, #10
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <MX_SPI5_Init+0x64>)
 8002732:	f003 ff0d 	bl	8006550 <HAL_SPI_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800273c:	f000 fa00 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20025bb0 	.word	0x20025bb0
 8002748:	40015000 	.word	0x40015000

0800274c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002760:	463b      	mov	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <MX_TIM2_Init+0x94>)
 800276a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800276e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002770:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <MX_TIM2_Init+0x94>)
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <MX_TIM2_Init+0x94>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800277c:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <MX_TIM2_Init+0x94>)
 800277e:	f04f 32ff 	mov.w	r2, #4294967295
 8002782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002784:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <MX_TIM2_Init+0x94>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <MX_TIM2_Init+0x94>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002790:	4813      	ldr	r0, [pc, #76]	@ (80027e0 <MX_TIM2_Init+0x94>)
 8002792:	f004 f9bd 	bl	8006b10 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800279c:	f000 f9d0 	bl	8002b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	@ (80027e0 <MX_TIM2_Init+0x94>)
 80027ae:	f004 f9fe 	bl	8006bae <HAL_TIM_ConfigClockSource>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027b8:	f000 f9c2 	bl	8002b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027c4:	463b      	mov	r3, r7
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <MX_TIM2_Init+0x94>)
 80027ca:	f004 fbfd 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027d4:	f000 f9b4 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20025c08 	.word	0x20025c08

080027e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	@ 0x38
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	4bb2      	ldr	r3, [pc, #712]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4ab1      	ldr	r2, [pc, #708]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4baf      	ldr	r3, [pc, #700]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	4bab      	ldr	r3, [pc, #684]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	4aaa      	ldr	r2, [pc, #680]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002820:	f043 0320 	orr.w	r3, r3, #32
 8002824:	6313      	str	r3, [r2, #48]	@ 0x30
 8002826:	4ba8      	ldr	r3, [pc, #672]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	4ba4      	ldr	r3, [pc, #656]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4aa3      	ldr	r2, [pc, #652]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 800283c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4ba1      	ldr	r3, [pc, #644]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b9d      	ldr	r3, [pc, #628]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a9c      	ldr	r2, [pc, #624]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b9a      	ldr	r3, [pc, #616]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b96      	ldr	r3, [pc, #600]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	4a95      	ldr	r2, [pc, #596]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	@ 0x30
 800287a:	4b93      	ldr	r3, [pc, #588]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4a8e      	ldr	r2, [pc, #568]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002894:	6313      	str	r3, [r2, #48]	@ 0x30
 8002896:	4b8c      	ldr	r3, [pc, #560]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b88      	ldr	r3, [pc, #544]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a87      	ldr	r2, [pc, #540]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b85      	ldr	r3, [pc, #532]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	4b81      	ldr	r3, [pc, #516]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a80      	ldr	r2, [pc, #512]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac8 <MX_GPIO_Init+0x2e4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2116      	movs	r1, #22
 80028de:	487b      	ldr	r0, [pc, #492]	@ (8002acc <MX_GPIO_Init+0x2e8>)
 80028e0:	f001 fc12 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2180      	movs	r1, #128	@ 0x80
 80028e8:	4879      	ldr	r0, [pc, #484]	@ (8002ad0 <MX_GPIO_Init+0x2ec>)
 80028ea:	f001 fc0d 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80028ee:	2200      	movs	r2, #0
 80028f0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80028f4:	4877      	ldr	r0, [pc, #476]	@ (8002ad4 <MX_GPIO_Init+0x2f0>)
 80028f6:	f001 fc07 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002900:	4875      	ldr	r0, [pc, #468]	@ (8002ad8 <MX_GPIO_Init+0x2f4>)
 8002902:	f001 fc01 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002906:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002918:	230c      	movs	r3, #12
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800291c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002920:	4619      	mov	r1, r3
 8002922:	486e      	ldr	r0, [pc, #440]	@ (8002adc <MX_GPIO_Init+0x2f8>)
 8002924:	f001 f938 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002938:	230c      	movs	r3, #12
 800293a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002940:	4619      	mov	r1, r3
 8002942:	4862      	ldr	r0, [pc, #392]	@ (8002acc <MX_GPIO_Init+0x2e8>)
 8002944:	f001 f928 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002948:	2316      	movs	r3, #22
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	485b      	ldr	r0, [pc, #364]	@ (8002acc <MX_GPIO_Init+0x2e8>)
 8002960:	f001 f91a 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002964:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800296a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	4855      	ldr	r0, [pc, #340]	@ (8002ad0 <MX_GPIO_Init+0x2ec>)
 800297c:	f001 f90c 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	484e      	ldr	r0, [pc, #312]	@ (8002ad0 <MX_GPIO_Init+0x2ec>)
 8002998:	f001 f8fe 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800299c:	2320      	movs	r3, #32
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ae:	4619      	mov	r1, r3
 80029b0:	4846      	ldr	r0, [pc, #280]	@ (8002acc <MX_GPIO_Init+0x2e8>)
 80029b2:	f001 f8f1 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80029b6:	2304      	movs	r3, #4
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c6:	4619      	mov	r1, r3
 80029c8:	4845      	ldr	r0, [pc, #276]	@ (8002ae0 <MX_GPIO_Init+0x2fc>)
 80029ca:	f001 f8e5 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80029ce:	f248 1333 	movw	r3, #33075	@ 0x8133
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e0:	230c      	movs	r3, #12
 80029e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e8:	4619      	mov	r1, r3
 80029ea:	483b      	ldr	r0, [pc, #236]	@ (8002ad8 <MX_GPIO_Init+0x2f4>)
 80029ec:	f001 f8d4 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80029f0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a02:	230c      	movs	r3, #12
 8002a04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4835      	ldr	r0, [pc, #212]	@ (8002ae4 <MX_GPIO_Init+0x300>)
 8002a0e:	f001 f8c3 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002a12:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002a24:	230c      	movs	r3, #12
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	482c      	ldr	r0, [pc, #176]	@ (8002ae0 <MX_GPIO_Init+0x2fc>)
 8002a30:	f001 f8b2 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a46:	4619      	mov	r1, r3
 8002a48:	4825      	ldr	r0, [pc, #148]	@ (8002ae0 <MX_GPIO_Init+0x2fc>)
 8002a4a:	f001 f8a5 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002a4e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a60:	230c      	movs	r3, #12
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a68:	4619      	mov	r1, r3
 8002a6a:	481a      	ldr	r0, [pc, #104]	@ (8002ad4 <MX_GPIO_Init+0x2f0>)
 8002a6c:	f001 f894 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a82:	4619      	mov	r1, r3
 8002a84:	4813      	ldr	r0, [pc, #76]	@ (8002ad4 <MX_GPIO_Init+0x2f0>)
 8002a86:	f001 f887 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002a8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480c      	ldr	r0, [pc, #48]	@ (8002ad4 <MX_GPIO_Init+0x2f0>)
 8002aa4:	f001 f878 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002aa8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aba:	2307      	movs	r3, #7
 8002abc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	e010      	b.n	8002ae8 <MX_GPIO_Init+0x304>
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021800 	.word	0x40021800
 8002adc:	40021400 	.word	0x40021400
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	4812      	ldr	r0, [pc, #72]	@ (8002b34 <MX_GPIO_Init+0x350>)
 8002aea:	f001 f855 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002aee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af4:	2301      	movs	r3, #1
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b04:	4619      	mov	r1, r3
 8002b06:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <MX_GPIO_Init+0x354>)
 8002b08:	f001 f846 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002b0c:	2360      	movs	r3, #96	@ 0x60
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b24:	4619      	mov	r1, r3
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <MX_GPIO_Init+0x358>)
 8002b28:	f001 f836 	bl	8003b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b2c:	bf00      	nop
 8002b2e:	3738      	adds	r7, #56	@ 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40020400 	.word	0x40020400

08002b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b44:	b672      	cpsid	i
}
 8002b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <Error_Handler+0x8>

08002b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <HAL_MspInit+0x4c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <HAL_MspInit+0x4c>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_MspInit+0x4c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_MspInit+0x4c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	4a08      	ldr	r2, [pc, #32]	@ (8002b98 <HAL_MspInit+0x4c>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b8a:	2007      	movs	r0, #7
 8002b8c:	f000 ffb4 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	@ 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a29      	ldr	r2, [pc, #164]	@ (8002c60 <HAL_I2C_MspInit+0xc4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d14b      	bne.n	8002c56 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b28      	ldr	r3, [pc, #160]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a27      	ldr	r2, [pc, #156]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a20      	ldr	r2, [pc, #128]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bea:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4815      	ldr	r0, [pc, #84]	@ (8002c68 <HAL_I2C_MspInit+0xcc>)
 8002c14:	f000 ffc0 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c1e:	2312      	movs	r3, #18
 8002c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	480d      	ldr	r0, [pc, #52]	@ (8002c6c <HAL_I2C_MspInit+0xd0>)
 8002c36:	f000 ffaf 	bl	8003b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002c44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_I2C_MspInit+0xc8>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002c56:	bf00      	nop
 8002c58:	3728      	adds	r7, #40	@ 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40005c00 	.word	0x40005c00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020000 	.word	0x40020000

08002c70 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b09a      	sub	sp, #104	@ 0x68
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8c:	2230      	movs	r2, #48	@ 0x30
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 fed5 	bl	8007a40 <memset>
  if(hltdc->Instance==LTDC)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	@ (8002ea0 <HAL_LTDC_MspInit+0x230>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f040 80fb 	bne.w	8002e98 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002ca6:	23c8      	movs	r3, #200	@ 0xc8
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002caa:	2302      	movs	r3, #2
 8002cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002cae:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fa09 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002cc4:	f7ff ff3c 	bl	8002b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	4b75      	ldr	r3, [pc, #468]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd0:	4a74      	ldr	r2, [pc, #464]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002cd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd8:	4b72      	ldr	r3, [pc, #456]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	4a6d      	ldr	r2, [pc, #436]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002cee:	f043 0320 	orr.w	r3, r3, #32
 8002cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	4b67      	ldr	r3, [pc, #412]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	4a66      	ldr	r2, [pc, #408]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d10:	4b64      	ldr	r3, [pc, #400]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	4b60      	ldr	r3, [pc, #384]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	4a58      	ldr	r2, [pc, #352]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d48:	4b56      	ldr	r3, [pc, #344]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d80:	4b48      	ldr	r3, [pc, #288]	@ (8002ea4 <HAL_LTDC_MspInit+0x234>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d9e:	230e      	movs	r3, #14
 8002da0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002da6:	4619      	mov	r1, r3
 8002da8:	483f      	ldr	r0, [pc, #252]	@ (8002ea8 <HAL_LTDC_MspInit+0x238>)
 8002daa:	f000 fef5 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002dae:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002db2:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dc0:	230e      	movs	r3, #14
 8002dc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4838      	ldr	r0, [pc, #224]	@ (8002eac <HAL_LTDC_MspInit+0x23c>)
 8002dcc:	f000 fee4 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002de0:	2309      	movs	r3, #9
 8002de2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002de8:	4619      	mov	r1, r3
 8002dea:	4831      	ldr	r0, [pc, #196]	@ (8002eb0 <HAL_LTDC_MspInit+0x240>)
 8002dec:	f000 fed4 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002df0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002df4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e02:	230e      	movs	r3, #14
 8002e04:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4828      	ldr	r0, [pc, #160]	@ (8002eb0 <HAL_LTDC_MspInit+0x240>)
 8002e0e:	f000 fec3 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002e12:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002e16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e24:	230e      	movs	r3, #14
 8002e26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4821      	ldr	r0, [pc, #132]	@ (8002eb4 <HAL_LTDC_MspInit+0x244>)
 8002e30:	f000 feb2 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002e34:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002e38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e46:	230e      	movs	r3, #14
 8002e48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4819      	ldr	r0, [pc, #100]	@ (8002eb8 <HAL_LTDC_MspInit+0x248>)
 8002e52:	f000 fea1 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002e56:	2348      	movs	r3, #72	@ 0x48
 8002e58:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e66:	230e      	movs	r3, #14
 8002e68:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4812      	ldr	r0, [pc, #72]	@ (8002ebc <HAL_LTDC_MspInit+0x24c>)
 8002e72:	f000 fe91 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002e76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e7a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e90:	4619      	mov	r1, r3
 8002e92:	4808      	ldr	r0, [pc, #32]	@ (8002eb4 <HAL_LTDC_MspInit+0x244>)
 8002e94:	f000 fe80 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002e98:	bf00      	nop
 8002e9a:	3768      	adds	r7, #104	@ 0x68
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40016800 	.word	0x40016800
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	40021800 	.word	0x40021800
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020c00 	.word	0x40020c00

08002ec0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8002efc <HAL_RNG_MspInit+0x3c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_RNG_MspInit+0x40>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	4a09      	ldr	r2, [pc, #36]	@ (8002f00 <HAL_RNG_MspInit+0x40>)
 8002edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee0:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <HAL_RNG_MspInit+0x40>)
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	50060800 	.word	0x50060800
 8002f00:	40023800 	.word	0x40023800

08002f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	@ 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_SPI_MspInit+0x84>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d12c      	bne.n	8002f80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a10      	ldr	r2, [pc, #64]	@ (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f4c:	f043 0320 	orr.w	r3, r3, #32
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002f5e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002f70:	2305      	movs	r3, #5
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f7c:	f000 fe0c 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002f80:	bf00      	nop
 8002f82:	3728      	adds	r7, #40	@ 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40015000 	.word	0x40015000
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40021400 	.word	0x40021400

08002f94 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a08      	ldr	r2, [pc, #32]	@ (8002fc4 <HAL_SPI_MspDeInit+0x30>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10a      	bne.n	8002fbc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002fa6:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <HAL_SPI_MspDeInit+0x34>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	4a07      	ldr	r2, [pc, #28]	@ (8002fc8 <HAL_SPI_MspDeInit+0x34>)
 8002fac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002fb0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002fb2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002fb6:	4805      	ldr	r0, [pc, #20]	@ (8002fcc <HAL_SPI_MspDeInit+0x38>)
 8002fb8:	f000 ff9a 	bl	8003ef0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40015000 	.word	0x40015000
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40021400 	.word	0x40021400

08002fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d10d      	bne.n	8002ffe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_TIM_Base_MspInit+0x3c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	@ (800300c <HAL_TIM_Base_MspInit+0x3c>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_TIM_Base_MspInit+0x3c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <NMI_Handler+0x4>

08003018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <HardFault_Handler+0x4>

08003020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <MemManage_Handler+0x4>

08003028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <BusFault_Handler+0x4>

08003030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <UsageFault_Handler+0x4>

08003038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003066:	f000 fc0f 	bl	8003888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}

0800306e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003074:	f000 f9ce 	bl	8003414 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003078:	f000 f98e 	bl	8003398 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800307c:	2202      	movs	r2, #2
 800307e:	2103      	movs	r1, #3
 8003080:	2082      	movs	r0, #130	@ 0x82
 8003082:	f000 fa1b 	bl	80034bc <I2C3_Write>
    HAL_Delay(5);
 8003086:	2005      	movs	r0, #5
 8003088:	f000 fc1e 	bl	80038c8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800308c:	2200      	movs	r2, #0
 800308e:	2103      	movs	r1, #3
 8003090:	2082      	movs	r0, #130	@ 0x82
 8003092:	f000 fa13 	bl	80034bc <I2C3_Write>
    HAL_Delay(2);
 8003096:	2002      	movs	r0, #2
 8003098:	f000 fc16 	bl	80038c8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800309c:	1cba      	adds	r2, r7, #2
 800309e:	2302      	movs	r3, #2
 80030a0:	2100      	movs	r1, #0
 80030a2:	2082      	movs	r0, #130	@ 0x82
 80030a4:	f000 fa5a 	bl	800355c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	f640 0211 	movw	r2, #2065	@ 0x811
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d001      	beq.n	80030c8 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e075      	b.n	80031b4 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80030c8:	2202      	movs	r2, #2
 80030ca:	2103      	movs	r1, #3
 80030cc:	2082      	movs	r0, #130	@ 0x82
 80030ce:	f000 f9f5 	bl	80034bc <I2C3_Write>
    HAL_Delay(5);
 80030d2:	2005      	movs	r0, #5
 80030d4:	f000 fbf8 	bl	80038c8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80030d8:	2200      	movs	r2, #0
 80030da:	2103      	movs	r1, #3
 80030dc:	2082      	movs	r0, #130	@ 0x82
 80030de:	f000 f9ed 	bl	80034bc <I2C3_Write>
    HAL_Delay(2);
 80030e2:	2002      	movs	r0, #2
 80030e4:	f000 fbf0 	bl	80038c8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80030e8:	2004      	movs	r0, #4
 80030ea:	f000 f867 	bl	80031bc <STMPE811_Read>
 80030ee:	4603      	mov	r3, r0
 80030f0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80030f2:	797b      	ldrb	r3, [r7, #5]
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80030fa:	797b      	ldrb	r3, [r7, #5]
 80030fc:	461a      	mov	r2, r3
 80030fe:	2104      	movs	r1, #4
 8003100:	2082      	movs	r0, #130	@ 0x82
 8003102:	f000 f9db 	bl	80034bc <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003106:	2004      	movs	r0, #4
 8003108:	f000 f858 	bl	80031bc <STMPE811_Read>
 800310c:	4603      	mov	r3, r0
 800310e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003110:	797b      	ldrb	r3, [r7, #5]
 8003112:	f023 0302 	bic.w	r3, r3, #2
 8003116:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003118:	797b      	ldrb	r3, [r7, #5]
 800311a:	461a      	mov	r2, r3
 800311c:	2104      	movs	r1, #4
 800311e:	2082      	movs	r0, #130	@ 0x82
 8003120:	f000 f9cc 	bl	80034bc <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003124:	2249      	movs	r2, #73	@ 0x49
 8003126:	2120      	movs	r1, #32
 8003128:	2082      	movs	r0, #130	@ 0x82
 800312a:	f000 f9c7 	bl	80034bc <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800312e:	2002      	movs	r0, #2
 8003130:	f000 fbca 	bl	80038c8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003134:	2201      	movs	r2, #1
 8003136:	2121      	movs	r1, #33	@ 0x21
 8003138:	2082      	movs	r0, #130	@ 0x82
 800313a:	f000 f9bf 	bl	80034bc <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800313e:	2017      	movs	r0, #23
 8003140:	f000 f83c 	bl	80031bc <STMPE811_Read>
 8003144:	4603      	mov	r3, r0
 8003146:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003148:	797b      	ldrb	r3, [r7, #5]
 800314a:	f043 031e 	orr.w	r3, r3, #30
 800314e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003150:	797b      	ldrb	r3, [r7, #5]
 8003152:	461a      	mov	r2, r3
 8003154:	2117      	movs	r1, #23
 8003156:	2082      	movs	r0, #130	@ 0x82
 8003158:	f000 f9b0 	bl	80034bc <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800315c:	229a      	movs	r2, #154	@ 0x9a
 800315e:	2141      	movs	r1, #65	@ 0x41
 8003160:	2082      	movs	r0, #130	@ 0x82
 8003162:	f000 f9ab 	bl	80034bc <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003166:	2201      	movs	r2, #1
 8003168:	214a      	movs	r1, #74	@ 0x4a
 800316a:	2082      	movs	r0, #130	@ 0x82
 800316c:	f000 f9a6 	bl	80034bc <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003170:	2201      	movs	r2, #1
 8003172:	214b      	movs	r1, #75	@ 0x4b
 8003174:	2082      	movs	r0, #130	@ 0x82
 8003176:	f000 f9a1 	bl	80034bc <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800317a:	2200      	movs	r2, #0
 800317c:	214b      	movs	r1, #75	@ 0x4b
 800317e:	2082      	movs	r0, #130	@ 0x82
 8003180:	f000 f99c 	bl	80034bc <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003184:	2201      	movs	r2, #1
 8003186:	2156      	movs	r1, #86	@ 0x56
 8003188:	2082      	movs	r0, #130	@ 0x82
 800318a:	f000 f997 	bl	80034bc <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800318e:	2201      	movs	r2, #1
 8003190:	2158      	movs	r1, #88	@ 0x58
 8003192:	2082      	movs	r0, #130	@ 0x82
 8003194:	f000 f992 	bl	80034bc <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003198:	2203      	movs	r2, #3
 800319a:	2140      	movs	r1, #64	@ 0x40
 800319c:	2082      	movs	r0, #130	@ 0x82
 800319e:	f000 f98d 	bl	80034bc <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80031a2:	22ff      	movs	r2, #255	@ 0xff
 80031a4:	210b      	movs	r1, #11
 80031a6:	2082      	movs	r0, #130	@ 0x82
 80031a8:	f000 f988 	bl	80034bc <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80031ac:	20c8      	movs	r0, #200	@ 0xc8
 80031ae:	f000 fb8b 	bl	80038c8 <HAL_Delay>

    return STMPE811_State_Ok;
 80031b2:	2302      	movs	r3, #2

}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80031c6:	f107 020f 	add.w	r2, r7, #15
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	4619      	mov	r1, r3
 80031ce:	2082      	movs	r0, #130	@ 0x82
 80031d0:	f000 f99e 	bl	8003510 <I2C3_Read>

    return readData;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	791a      	ldrb	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80031ee:	2040      	movs	r0, #64	@ 0x40
 80031f0:	f7ff ffe4 	bl	80031bc <STMPE811_Read>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80031f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0e      	blt.n	800321e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003206:	2201      	movs	r2, #1
 8003208:	214b      	movs	r1, #75	@ 0x4b
 800320a:	2082      	movs	r0, #130	@ 0x82
 800320c:	f000 f956 	bl	80034bc <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003210:	2200      	movs	r2, #0
 8003212:	214b      	movs	r1, #75	@ 0x4b
 8003214:	2082      	movs	r0, #130	@ 0x82
 8003216:	f000 f951 	bl	80034bc <I2C3_Write>

        return STMPE811_State_Released;
 800321a:	2301      	movs	r3, #1
 800321c:	e0a7      	b.n	800336e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	799b      	ldrb	r3, [r3, #6]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d117      	bne.n	8003256 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f9b8 	bl	80035a0 <TM_STMPE811_ReadX>
 8003230:	4603      	mov	r3, r0
 8003232:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	885b      	ldrh	r3, [r3, #2]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fa0b 	bl	800365c <TM_STMPE811_ReadY>
 8003246:	4603      	mov	r3, r0
 8003248:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800324c:	3301      	adds	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	805a      	strh	r2, [r3, #2]
 8003254:	e048      	b.n	80032e8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	799b      	ldrb	r3, [r3, #6]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d112      	bne.n	8003284 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f99c 	bl	80035a0 <TM_STMPE811_ReadX>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	885b      	ldrh	r3, [r3, #2]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f9f1 	bl	800365c <TM_STMPE811_ReadY>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	805a      	strh	r2, [r3, #2]
 8003282:	e031      	b.n	80032e8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	799b      	ldrb	r3, [r3, #6]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d115      	bne.n	80032b8 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	885b      	ldrh	r3, [r3, #2]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f985 	bl	80035a0 <TM_STMPE811_ReadX>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f9da 	bl	800365c <TM_STMPE811_ReadY>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80032ae:	3301      	adds	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e017      	b.n	80032e8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	799b      	ldrb	r3, [r3, #6]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d113      	bne.n	80032e8 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f96b 	bl	80035a0 <TM_STMPE811_ReadX>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f9be 	bl	800365c <TM_STMPE811_ReadY>
 80032e0:	4603      	mov	r3, r0
 80032e2:	461a      	mov	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80032e8:	2201      	movs	r2, #1
 80032ea:	214b      	movs	r1, #75	@ 0x4b
 80032ec:	2082      	movs	r0, #130	@ 0x82
 80032ee:	f000 f8e5 	bl	80034bc <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80032f2:	2200      	movs	r2, #0
 80032f4:	214b      	movs	r1, #75	@ 0x4b
 80032f6:	2082      	movs	r0, #130	@ 0x82
 80032f8:	f000 f8e0 	bl	80034bc <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	799b      	ldrb	r3, [r3, #6]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <STMPE811_ReadTouch+0x12e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	799b      	ldrb	r3, [r3, #6]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d115      	bne.n	8003338 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d027      	beq.n	8003364 <STMPE811_ReadTouch+0x186>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2bee      	cmp	r3, #238	@ 0xee
 800331a:	d823      	bhi.n	8003364 <STMPE811_ReadTouch+0x186>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	885b      	ldrh	r3, [r3, #2]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01f      	beq.n	8003364 <STMPE811_ReadTouch+0x186>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	885b      	ldrh	r3, [r3, #2]
 8003328:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800332c:	d81a      	bhi.n	8003364 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003334:	2300      	movs	r3, #0
 8003336:	e01a      	b.n	800336e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <STMPE811_ReadTouch+0x188>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003348:	d80d      	bhi.n	8003366 <STMPE811_ReadTouch+0x188>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	885b      	ldrh	r3, [r3, #2]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <STMPE811_ReadTouch+0x188>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	885b      	ldrh	r3, [r3, #2]
 8003356:	2bee      	cmp	r3, #238	@ 0xee
 8003358:	d805      	bhi.n	8003366 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003360:	2300      	movs	r3, #0
 8003362:	e004      	b.n	800336e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003364:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 800336c:	2301      	movs	r3, #1
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20025ca4 	.word	0x20025ca4

08003398 <I2C3_Init>:

static void I2C3_Init()
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <I2C3_Init+0x6c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	4a17      	ldr	r2, [pc, #92]	@ (8003404 <I2C3_Init+0x6c>)
 80033a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ae:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <I2C3_Init+0x6c>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <I2C3_Init+0x70>)
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <I2C3_Init+0x74>)
 80033be:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <I2C3_Init+0x70>)
 80033c2:	4a13      	ldr	r2, [pc, #76]	@ (8003410 <I2C3_Init+0x78>)
 80033c4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033c6:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <I2C3_Init+0x70>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80033cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <I2C3_Init+0x70>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <I2C3_Init+0x70>)
 80033d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033d8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80033da:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <I2C3_Init+0x70>)
 80033dc:	2200      	movs	r2, #0
 80033de:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <I2C3_Init+0x70>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80033e6:	4808      	ldr	r0, [pc, #32]	@ (8003408 <I2C3_Init+0x70>)
 80033e8:	f000 fea8 	bl	800413c <HAL_I2C_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <I2C3_Init+0x5e>
    }
    return;
 80033fa:	bf00      	nop
}
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	20025c50 	.word	0x20025c50
 800340c:	40005c00 	.word	0x40005c00
 8003410:	000186a0 	.word	0x000186a0

08003414 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <I2C3_MspInit+0x9c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <I2C3_MspInit+0x9c>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <I2C3_MspInit+0x9c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <I2C3_MspInit+0x9c>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <I2C3_MspInit+0x9c>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30
 8003456:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <I2C3_MspInit+0x9c>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003468:	2312      	movs	r3, #18
 800346a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003474:	2304      	movs	r3, #4
 8003476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	4619      	mov	r1, r3
 800347e:	480d      	ldr	r0, [pc, #52]	@ (80034b4 <I2C3_MspInit+0xa0>)
 8003480:	f000 fb8a 	bl	8003b98 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003488:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800348a:	2312      	movs	r3, #18
 800348c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003496:	2304      	movs	r3, #4
 8003498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	4619      	mov	r1, r3
 80034a0:	4805      	ldr	r0, [pc, #20]	@ (80034b8 <I2C3_MspInit+0xa4>)
 80034a2:	f000 fb79 	bl	8003b98 <HAL_GPIO_Init>
    
}
 80034a6:	bf00      	nop
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020000 	.word	0x40020000

080034bc <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
 80034c6:	460b      	mov	r3, r1
 80034c8:	717b      	strb	r3, [r7, #5]
 80034ca:	4613      	mov	r3, r2
 80034cc:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80034ce:	793b      	ldrb	r3, [r7, #4]
 80034d0:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80034d2:	797b      	ldrb	r3, [r7, #5]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	88f9      	ldrh	r1, [r7, #6]
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <I2C3_Write+0x48>)
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2301      	movs	r3, #1
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	f107 030f 	add.w	r3, r7, #15
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2301      	movs	r3, #1
 80034e8:	4807      	ldr	r0, [pc, #28]	@ (8003508 <I2C3_Write+0x4c>)
 80034ea:	f000 ff6b 	bl	80043c4 <HAL_I2C_Mem_Write>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <I2C3_Write+0x50>)
 80034f4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80034f6:	f7ff ff3f 	bl	8003378 <verifyHAL_I2C_IS_OKAY>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	0003d090 	.word	0x0003d090
 8003508:	20025c50 	.word	0x20025c50
 800350c:	20025ca4 	.word	0x20025ca4

08003510 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af04      	add	r7, sp, #16
 8003516:	4603      	mov	r3, r0
 8003518:	603a      	str	r2, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
 800351c:	460b      	mov	r3, r1
 800351e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	b299      	uxth	r1, r3
 8003524:	79bb      	ldrb	r3, [r7, #6]
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <I2C3_Read+0x40>)
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	2301      	movs	r3, #1
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2301      	movs	r3, #1
 8003536:	4807      	ldr	r0, [pc, #28]	@ (8003554 <I2C3_Read+0x44>)
 8003538:	f001 f83e 	bl	80045b8 <HAL_I2C_Mem_Read>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <I2C3_Read+0x48>)
 8003542:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003544:	f7ff ff18 	bl	8003378 <verifyHAL_I2C_IS_OKAY>
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	0003d090 	.word	0x0003d090
 8003554:	20025c50 	.word	0x20025c50
 8003558:	20025ca4 	.word	0x20025ca4

0800355c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af04      	add	r7, sp, #16
 8003562:	603a      	str	r2, [r7, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	460b      	mov	r3, r1
 800356c:	71bb      	strb	r3, [r7, #6]
 800356e:	4613      	mov	r3, r2
 8003570:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	b299      	uxth	r1, r3
 8003576:	79bb      	ldrb	r3, [r7, #6]
 8003578:	b29a      	uxth	r2, r3
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <I2C3_MulitByteRead+0x3c>)
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	88bb      	ldrh	r3, [r7, #4]
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2301      	movs	r3, #1
 8003588:	4804      	ldr	r0, [pc, #16]	@ (800359c <I2C3_MulitByteRead+0x40>)
 800358a:	f001 f815 	bl	80045b8 <HAL_I2C_Mem_Read>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	0003d090 	.word	0x0003d090
 800359c:	20025c50 	.word	0x20025c50

080035a0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80035aa:	204d      	movs	r0, #77	@ 0x4d
 80035ac:	f7ff fe06 	bl	80031bc <STMPE811_Read>
 80035b0:	4603      	mov	r3, r0
 80035b2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80035b4:	204e      	movs	r0, #78	@ 0x4e
 80035b6:	f7ff fe01 	bl	80031bc <STMPE811_Read>
 80035ba:	4603      	mov	r3, r0
 80035bc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80035be:	7a7b      	ldrb	r3, [r7, #9]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	b21a      	sxth	r2, r3
 80035c4:	7a3b      	ldrb	r3, [r7, #8]
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	4313      	orrs	r3, r2
 80035ca:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80035cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80035d4:	4293      	cmp	r3, r2
 80035d6:	dc06      	bgt.n	80035e6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80035de:	330c      	adds	r3, #12
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	81fb      	strh	r3, [r7, #14]
 80035e4:	e005      	b.n	80035f2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80035e6:	89fb      	ldrh	r3, [r7, #14]
 80035e8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80035ec:	3308      	adds	r3, #8
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80035f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035f6:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <TM_STMPE811_ReadX+0xb8>)
 80035f8:	fb82 1203 	smull	r1, r2, r2, r3
 80035fc:	441a      	add	r2, r3
 80035fe:	10d2      	asrs	r2, r2, #3
 8003600:	17db      	asrs	r3, r3, #31
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800360a:	2bef      	cmp	r3, #239	@ 0xef
 800360c:	dd02      	ble.n	8003614 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800360e:	23ef      	movs	r3, #239	@ 0xef
 8003610:	81fb      	strh	r3, [r7, #14]
 8003612:	e005      	b.n	8003620 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003618:	2b00      	cmp	r3, #0
 800361a:	da01      	bge.n	8003620 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003620:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	429a      	cmp	r2, r3
 8003628:	dd05      	ble.n	8003636 <TM_STMPE811_ReadX+0x96>
 800362a:	89fa      	ldrh	r2, [r7, #14]
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	e004      	b.n	8003640 <TM_STMPE811_ReadX+0xa0>
 8003636:	89fb      	ldrh	r3, [r7, #14]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	b29b      	uxth	r3, r3
 800363e:	b21b      	sxth	r3, r3
 8003640:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003642:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003646:	2b04      	cmp	r3, #4
 8003648:	dd01      	ble.n	800364e <TM_STMPE811_ReadX+0xae>
        return val;
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	e000      	b.n	8003650 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800364e:	88fb      	ldrh	r3, [r7, #6]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	88888889 	.word	0x88888889

0800365c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003666:	204f      	movs	r0, #79	@ 0x4f
 8003668:	f7ff fda8 	bl	80031bc <STMPE811_Read>
 800366c:	4603      	mov	r3, r0
 800366e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003670:	2050      	movs	r0, #80	@ 0x50
 8003672:	f7ff fda3 	bl	80031bc <STMPE811_Read>
 8003676:	4603      	mov	r3, r0
 8003678:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800367a:	7a7b      	ldrb	r3, [r7, #9]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	b21a      	sxth	r2, r3
 8003680:	7a3b      	ldrb	r3, [r7, #8]
 8003682:	b21b      	sxth	r3, r3
 8003684:	4313      	orrs	r3, r2
 8003686:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800368e:	b29b      	uxth	r3, r3
 8003690:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003692:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003696:	4a19      	ldr	r2, [pc, #100]	@ (80036fc <TM_STMPE811_ReadY+0xa0>)
 8003698:	fb82 1203 	smull	r1, r2, r2, r3
 800369c:	1052      	asrs	r2, r2, #1
 800369e:	17db      	asrs	r3, r3, #31
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80036a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dc02      	bgt.n	80036b2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	81fb      	strh	r3, [r7, #14]
 80036b0:	e007      	b.n	80036c2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80036b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80036ba:	db02      	blt.n	80036c2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80036bc:	f240 133f 	movw	r3, #319	@ 0x13f
 80036c0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80036c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dd05      	ble.n	80036d8 <TM_STMPE811_ReadY+0x7c>
 80036cc:	89fa      	ldrh	r2, [r7, #14]
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	b21b      	sxth	r3, r3
 80036d6:	e004      	b.n	80036e2 <TM_STMPE811_ReadY+0x86>
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b21b      	sxth	r3, r3
 80036e2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80036e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	dd01      	ble.n	80036f0 <TM_STMPE811_ReadY+0x94>
        return val;
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	e000      	b.n	80036f2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80036f0:	88fb      	ldrh	r3, [r7, #6]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2e8ba2e9 	.word	0x2e8ba2e9

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f004 f9d4 	bl	8007adc <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20030000 	.word	0x20030000
 8003760:	00000400 	.word	0x00000400
 8003764:	20025ca8 	.word	0x20025ca8
 8003768:	20025ea8 	.word	0x20025ea8

0800376c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003770:	4b06      	ldr	r3, [pc, #24]	@ (800378c <SystemInit+0x20>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	4a05      	ldr	r2, [pc, #20]	@ (800378c <SystemInit+0x20>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003794:	f7ff ffea 	bl	800376c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003798:	480c      	ldr	r0, [pc, #48]	@ (80037cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800379a:	490d      	ldr	r1, [pc, #52]	@ (80037d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037a0:	e002      	b.n	80037a8 <LoopCopyDataInit>

080037a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a6:	3304      	adds	r3, #4

080037a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037ac:	d3f9      	bcc.n	80037a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ae:	4a0a      	ldr	r2, [pc, #40]	@ (80037d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037b0:	4c0a      	ldr	r4, [pc, #40]	@ (80037dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b4:	e001      	b.n	80037ba <LoopFillZerobss>

080037b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b8:	3204      	adds	r2, #4

080037ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037bc:	d3fb      	bcc.n	80037b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80037be:	f004 f993 	bl	8007ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037c2:	f7fe fd63 	bl	800228c <main>
  bx  lr    
 80037c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80037d4:	08009cdc 	.word	0x08009cdc
  ldr r2, =_sbss
 80037d8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80037dc:	20025ea8 	.word	0x20025ea8

080037e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037e0:	e7fe      	b.n	80037e0 <ADC_IRQHandler>
	...

080037e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <HAL_Init+0x40>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003824 <HAL_Init+0x40>)
 80037ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_Init+0x40>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003824 <HAL_Init+0x40>)
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a07      	ldr	r2, [pc, #28]	@ (8003824 <HAL_Init+0x40>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800380a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380c:	2003      	movs	r0, #3
 800380e:	f000 f973 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003812:	2000      	movs	r0, #0
 8003814:	f000 f808 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003818:	f7ff f998 	bl	8002b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003830:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_InitTick+0x54>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <HAL_InitTick+0x58>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f999 	bl	8003b7e <HAL_SYSTICK_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00e      	b.n	8003874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d80a      	bhi.n	8003872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	2200      	movs	r2, #0
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 f953 	bl	8003b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003868:	4a06      	ldr	r2, [pc, #24]	@ (8003884 <HAL_InitTick+0x5c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000010 	.word	0x20000010
 8003880:	20000018 	.word	0x20000018
 8003884:	20000014 	.word	0x20000014

08003888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_IncTick+0x20>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_IncTick+0x24>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	@ (80038ac <HAL_IncTick+0x24>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000018 	.word	0x20000018
 80038ac:	20025cac 	.word	0x20025cac

080038b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_GetTick+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20025cac 	.word	0x20025cac

080038c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7ff ffee 	bl	80038b0 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d005      	beq.n	80038ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <HAL_Delay+0x44>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ee:	bf00      	nop
 80038f0:	f7ff ffde 	bl	80038b0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8f7      	bhi.n	80038f0 <HAL_Delay+0x28>
  {
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000018 	.word	0x20000018

08003910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	@ (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db12      	blt.n	80039e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	490a      	ldr	r1, [pc, #40]	@ (80039f4 <__NVIC_DisableIRQ+0x44>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	3320      	adds	r3, #32
 80039d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039dc:	f3bf 8f4f 	dsb	sy
}
 80039e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039e2:	f3bf 8f6f 	isb	sy
}
 80039e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	@ (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	@ 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff05 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff1a 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff8e 	bl	8003a4c <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff0d 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff1d 	bl	80039b0 <__NVIC_DisableIRQ>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff94 	bl	8003ab4 <SysTick_Config>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e177      	b.n	8003ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	f040 8166 	bne.w	8003e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d005      	beq.n	8003bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d130      	bne.n	8003c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0201 	and.w	r2, r3, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d017      	beq.n	8003c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d123      	bne.n	8003cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	220f      	movs	r2, #15
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	69b9      	ldr	r1, [r7, #24]
 8003cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80c0 	beq.w	8003e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4b66      	ldr	r3, [pc, #408]	@ (8003ebc <HAL_GPIO_Init+0x324>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	4a65      	ldr	r2, [pc, #404]	@ (8003ebc <HAL_GPIO_Init+0x324>)
 8003d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2e:	4b63      	ldr	r3, [pc, #396]	@ (8003ebc <HAL_GPIO_Init+0x324>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3a:	4a61      	ldr	r2, [pc, #388]	@ (8003ec0 <HAL_GPIO_Init+0x328>)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a58      	ldr	r2, [pc, #352]	@ (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d037      	beq.n	8003dd6 <HAL_GPIO_Init+0x23e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a57      	ldr	r2, [pc, #348]	@ (8003ec8 <HAL_GPIO_Init+0x330>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d031      	beq.n	8003dd2 <HAL_GPIO_Init+0x23a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a56      	ldr	r2, [pc, #344]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02b      	beq.n	8003dce <HAL_GPIO_Init+0x236>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a55      	ldr	r2, [pc, #340]	@ (8003ed0 <HAL_GPIO_Init+0x338>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d025      	beq.n	8003dca <HAL_GPIO_Init+0x232>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a54      	ldr	r2, [pc, #336]	@ (8003ed4 <HAL_GPIO_Init+0x33c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <HAL_GPIO_Init+0x22e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a53      	ldr	r2, [pc, #332]	@ (8003ed8 <HAL_GPIO_Init+0x340>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d019      	beq.n	8003dc2 <HAL_GPIO_Init+0x22a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a52      	ldr	r2, [pc, #328]	@ (8003edc <HAL_GPIO_Init+0x344>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_GPIO_Init+0x226>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a51      	ldr	r2, [pc, #324]	@ (8003ee0 <HAL_GPIO_Init+0x348>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00d      	beq.n	8003dba <HAL_GPIO_Init+0x222>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a50      	ldr	r2, [pc, #320]	@ (8003ee4 <HAL_GPIO_Init+0x34c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <HAL_GPIO_Init+0x21e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4f      	ldr	r2, [pc, #316]	@ (8003ee8 <HAL_GPIO_Init+0x350>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_GPIO_Init+0x21a>
 8003dae:	2309      	movs	r3, #9
 8003db0:	e012      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003db2:	230a      	movs	r3, #10
 8003db4:	e010      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003db6:	2308      	movs	r3, #8
 8003db8:	e00e      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dba:	2307      	movs	r3, #7
 8003dbc:	e00c      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dbe:	2306      	movs	r3, #6
 8003dc0:	e00a      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dc2:	2305      	movs	r3, #5
 8003dc4:	e008      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	e006      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e004      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e002      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_GPIO_Init+0x240>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	f002 0203 	and.w	r2, r2, #3
 8003dde:	0092      	lsls	r2, r2, #2
 8003de0:	4093      	lsls	r3, r2
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de8:	4935      	ldr	r1, [pc, #212]	@ (8003ec0 <HAL_GPIO_Init+0x328>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	3302      	adds	r3, #2
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003df6:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e1a:	4a34      	ldr	r2, [pc, #208]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e20:	4b32      	ldr	r3, [pc, #200]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e44:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e4a:	4b28      	ldr	r3, [pc, #160]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e98:	4a14      	ldr	r2, [pc, #80]	@ (8003eec <HAL_GPIO_Init+0x354>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	f67f ae84 	bls.w	8003bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3724      	adds	r7, #36	@ 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40013800 	.word	0x40013800
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	40020400 	.word	0x40020400
 8003ecc:	40020800 	.word	0x40020800
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40021400 	.word	0x40021400
 8003edc:	40021800 	.word	0x40021800
 8003ee0:	40021c00 	.word	0x40021c00
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40022400 	.word	0x40022400
 8003eec:	40013c00 	.word	0x40013c00

08003ef0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e0d9      	b.n	80040c0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f040 80c9 	bne.w	80040ba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f28:	4a6b      	ldr	r2, [pc, #428]	@ (80040d8 <HAL_GPIO_DeInit+0x1e8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3302      	adds	r3, #2
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	220f      	movs	r2, #15
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a63      	ldr	r2, [pc, #396]	@ (80040dc <HAL_GPIO_DeInit+0x1ec>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d037      	beq.n	8003fc2 <HAL_GPIO_DeInit+0xd2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a62      	ldr	r2, [pc, #392]	@ (80040e0 <HAL_GPIO_DeInit+0x1f0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d031      	beq.n	8003fbe <HAL_GPIO_DeInit+0xce>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a61      	ldr	r2, [pc, #388]	@ (80040e4 <HAL_GPIO_DeInit+0x1f4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d02b      	beq.n	8003fba <HAL_GPIO_DeInit+0xca>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a60      	ldr	r2, [pc, #384]	@ (80040e8 <HAL_GPIO_DeInit+0x1f8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d025      	beq.n	8003fb6 <HAL_GPIO_DeInit+0xc6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80040ec <HAL_GPIO_DeInit+0x1fc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01f      	beq.n	8003fb2 <HAL_GPIO_DeInit+0xc2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a5e      	ldr	r2, [pc, #376]	@ (80040f0 <HAL_GPIO_DeInit+0x200>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_DeInit+0xbe>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80040f4 <HAL_GPIO_DeInit+0x204>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_DeInit+0xba>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a5c      	ldr	r2, [pc, #368]	@ (80040f8 <HAL_GPIO_DeInit+0x208>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_DeInit+0xb6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a5b      	ldr	r2, [pc, #364]	@ (80040fc <HAL_GPIO_DeInit+0x20c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_DeInit+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a5a      	ldr	r2, [pc, #360]	@ (8004100 <HAL_GPIO_DeInit+0x210>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_DeInit+0xae>
 8003f9a:	2309      	movs	r3, #9
 8003f9c:	e012      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	e010      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	e00e      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fa6:	2307      	movs	r3, #7
 8003fa8:	e00c      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003faa:	2306      	movs	r3, #6
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_DeInit+0xd4>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d132      	bne.n	800403a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	4949      	ldr	r1, [pc, #292]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fe2:	4b48      	ldr	r3, [pc, #288]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	4946      	ldr	r1, [pc, #280]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ff0:	4b44      	ldr	r3, [pc, #272]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	4942      	ldr	r1, [pc, #264]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ffe:	4b41      	ldr	r3, [pc, #260]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43db      	mvns	r3, r3
 8004006:	493f      	ldr	r1, [pc, #252]	@ (8004104 <HAL_GPIO_DeInit+0x214>)
 8004008:	4013      	ands	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800401c:	4a2e      	ldr	r2, [pc, #184]	@ (80040d8 <HAL_GPIO_DeInit+0x1e8>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3302      	adds	r3, #2
 8004024:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	43da      	mvns	r2, r3
 800402c:	482a      	ldr	r0, [pc, #168]	@ (80040d8 <HAL_GPIO_DeInit+0x1e8>)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	400a      	ands	r2, r1
 8004034:	3302      	adds	r3, #2
 8004036:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	2103      	movs	r1, #3
 8004044:	fa01 f303 	lsl.w	r3, r1, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	401a      	ands	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	08da      	lsrs	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	08d2      	lsrs	r2, r2, #3
 8004070:	4019      	ands	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3208      	adds	r2, #8
 8004076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2103      	movs	r1, #3
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	401a      	ands	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	2101      	movs	r1, #1
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	2103      	movs	r1, #3
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	3301      	adds	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b0f      	cmp	r3, #15
 80040c4:	f67f af22 	bls.w	8003f0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40020c00 	.word	0x40020c00
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40021400 	.word	0x40021400
 80040f4:	40021800 	.word	0x40021800
 80040f8:	40021c00 	.word	0x40021c00
 80040fc:	40022000 	.word	0x40022000
 8004100:	40022400 	.word	0x40022400
 8004104:	40013c00 	.word	0x40013c00

08004108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
 8004114:	4613      	mov	r3, r2
 8004116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004118:	787b      	ldrb	r3, [r7, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004124:	e003      	b.n	800412e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	041a      	lsls	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	619a      	str	r2, [r3, #24]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e12b      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe fd1a 	bl	8002b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	@ 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800418e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800419e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041a0:	f001 ff82 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a81      	ldr	r2, [pc, #516]	@ (80043b0 <HAL_I2C_Init+0x274>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d807      	bhi.n	80041c0 <HAL_I2C_Init+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a80      	ldr	r2, [pc, #512]	@ (80043b4 <HAL_I2C_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bf94      	ite	ls
 80041b8:	2301      	movls	r3, #1
 80041ba:	2300      	movhi	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e006      	b.n	80041ce <HAL_I2C_Init+0x92>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a7d      	ldr	r2, [pc, #500]	@ (80043b8 <HAL_I2C_Init+0x27c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0e7      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a78      	ldr	r2, [pc, #480]	@ (80043bc <HAL_I2C_Init+0x280>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a6a      	ldr	r2, [pc, #424]	@ (80043b0 <HAL_I2C_Init+0x274>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d802      	bhi.n	8004210 <HAL_I2C_Init+0xd4>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	e009      	b.n	8004224 <HAL_I2C_Init+0xe8>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	4a69      	ldr	r2, [pc, #420]	@ (80043c0 <HAL_I2C_Init+0x284>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	3301      	adds	r3, #1
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004236:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	495c      	ldr	r1, [pc, #368]	@ (80043b0 <HAL_I2C_Init+0x274>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d819      	bhi.n	8004278 <HAL_I2C_Init+0x13c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e59      	subs	r1, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004258:	400b      	ands	r3, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_I2C_Init+0x138>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e59      	subs	r1, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fbb1 f3f3 	udiv	r3, r1, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004272:	e051      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004274:	2304      	movs	r3, #4
 8004276:	e04f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <HAL_I2C_Init+0x168>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e012      	b.n	80042ca <HAL_I2C_Init+0x18e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Init+0x196>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e022      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_I2C_Init+0x1bc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e58      	subs	r0, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	440b      	add	r3, r1
 80042e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	6809      	ldr	r1, [r1, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004346:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6911      	ldr	r1, [r2, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	4311      	orrs	r1, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	000186a0 	.word	0x000186a0
 80043b4:	001e847f 	.word	0x001e847f
 80043b8:	003d08ff 	.word	0x003d08ff
 80043bc:	431bde83 	.word	0x431bde83
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	460b      	mov	r3, r1
 80043d8:	813b      	strh	r3, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043de:	f7ff fa67 	bl	80038b0 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	f040 80d9 	bne.w	80045a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2319      	movs	r3, #25
 80043f8:	2201      	movs	r2, #1
 80043fa:	496d      	ldr	r1, [pc, #436]	@ (80045b0 <HAL_I2C_Mem_Write+0x1ec>)
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fc8b 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	e0cc      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_I2C_Mem_Write+0x56>
 8004416:	2302      	movs	r3, #2
 8004418:	e0c5      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d007      	beq.n	8004440 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2221      	movs	r2, #33	@ 0x21
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2240      	movs	r2, #64	@ 0x40
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a4d      	ldr	r2, [pc, #308]	@ (80045b4 <HAL_I2C_Mem_Write+0x1f0>)
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004482:	88f8      	ldrh	r0, [r7, #6]
 8004484:	893a      	ldrh	r2, [r7, #8]
 8004486:	8979      	ldrh	r1, [r7, #10]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4603      	mov	r3, r0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fac2 	bl	8004a1c <I2C_RequestMemoryWrite>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d052      	beq.n	8004544 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e081      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fd50 	bl	8004f4c <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e06b      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d11b      	bne.n	8004544 <HAL_I2C_Mem_Write+0x180>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d017      	beq.n	8004544 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1aa      	bne.n	80044a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fd43 	bl	8004fdc <I2C_WaitOnBTFFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	2b04      	cmp	r3, #4
 8004562:	d107      	bne.n	8004574 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004572:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e016      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	00100002 	.word	0x00100002
 80045b4:	ffff0000 	.word	0xffff0000

080045b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08c      	sub	sp, #48	@ 0x30
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	817b      	strh	r3, [r7, #10]
 80045ca:	460b      	mov	r3, r1
 80045cc:	813b      	strh	r3, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045d2:	f7ff f96d 	bl	80038b0 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	f040 8214 	bne.w	8004a0e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2319      	movs	r3, #25
 80045ec:	2201      	movs	r2, #1
 80045ee:	497b      	ldr	r1, [pc, #492]	@ (80047dc <HAL_I2C_Mem_Read+0x224>)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fb91 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
 80045fe:	e207      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_I2C_Mem_Read+0x56>
 800460a:	2302      	movs	r3, #2
 800460c:	e200      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d007      	beq.n	8004634 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2222      	movs	r2, #34	@ 0x22
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2240      	movs	r2, #64	@ 0x40
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a5b      	ldr	r2, [pc, #364]	@ (80047e0 <HAL_I2C_Mem_Read+0x228>)
 8004674:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004676:	88f8      	ldrh	r0, [r7, #6]
 8004678:	893a      	ldrh	r2, [r7, #8]
 800467a:	8979      	ldrh	r1, [r7, #10]
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	4603      	mov	r3, r0
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fa5e 	bl	8004b48 <I2C_RequestMemoryRead>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1bc      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d113      	bne.n	80046c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	623b      	str	r3, [r7, #32]
 80046b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e190      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d11b      	bne.n	8004706 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e170      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	2b02      	cmp	r3, #2
 800470c:	d11b      	bne.n	8004746 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800472c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	e150      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800475c:	e144      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004762:	2b03      	cmp	r3, #3
 8004764:	f200 80f1 	bhi.w	800494a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476c:	2b01      	cmp	r3, #1
 800476e:	d123      	bne.n	80047b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004772:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fc79 	bl	800506c <I2C_WaitOnRXNEFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e145      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047b6:	e117      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d14e      	bne.n	800485e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	2200      	movs	r2, #0
 80047c8:	4906      	ldr	r1, [pc, #24]	@ (80047e4 <HAL_I2C_Mem_Read+0x22c>)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 faa4 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e11a      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
 80047da:	bf00      	nop
 80047dc:	00100002 	.word	0x00100002
 80047e0:	ffff0000 	.word	0xffff0000
 80047e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800485c:	e0c4      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004864:	2200      	movs	r2, #0
 8004866:	496c      	ldr	r1, [pc, #432]	@ (8004a18 <HAL_I2C_Mem_Read+0x460>)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fa55 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0cb      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	2200      	movs	r2, #0
 80048c2:	4955      	ldr	r1, [pc, #340]	@ (8004a18 <HAL_I2C_Mem_Read+0x460>)
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fa27 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e09d      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004948:	e04e      	b.n	80049e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fb8c 	bl	800506c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e058      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d124      	bne.n	80049e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d107      	bne.n	80049b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f aeb6 	bne.w	800475e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3728      	adds	r7, #40	@ 0x28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	00010004 	.word	0x00010004

08004a1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f960 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6c:	d103      	bne.n	8004a76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e05f      	b.n	8004b3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a7a:	897b      	ldrh	r3, [r7, #10]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	492d      	ldr	r1, [pc, #180]	@ (8004b44 <I2C_RequestMemoryWrite+0x128>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f9bb 	bl	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e04c      	b.n	8004b3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab8:	6a39      	ldr	r1, [r7, #32]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fa46 	bl	8004f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d107      	bne.n	8004ade <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02b      	b.n	8004b3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]
 8004af2:	e021      	b.n	8004b38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	6a39      	ldr	r1, [r7, #32]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fa20 	bl	8004f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d107      	bne.n	8004b2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e005      	b.n	8004b3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2e:	893b      	ldrh	r3, [r7, #8]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	00010002 	.word	0x00010002

08004b48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	813b      	strh	r3, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f8c2 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba8:	d103      	bne.n	8004bb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0aa      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	6a3a      	ldr	r2, [r7, #32]
 8004bca:	4952      	ldr	r1, [pc, #328]	@ (8004d14 <I2C_RequestMemoryRead+0x1cc>)
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f91d 	bl	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e097      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf4:	6a39      	ldr	r1, [r7, #32]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f9a8 	bl	8004f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d107      	bne.n	8004c1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e076      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	611a      	str	r2, [r3, #16]
 8004c2e:	e021      	b.n	8004c74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c30:	893b      	ldrh	r3, [r7, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c40:	6a39      	ldr	r1, [r7, #32]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f982 	bl	8004f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d107      	bne.n	8004c66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e050      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c6a:	893b      	ldrh	r3, [r7, #8]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c76:	6a39      	ldr	r1, [r7, #32]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f967 	bl	8004f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d107      	bne.n	8004c9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e035      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f82b 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd6:	d103      	bne.n	8004ce0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e013      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ce4:	897b      	ldrh	r3, [r7, #10]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	4906      	ldr	r1, [pc, #24]	@ (8004d14 <I2C_RequestMemoryRead+0x1cc>)
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f886 	bl	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	00010002 	.word	0x00010002

08004d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d28:	e048      	b.n	8004dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d044      	beq.n	8004dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d32:	f7fe fdbd 	bl	80038b0 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d139      	bne.n	8004dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10d      	bne.n	8004d6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	e00c      	b.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d116      	bne.n	8004dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e023      	b.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10d      	bne.n	8004de2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	e00c      	b.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	43da      	mvns	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d093      	beq.n	8004d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e1a:	e071      	b.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2a:	d123      	bne.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	f043 0204 	orr.w	r2, r3, #4
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e067      	b.n	8004f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d041      	beq.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7c:	f7fe fd18 	bl	80038b0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d136      	bne.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d10c      	bne.n	8004eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e00b      	b.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e021      	b.n	8004f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10c      	bne.n	8004f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e00b      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f47f af6d 	bne.w	8004e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f58:	e034      	b.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f8e3 	bl	8005126 <I2C_IsAcknowledgeFailed>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e034      	b.n	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d028      	beq.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f72:	f7fe fc9d 	bl	80038b0 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d302      	bcc.n	8004f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11d      	bne.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d016      	beq.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e007      	b.n	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d1c3      	bne.n	8004f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe8:	e034      	b.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f89b 	bl	8005126 <I2C_IsAcknowledgeFailed>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e034      	b.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d028      	beq.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fe fc55 	bl	80038b0 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11d      	bne.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d016      	beq.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e007      	b.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d1c3      	bne.n	8004fea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005078:	e049      	b.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b10      	cmp	r3, #16
 8005086:	d119      	bne.n	80050bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0210 	mvn.w	r2, #16
 8005090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e030      	b.n	800511e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050bc:	f7fe fbf8 	bl	80038b0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d302      	bcc.n	80050d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11d      	bne.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b40      	cmp	r3, #64	@ 0x40
 80050de:	d016      	beq.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e007      	b.n	800511e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b40      	cmp	r3, #64	@ 0x40
 800511a:	d1ae      	bne.n	800507a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513c:	d11b      	bne.n	8005176 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005146:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b20      	cmp	r3, #32
 8005198:	d129      	bne.n	80051ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2224      	movs	r2, #36	@ 0x24
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0210 	bic.w	r2, r2, #16
 80051c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b20      	cmp	r3, #32
 8005214:	d12a      	bne.n	800526c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2224      	movs	r2, #36	@ 0x24
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005236:	89fb      	ldrh	r3, [r7, #14]
 8005238:	f023 030f 	bic.w	r3, r3, #15
 800523c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	b29a      	uxth	r2, r3
 8005242:	89fb      	ldrh	r3, [r7, #14]
 8005244:	4313      	orrs	r3, r2
 8005246:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	89fa      	ldrh	r2, [r7, #14]
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0bf      	b.n	800540e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fd fce4 	bl	8002c70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80052be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6999      	ldr	r1, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6899      	ldr	r1, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005418 <HAL_LTDC_Init+0x19c>)
 80052f0:	400b      	ands	r3, r1
 80052f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6899      	ldr	r1, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68d9      	ldr	r1, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b3e      	ldr	r3, [pc, #248]	@ (8005418 <HAL_LTDC_Init+0x19c>)
 800531e:	400b      	ands	r3, r1
 8005320:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68d9      	ldr	r1, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1a      	ldr	r2, [r3, #32]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6919      	ldr	r1, [r3, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b33      	ldr	r3, [pc, #204]	@ (8005418 <HAL_LTDC_Init+0x19c>)
 800534c:	400b      	ands	r3, r1
 800534e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6919      	ldr	r1, [r3, #16]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6959      	ldr	r1, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <HAL_LTDC_Init+0x19c>)
 800537a:	400b      	ands	r3, r1
 800537c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6959      	ldr	r1, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80053be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0206 	orr.w	r2, r2, #6
 80053ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	f000f800 	.word	0xf000f800

0800541c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800541c:	b5b0      	push	{r4, r5, r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_LTDC_ConfigLayer+0x1a>
 8005432:	2302      	movs	r3, #2
 8005434:	e02c      	b.n	8005490 <HAL_LTDC_ConfigLayer+0x74>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2134      	movs	r1, #52	@ 0x34
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4614      	mov	r4, r2
 800545a:	461d      	mov	r5, r3
 800545c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800545e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f811 	bl	8005498 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2201      	movs	r2, #1
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bdb0      	pop	{r4, r5, r7, pc}

08005498 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	@ 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b4:	4413      	add	r3, r2
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	01db      	lsls	r3, r3, #7
 80054c4:	4413      	add	r3, r2
 80054c6:	3384      	adds	r3, #132	@ 0x84
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	4611      	mov	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	01d2      	lsls	r2, r2, #7
 80054d4:	440a      	add	r2, r1
 80054d6:	3284      	adds	r2, #132	@ 0x84
 80054d8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80054dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	01db      	lsls	r3, r3, #7
 80054fc:	440b      	add	r3, r1
 80054fe:	3384      	adds	r3, #132	@ 0x84
 8005500:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005506:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005516:	4413      	add	r3, r2
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	01db      	lsls	r3, r3, #7
 8005526:	4413      	add	r3, r2
 8005528:	3384      	adds	r3, #132	@ 0x84
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	4611      	mov	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	01d2      	lsls	r2, r2, #7
 8005536:	440a      	add	r2, r1
 8005538:	3284      	adds	r2, #132	@ 0x84
 800553a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800553e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800554e:	4413      	add	r3, r2
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	440b      	add	r3, r1
 800555e:	3384      	adds	r3, #132	@ 0x84
 8005560:	4619      	mov	r1, r3
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	@ 0x84
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	4611      	mov	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	01d2      	lsls	r2, r2, #7
 8005582:	440a      	add	r2, r1
 8005584:	3284      	adds	r2, #132	@ 0x84
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	01db      	lsls	r3, r3, #7
 8005596:	4413      	add	r3, r2
 8005598:	3384      	adds	r3, #132	@ 0x84
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	061b      	lsls	r3, r3, #24
 80055bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	4413      	add	r3, r2
 80055ca:	3384      	adds	r3, #132	@ 0x84
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	4413      	add	r3, r2
 80055da:	3384      	adds	r3, #132	@ 0x84
 80055dc:	461a      	mov	r2, r3
 80055de:	2300      	movs	r3, #0
 80055e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055e8:	461a      	mov	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	440b      	add	r3, r1
 80055fe:	3384      	adds	r3, #132	@ 0x84
 8005600:	4619      	mov	r1, r3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	01db      	lsls	r3, r3, #7
 8005612:	4413      	add	r3, r2
 8005614:	3384      	adds	r3, #132	@ 0x84
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	4611      	mov	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	01d2      	lsls	r2, r2, #7
 8005622:	440a      	add	r2, r1
 8005624:	3284      	adds	r2, #132	@ 0x84
 8005626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800562a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	01db      	lsls	r3, r3, #7
 8005636:	4413      	add	r3, r2
 8005638:	3384      	adds	r3, #132	@ 0x84
 800563a:	461a      	mov	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	4413      	add	r3, r2
 800564e:	3384      	adds	r3, #132	@ 0x84
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	4611      	mov	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	01d2      	lsls	r2, r2, #7
 800565c:	440a      	add	r2, r1
 800565e:	3284      	adds	r2, #132	@ 0x84
 8005660:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	6809      	ldr	r1, [r1, #0]
 8005676:	4608      	mov	r0, r1
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	01c9      	lsls	r1, r1, #7
 800567c:	4401      	add	r1, r0
 800567e:	3184      	adds	r1, #132	@ 0x84
 8005680:	4313      	orrs	r3, r2
 8005682:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	01db      	lsls	r3, r3, #7
 800568e:	4413      	add	r3, r2
 8005690:	3384      	adds	r3, #132	@ 0x84
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	01db      	lsls	r3, r3, #7
 800569e:	4413      	add	r3, r2
 80056a0:	3384      	adds	r3, #132	@ 0x84
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	01db      	lsls	r3, r3, #7
 80056b2:	4413      	add	r3, r2
 80056b4:	3384      	adds	r3, #132	@ 0x84
 80056b6:	461a      	mov	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80056c6:	2304      	movs	r3, #4
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	e01b      	b.n	8005704 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d102      	bne.n	80056da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80056d4:	2303      	movs	r3, #3
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	e014      	b.n	8005704 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00b      	beq.n	80056fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d007      	beq.n	80056fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d003      	beq.n	80056fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056f6:	2b07      	cmp	r3, #7
 80056f8:	d102      	bne.n	8005700 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80056fa:	2302      	movs	r3, #2
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e001      	b.n	8005704 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005700:	2301      	movs	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	01db      	lsls	r3, r3, #7
 800570e:	4413      	add	r3, r2
 8005710:	3384      	adds	r3, #132	@ 0x84
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	4611      	mov	r1, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	01d2      	lsls	r2, r2, #7
 800571e:	440a      	add	r2, r1
 8005720:	3284      	adds	r2, #132	@ 0x84
 8005722:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005726:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6859      	ldr	r1, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	1acb      	subs	r3, r1, r3
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	6809      	ldr	r1, [r1, #0]
 800574a:	4608      	mov	r0, r1
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	01c9      	lsls	r1, r1, #7
 8005750:	4401      	add	r1, r0
 8005752:	3184      	adds	r1, #132	@ 0x84
 8005754:	4313      	orrs	r3, r2
 8005756:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	01db      	lsls	r3, r3, #7
 8005762:	4413      	add	r3, r2
 8005764:	3384      	adds	r3, #132	@ 0x84
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	4611      	mov	r1, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	01d2      	lsls	r2, r2, #7
 8005772:	440a      	add	r2, r1
 8005774:	3284      	adds	r2, #132	@ 0x84
 8005776:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	01db      	lsls	r3, r3, #7
 800578a:	4413      	add	r3, r2
 800578c:	3384      	adds	r3, #132	@ 0x84
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	4413      	add	r3, r2
 80057a2:	3384      	adds	r3, #132	@ 0x84
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	4611      	mov	r1, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	01d2      	lsls	r2, r2, #7
 80057b0:	440a      	add	r2, r1
 80057b2:	3284      	adds	r2, #132	@ 0x84
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6013      	str	r3, [r2, #0]
}
 80057ba:	bf00      	nop
 80057bc:	3724      	adds	r7, #36	@ 0x24
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e267      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d075      	beq.n	80058d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057e6:	4b88      	ldr	r3, [pc, #544]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d00c      	beq.n	800580c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f2:	4b85      	ldr	r3, [pc, #532]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d112      	bne.n	8005824 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057fe:	4b82      	ldr	r3, [pc, #520]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580a:	d10b      	bne.n	8005824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d05b      	beq.n	80058d0 <HAL_RCC_OscConfig+0x108>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d157      	bne.n	80058d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e242      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582c:	d106      	bne.n	800583c <HAL_RCC_OscConfig+0x74>
 800582e:	4b76      	ldr	r3, [pc, #472]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a75      	ldr	r2, [pc, #468]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e01d      	b.n	8005878 <HAL_RCC_OscConfig+0xb0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005844:	d10c      	bne.n	8005860 <HAL_RCC_OscConfig+0x98>
 8005846:	4b70      	ldr	r3, [pc, #448]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6f      	ldr	r2, [pc, #444]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800584c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b6d      	ldr	r3, [pc, #436]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a6c      	ldr	r2, [pc, #432]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e00b      	b.n	8005878 <HAL_RCC_OscConfig+0xb0>
 8005860:	4b69      	ldr	r3, [pc, #420]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a68      	ldr	r2, [pc, #416]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	4b66      	ldr	r3, [pc, #408]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a65      	ldr	r2, [pc, #404]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fe f816 	bl	80038b0 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005888:	f7fe f812 	bl	80038b0 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	@ 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e207      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0xc0>
 80058a6:	e014      	b.n	80058d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fe f802 	bl	80038b0 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b0:	f7fd fffe 	bl	80038b0 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	@ 0x64
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e1f3      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058c2:	4b51      	ldr	r3, [pc, #324]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0xe8>
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d063      	beq.n	80059a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058de:	4b4a      	ldr	r3, [pc, #296]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ea:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d11c      	bne.n	8005930 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f6:	4b44      	ldr	r3, [pc, #272]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d116      	bne.n	8005930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005902:	4b41      	ldr	r3, [pc, #260]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_RCC_OscConfig+0x152>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e1c7      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4937      	ldr	r1, [pc, #220]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592e:	e03a      	b.n	80059a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005938:	4b34      	ldr	r3, [pc, #208]	@ (8005a0c <HAL_RCC_OscConfig+0x244>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593e:	f7fd ffb7 	bl	80038b0 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005946:	f7fd ffb3 	bl	80038b0 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e1a8      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005958:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005964:	4b28      	ldr	r3, [pc, #160]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4925      	ldr	r1, [pc, #148]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]
 8005978:	e015      	b.n	80059a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597a:	4b24      	ldr	r3, [pc, #144]	@ (8005a0c <HAL_RCC_OscConfig+0x244>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd ff96 	bl	80038b0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005988:	f7fd ff92 	bl	80038b0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e187      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d036      	beq.n	8005a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <HAL_RCC_OscConfig+0x248>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c0:	f7fd ff76 	bl	80038b0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c8:	f7fd ff72 	bl	80038b0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e167      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059da:	4b0b      	ldr	r3, [pc, #44]	@ (8005a08 <HAL_RCC_OscConfig+0x240>)
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x200>
 80059e6:	e01b      	b.n	8005a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e8:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_RCC_OscConfig+0x248>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ee:	f7fd ff5f 	bl	80038b0 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f4:	e00e      	b.n	8005a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059f6:	f7fd ff5b 	bl	80038b0 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d907      	bls.n	8005a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e150      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	42470000 	.word	0x42470000
 8005a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a14:	4b88      	ldr	r3, [pc, #544]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ea      	bne.n	80059f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8097 	beq.w	8005b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a32:	4b81      	ldr	r3, [pc, #516]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10f      	bne.n	8005a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	4b7d      	ldr	r3, [pc, #500]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	4a7c      	ldr	r2, [pc, #496]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5e:	4b77      	ldr	r3, [pc, #476]	@ (8005c3c <HAL_RCC_OscConfig+0x474>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d118      	bne.n	8005a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6a:	4b74      	ldr	r3, [pc, #464]	@ (8005c3c <HAL_RCC_OscConfig+0x474>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a73      	ldr	r2, [pc, #460]	@ (8005c3c <HAL_RCC_OscConfig+0x474>)
 8005a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a76:	f7fd ff1b 	bl	80038b0 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7e:	f7fd ff17 	bl	80038b0 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e10c      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	4b6a      	ldr	r3, [pc, #424]	@ (8005c3c <HAL_RCC_OscConfig+0x474>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x2ea>
 8005aa4:	4b64      	ldr	r3, [pc, #400]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa8:	4a63      	ldr	r2, [pc, #396]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab0:	e01c      	b.n	8005aec <HAL_RCC_OscConfig+0x324>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x30c>
 8005aba:	4b5f      	ldr	r3, [pc, #380]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abe:	4a5e      	ldr	r2, [pc, #376]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aca:	4a5b      	ldr	r2, [pc, #364]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0x324>
 8005ad4:	4b58      	ldr	r3, [pc, #352]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad8:	4a57      	ldr	r2, [pc, #348]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae0:	4b55      	ldr	r3, [pc, #340]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae4:	4a54      	ldr	r2, [pc, #336]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005ae6:	f023 0304 	bic.w	r3, r3, #4
 8005aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7fd fedc 	bl	80038b0 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afc:	f7fd fed8 	bl	80038b0 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0cb      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b12:	4b49      	ldr	r3, [pc, #292]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ee      	beq.n	8005afc <HAL_RCC_OscConfig+0x334>
 8005b1e:	e014      	b.n	8005b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b20:	f7fd fec6 	bl	80038b0 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b28:	f7fd fec2 	bl	80038b0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e0b5      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1ee      	bne.n	8005b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d105      	bne.n	8005b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b50:	4b39      	ldr	r3, [pc, #228]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	4a38      	ldr	r2, [pc, #224]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80a1 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b66:	4b34      	ldr	r3, [pc, #208]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d05c      	beq.n	8005c2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d141      	bne.n	8005bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b31      	ldr	r3, [pc, #196]	@ (8005c40 <HAL_RCC_OscConfig+0x478>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fd fe96 	bl	80038b0 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fd fe92 	bl	80038b0 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e087      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	4b27      	ldr	r3, [pc, #156]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	491b      	ldr	r1, [pc, #108]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c40 <HAL_RCC_OscConfig+0x478>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd6:	f7fd fe6b 	bl	80038b0 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bde:	f7fd fe67 	bl	80038b0 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e05c      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf0:	4b11      	ldr	r3, [pc, #68]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x416>
 8005bfc:	e054      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <HAL_RCC_OscConfig+0x478>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd fe54 	bl	80038b0 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fd fe50 	bl	80038b0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e045      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <HAL_RCC_OscConfig+0x470>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x444>
 8005c2a:	e03d      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e038      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	40007000 	.word	0x40007000
 8005c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c44:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb4 <HAL_RCC_OscConfig+0x4ec>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d028      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d121      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d11a      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c74:	4013      	ands	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d111      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40023800 	.word	0x40023800

08005cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0cc      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b68      	ldr	r3, [pc, #416]	@ (8005e70 <HAL_RCC_ClockConfig+0x1b8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d90c      	bls.n	8005cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b65      	ldr	r3, [pc, #404]	@ (8005e70 <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b63      	ldr	r3, [pc, #396]	@ (8005e70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0b8      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d020      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d0c:	4b59      	ldr	r3, [pc, #356]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a58      	ldr	r2, [pc, #352]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d24:	4b53      	ldr	r3, [pc, #332]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a52      	ldr	r2, [pc, #328]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d30:	4b50      	ldr	r3, [pc, #320]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	494d      	ldr	r1, [pc, #308]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d044      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d107      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	4b47      	ldr	r3, [pc, #284]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d119      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e07f      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d003      	beq.n	8005d76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d107      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d76:	4b3f      	ldr	r3, [pc, #252]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e06f      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d86:	4b3b      	ldr	r3, [pc, #236]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e067      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d96:	4b37      	ldr	r3, [pc, #220]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f023 0203 	bic.w	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4934      	ldr	r1, [pc, #208]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da8:	f7fd fd82 	bl	80038b0 <HAL_GetTick>
 8005dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db0:	f7fd fd7e 	bl	80038b0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e04f      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 020c 	and.w	r2, r3, #12
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d1eb      	bne.n	8005db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b25      	ldr	r3, [pc, #148]	@ (8005e70 <HAL_RCC_ClockConfig+0x1b8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d20c      	bcs.n	8005e00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b22      	ldr	r3, [pc, #136]	@ (8005e70 <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e032      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e0c:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4916      	ldr	r1, [pc, #88]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e2a:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	490e      	ldr	r1, [pc, #56]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e3e:	f000 f821 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	490a      	ldr	r1, [pc, #40]	@ (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005e50:	5ccb      	ldrb	r3, [r1, r3]
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	4a09      	ldr	r2, [pc, #36]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e5a:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fd fce2 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023c00 	.word	0x40023c00
 8005e74:	40023800 	.word	0x40023800
 8005e78:	08009c64 	.word	0x08009c64
 8005e7c:	20000010 	.word	0x20000010
 8005e80:	20000014 	.word	0x20000014

08005e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b094      	sub	sp, #80	@ 0x50
 8005e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9c:	4b79      	ldr	r3, [pc, #484]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	f200 80e1 	bhi.w	8006070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8005eb6:	e0db      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eb8:	4b73      	ldr	r3, [pc, #460]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ebc:	e0db      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ebe:	4b73      	ldr	r3, [pc, #460]	@ (800608c <HAL_RCC_GetSysClockFreq+0x208>)
 8005ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec2:	e0d8      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ecc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ece:	4b6d      	ldr	r3, [pc, #436]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d063      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	4b6a      	ldr	r3, [pc, #424]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	f04f 0000 	mov.w	r0, #0
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	0159      	lsls	r1, r3, #5
 8005f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f08:	0150      	lsls	r0, r2, #5
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4621      	mov	r1, r4
 8005f10:	1a51      	subs	r1, r2, r1
 8005f12:	6139      	str	r1, [r7, #16]
 8005f14:	4629      	mov	r1, r5
 8005f16:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f28:	4659      	mov	r1, fp
 8005f2a:	018b      	lsls	r3, r1, #6
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f32:	4651      	mov	r1, sl
 8005f34:	018a      	lsls	r2, r1, #6
 8005f36:	4651      	mov	r1, sl
 8005f38:	ebb2 0801 	subs.w	r8, r2, r1
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	eb18 0303 	adds.w	r3, r8, r3
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	462b      	mov	r3, r5
 8005f64:	eb49 0303 	adc.w	r3, r9, r3
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f76:	4629      	mov	r1, r5
 8005f78:	024b      	lsls	r3, r1, #9
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f80:	4621      	mov	r1, r4
 8005f82:	024a      	lsls	r2, r1, #9
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f94:	f7fa f984 	bl	80002a0 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa0:	e058      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa2:	4b38      	ldr	r3, [pc, #224]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	4611      	mov	r1, r2
 8005fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	f04f 0000 	mov.w	r0, #0
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	0159      	lsls	r1, r3, #5
 8005fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fce:	0150      	lsls	r0, r2, #5
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fda:	4649      	mov	r1, r9
 8005fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	00eb      	lsls	r3, r5, #3
 8006006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600a:	00e2      	lsls	r2, r4, #3
 800600c:	4614      	mov	r4, r2
 800600e:	461d      	mov	r5, r3
 8006010:	4643      	mov	r3, r8
 8006012:	18e3      	adds	r3, r4, r3
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	464b      	mov	r3, r9
 8006018:	eb45 0303 	adc.w	r3, r5, r3
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602a:	4629      	mov	r1, r5
 800602c:	028b      	lsls	r3, r1, #10
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006034:	4621      	mov	r1, r4
 8006036:	028a      	lsls	r2, r1, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800603e:	2200      	movs	r2, #0
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	61fa      	str	r2, [r7, #28]
 8006044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006048:	f7fa f92a 	bl	80002a0 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006054:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	3301      	adds	r3, #1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800606e:	e002      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x204>)
 8006072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006078:	4618      	mov	r0, r3
 800607a:	3750      	adds	r7, #80	@ 0x50
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400
 800608c:	007a1200 	.word	0x007a1200

08006090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006094:	4b03      	ldr	r3, [pc, #12]	@ (80060a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000010 	.word	0x20000010

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060ac:	f7ff fff0 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	@ (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	08009c74 	.word	0x08009c74

080060d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006100:	2b00      	cmp	r3, #0
 8006102:	d075      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006104:	4b91      	ldr	r3, [pc, #580]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800610a:	f7fd fbd1 	bl	80038b0 <HAL_GetTick>
 800610e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006112:	f7fd fbcd 	bl	80038b0 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e189      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006124:	4b8a      	ldr	r3, [pc, #552]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f0      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d009      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	019a      	lsls	r2, r3, #6
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	071b      	lsls	r3, r3, #28
 8006148:	4981      	ldr	r1, [pc, #516]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01f      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800615c:	4b7c      	ldr	r3, [pc, #496]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800615e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006162:	0f1b      	lsrs	r3, r3, #28
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	019a      	lsls	r2, r3, #6
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	431a      	orrs	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	071b      	lsls	r3, r3, #28
 800617c:	4974      	ldr	r1, [pc, #464]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006184:	4b72      	ldr	r3, [pc, #456]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800618a:	f023 021f 	bic.w	r2, r3, #31
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	3b01      	subs	r3, #1
 8006194:	496e      	ldr	r1, [pc, #440]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	019a      	lsls	r2, r3, #6
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	071b      	lsls	r3, r3, #28
 80061bc:	4964      	ldr	r1, [pc, #400]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061c4:	4b61      	ldr	r3, [pc, #388]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ca:	f7fd fb71 	bl	80038b0 <HAL_GetTick>
 80061ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061d0:	e008      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061d2:	f7fd fb6d 	bl	80038b0 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e129      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006204:	2b00      	cmp	r3, #0
 8006206:	d079      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006208:	4b52      	ldr	r3, [pc, #328]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800620e:	f7fd fb4f 	bl	80038b0 <HAL_GetTick>
 8006212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006214:	e008      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006216:	f7fd fb4b 	bl	80038b0 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e107      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006228:	4b49      	ldr	r3, [pc, #292]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006234:	d0ef      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d020      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006242:	4b43      	ldr	r3, [pc, #268]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006248:	0f1b      	lsrs	r3, r3, #28
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	019a      	lsls	r2, r3, #6
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	431a      	orrs	r2, r3
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	071b      	lsls	r3, r3, #28
 8006262:	493b      	ldr	r1, [pc, #236]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800626a:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006270:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	3b01      	subs	r3, #1
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	4934      	ldr	r1, [pc, #208]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01e      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006290:	4b2f      	ldr	r3, [pc, #188]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006296:	0e1b      	lsrs	r3, r3, #24
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	019a      	lsls	r2, r3, #6
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	061b      	lsls	r3, r3, #24
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	071b      	lsls	r3, r3, #28
 80062b0:	4927      	ldr	r1, [pc, #156]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062b8:	4b25      	ldr	r3, [pc, #148]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	4922      	ldr	r1, [pc, #136]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062ce:	4b21      	ldr	r3, [pc, #132]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062d4:	f7fd faec 	bl	80038b0 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062dc:	f7fd fae8 	bl	80038b0 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e0a4      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062ee:	4b18      	ldr	r3, [pc, #96]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fa:	d1ef      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 808b 	beq.w	8006420 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	4a0f      	ldr	r2, [pc, #60]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006318:	6413      	str	r3, [r2, #64]	@ 0x40
 800631a:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006326:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a0b      	ldr	r2, [pc, #44]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006330:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006332:	f7fd fabd 	bl	80038b0 <HAL_GetTick>
 8006336:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006338:	e010      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633a:	f7fd fab9 	bl	80038b0 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d909      	bls.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e075      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800634c:	42470068 	.word	0x42470068
 8006350:	40023800 	.word	0x40023800
 8006354:	42470070 	.word	0x42470070
 8006358:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800635c:	4b38      	ldr	r3, [pc, #224]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0e8      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006368:	4b36      	ldr	r3, [pc, #216]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006370:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02f      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	429a      	cmp	r2, r3
 8006384:	d028      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006386:	4b2f      	ldr	r3, [pc, #188]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800638e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006390:	4b2d      	ldr	r3, [pc, #180]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006396:	4b2c      	ldr	r3, [pc, #176]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800639c:	4a29      	ldr	r2, [pc, #164]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063a2:	4b28      	ldr	r3, [pc, #160]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d114      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063ae:	f7fd fa7f 	bl	80038b0 <HAL_GetTick>
 80063b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b4:	e00a      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b6:	f7fd fa7b 	bl	80038b0 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d901      	bls.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e035      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0ee      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e4:	d10d      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80063e6:	4b17      	ldr	r3, [pc, #92]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80063f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fa:	4912      	ldr	r1, [pc, #72]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]
 8006400:	e005      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4a0f      	ldr	r2, [pc, #60]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006408:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800640c:	6093      	str	r3, [r2, #8]
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006410:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641a:	490a      	ldr	r1, [pc, #40]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800641c:	4313      	orrs	r3, r2
 800641e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006432:	4b06      	ldr	r3, [pc, #24]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006434:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40007000 	.word	0x40007000
 8006444:	40023800 	.word	0x40023800
 8006448:	42470e40 	.word	0x42470e40
 800644c:	424711e0 	.word	0x424711e0

08006450 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e01c      	b.n	800649c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	795b      	ldrb	r3, [r3, #5]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc fd24 	bl	8002ec0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0204 	orr.w	r2, r2, #4
 800648c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	791b      	ldrb	r3, [r3, #4]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_RNG_GenerateRandomNumber+0x1a>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e044      	b.n	8006548 <HAL_RNG_GenerateRandomNumber+0xa4>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	795b      	ldrb	r3, [r3, #5]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d133      	bne.n	8006536 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064d4:	f7fd f9ec 	bl	80038b0 <HAL_GetTick>
 80064d8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80064da:	e018      	b.n	800650e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80064dc:	f7fd f9e8 	bl	80038b0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d911      	bls.n	800650e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d00a      	beq.n	800650e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e01c      	b.n	8006548 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d1df      	bne.n	80064dc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	715a      	strb	r2, [r3, #5]
 8006534:	e004      	b.n	8006540 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2204      	movs	r2, #4
 800653a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	711a      	strb	r2, [r3, #4]

  return status;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e07b      	b.n	800665a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006572:	d009      	beq.n	8006588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	61da      	str	r2, [r3, #28]
 800657a:	e005      	b.n	8006588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fc fcae 	bl	8002f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660c:	ea42 0103 	orr.w	r1, r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	f003 0104 	and.w	r1, r3, #4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	f003 0210 	and.w	r2, r3, #16
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e01a      	b.n	80066aa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800668a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7fc fc81 	bl	8002f94 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b088      	sub	sp, #32
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c2:	f7fd f8f5 	bl	80038b0 <HAL_GetTick>
 80066c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d001      	beq.n	80066dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
 80066da:	e12a      	b.n	8006932 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_Transmit+0x36>
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e122      	b.n	8006932 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_SPI_Transmit+0x48>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e11b      	b.n	8006932 <HAL_SPI_Transmit+0x280>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006748:	d10f      	bne.n	800676a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006758:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006768:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006774:	2b40      	cmp	r3, #64	@ 0x40
 8006776:	d007      	beq.n	8006788 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006790:	d152      	bne.n	8006838 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_Transmit+0xee>
 800679a:	8b7b      	ldrh	r3, [r7, #26]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d145      	bne.n	800682c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067c4:	e032      	b.n	800682c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d112      	bne.n	80067fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d8:	881a      	ldrh	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	1c9a      	adds	r2, r3, #2
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067f8:	e018      	b.n	800682c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067fa:	f7fd f859 	bl	80038b0 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d803      	bhi.n	8006812 <HAL_SPI_Transmit+0x160>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d102      	bne.n	8006818 <HAL_SPI_Transmit+0x166>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d109      	bne.n	800682c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e082      	b.n	8006932 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1c7      	bne.n	80067c6 <HAL_SPI_Transmit+0x114>
 8006836:	e053      	b.n	80068e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_SPI_Transmit+0x194>
 8006840:	8b7b      	ldrh	r3, [r7, #26]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d147      	bne.n	80068d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800686c:	e033      	b.n	80068d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b02      	cmp	r3, #2
 800687a:	d113      	bne.n	80068a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068a2:	e018      	b.n	80068d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a4:	f7fd f804 	bl	80038b0 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d803      	bhi.n	80068bc <HAL_SPI_Transmit+0x20a>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d102      	bne.n	80068c2 <HAL_SPI_Transmit+0x210>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e02d      	b.n	8006932 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1c6      	bne.n	800686e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f8bf 	bl	8006a68 <SPI_EndRxTxTransaction>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006930:	2300      	movs	r3, #0
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006948:	b2db      	uxtb	r3, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006968:	f7fc ffa2 	bl	80038b0 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4413      	add	r3, r2
 8006976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006978:	f7fc ff9a 	bl	80038b0 <HAL_GetTick>
 800697c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800697e:	4b39      	ldr	r3, [pc, #228]	@ (8006a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	015b      	lsls	r3, r3, #5
 8006984:	0d1b      	lsrs	r3, r3, #20
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	fb02 f303 	mul.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800698e:	e054      	b.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d050      	beq.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006998:	f7fc ff8a 	bl	80038b0 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d902      	bls.n	80069ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d13d      	bne.n	8006a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c6:	d111      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d0:	d004      	beq.n	80069dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069da:	d107      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069f4:	d10f      	bne.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e017      	b.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d19b      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000010 	.word	0x20000010

08006a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff ff6a 	bl	8006958 <SPI_WaitFlagStateUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	f043 0220 	orr.w	r2, r3, #32
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e032      	b.n	8006b00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b08 <SPI_EndRxTxTransaction+0xa0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8006b0c <SPI_EndRxTxTransaction+0xa4>)
 8006aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa4:	0d5b      	lsrs	r3, r3, #21
 8006aa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ab8:	d112      	bne.n	8006ae0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2180      	movs	r1, #128	@ 0x80
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff ff47 	bl	8006958 <SPI_WaitFlagStateUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d016      	beq.n	8006afe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad4:	f043 0220 	orr.w	r2, r3, #32
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e00f      	b.n	8006b00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af6:	2b80      	cmp	r3, #128	@ 0x80
 8006af8:	d0f2      	beq.n	8006ae0 <SPI_EndRxTxTransaction+0x78>
 8006afa:	e000      	b.n	8006afe <SPI_EndRxTxTransaction+0x96>
        break;
 8006afc:	bf00      	nop
  }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000010 	.word	0x20000010
 8006b0c:	165e9f81 	.word	0x165e9f81

08006b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e041      	b.n	8006ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fc fa4a 	bl	8002fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f000 f8f4 	bl	8006d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_ConfigClockSource+0x1c>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e0b4      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x186>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006be8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bf0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c02:	d03e      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0xd4>
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c08:	f200 8087 	bhi.w	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c10:	f000 8086 	beq.w	8006d20 <HAL_TIM_ConfigClockSource+0x172>
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c18:	d87f      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c1a:	2b70      	cmp	r3, #112	@ 0x70
 8006c1c:	d01a      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0xa6>
 8006c1e:	2b70      	cmp	r3, #112	@ 0x70
 8006c20:	d87b      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c22:	2b60      	cmp	r3, #96	@ 0x60
 8006c24:	d050      	beq.n	8006cc8 <HAL_TIM_ConfigClockSource+0x11a>
 8006c26:	2b60      	cmp	r3, #96	@ 0x60
 8006c28:	d877      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c2a:	2b50      	cmp	r3, #80	@ 0x50
 8006c2c:	d03c      	beq.n	8006ca8 <HAL_TIM_ConfigClockSource+0xfa>
 8006c2e:	2b50      	cmp	r3, #80	@ 0x50
 8006c30:	d873      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c32:	2b40      	cmp	r3, #64	@ 0x40
 8006c34:	d058      	beq.n	8006ce8 <HAL_TIM_ConfigClockSource+0x13a>
 8006c36:	2b40      	cmp	r3, #64	@ 0x40
 8006c38:	d86f      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c3a:	2b30      	cmp	r3, #48	@ 0x30
 8006c3c:	d064      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x15a>
 8006c3e:	2b30      	cmp	r3, #48	@ 0x30
 8006c40:	d86b      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d060      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x15a>
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d867      	bhi.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d05c      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x15a>
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d05a      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x15a>
 8006c52:	e062      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c64:	f000 f990 	bl	8006f88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
      break;
 8006c80:	e04f      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c92:	f000 f979 	bl	8006f88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ca4:	609a      	str	r2, [r3, #8]
      break;
 8006ca6:	e03c      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f000 f8ed 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2150      	movs	r1, #80	@ 0x50
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f946 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006cc6:	e02c      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f000 f90c 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2160      	movs	r1, #96	@ 0x60
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f936 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006ce6:	e01c      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f000 f8cd 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2140      	movs	r1, #64	@ 0x40
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f926 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d06:	e00c      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f000 f91d 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d18:	e003      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1e:	e000      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a46      	ldr	r2, [pc, #280]	@ (8006e68 <TIM_Base_SetConfig+0x12c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5a:	d00f      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a43      	ldr	r2, [pc, #268]	@ (8006e6c <TIM_Base_SetConfig+0x130>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00b      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a42      	ldr	r2, [pc, #264]	@ (8006e70 <TIM_Base_SetConfig+0x134>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a41      	ldr	r2, [pc, #260]	@ (8006e74 <TIM_Base_SetConfig+0x138>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a40      	ldr	r2, [pc, #256]	@ (8006e78 <TIM_Base_SetConfig+0x13c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a35      	ldr	r2, [pc, #212]	@ (8006e68 <TIM_Base_SetConfig+0x12c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d02b      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9c:	d027      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a32      	ldr	r2, [pc, #200]	@ (8006e6c <TIM_Base_SetConfig+0x130>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d023      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a31      	ldr	r2, [pc, #196]	@ (8006e70 <TIM_Base_SetConfig+0x134>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01f      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a30      	ldr	r2, [pc, #192]	@ (8006e74 <TIM_Base_SetConfig+0x138>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01b      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <TIM_Base_SetConfig+0x13c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d017      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8006e7c <TIM_Base_SetConfig+0x140>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8006e80 <TIM_Base_SetConfig+0x144>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00f      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e84 <TIM_Base_SetConfig+0x148>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00b      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e88 <TIM_Base_SetConfig+0x14c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e8c <TIM_Base_SetConfig+0x150>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a29      	ldr	r2, [pc, #164]	@ (8006e90 <TIM_Base_SetConfig+0x154>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d108      	bne.n	8006e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a10      	ldr	r2, [pc, #64]	@ (8006e68 <TIM_Base_SetConfig+0x12c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_Base_SetConfig+0xf8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a12      	ldr	r2, [pc, #72]	@ (8006e78 <TIM_Base_SetConfig+0x13c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d103      	bne.n	8006e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	611a      	str	r2, [r3, #16]
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f023 0210 	bic.w	r2, r3, #16
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	021a      	lsls	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e05a      	b.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d022      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702c:	d01d      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1d      	ldr	r2, [pc, #116]	@ (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d018      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1b      	ldr	r2, [pc, #108]	@ (80070ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1a      	ldr	r2, [pc, #104]	@ (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00e      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a18      	ldr	r2, [pc, #96]	@ (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d009      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a17      	ldr	r2, [pc, #92]	@ (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d004      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a15      	ldr	r2, [pc, #84]	@ (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d10c      	bne.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4313      	orrs	r3, r2
 800707a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40010400 	.word	0x40010400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40001800 	.word	0x40001800

080070c0 <findslot>:
 80070c0:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <findslot+0x2c>)
 80070c2:	b510      	push	{r4, lr}
 80070c4:	4604      	mov	r4, r0
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	b118      	cbz	r0, 80070d2 <findslot+0x12>
 80070ca:	6a03      	ldr	r3, [r0, #32]
 80070cc:	b90b      	cbnz	r3, 80070d2 <findslot+0x12>
 80070ce:	f000 fb19 	bl	8007704 <__sinit>
 80070d2:	2c13      	cmp	r4, #19
 80070d4:	d807      	bhi.n	80070e6 <findslot+0x26>
 80070d6:	4806      	ldr	r0, [pc, #24]	@ (80070f0 <findslot+0x30>)
 80070d8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80070dc:	3201      	adds	r2, #1
 80070de:	d002      	beq.n	80070e6 <findslot+0x26>
 80070e0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7fc      	b.n	80070e4 <findslot+0x24>
 80070ea:	bf00      	nop
 80070ec:	20000030 	.word	0x20000030
 80070f0:	20025cbc 	.word	0x20025cbc

080070f4 <error>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	f000 fcf0 	bl	8007adc <__errno>
 80070fc:	2613      	movs	r6, #19
 80070fe:	4605      	mov	r5, r0
 8007100:	2700      	movs	r7, #0
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	beab      	bkpt	0x00ab
 8007108:	4606      	mov	r6, r0
 800710a:	602e      	str	r6, [r5, #0]
 800710c:	4620      	mov	r0, r4
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007110 <checkerror>:
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d101      	bne.n	8007118 <checkerror+0x8>
 8007114:	f7ff bfee 	b.w	80070f4 <error>
 8007118:	4770      	bx	lr

0800711a <_swiread>:
 800711a:	b530      	push	{r4, r5, lr}
 800711c:	b085      	sub	sp, #20
 800711e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007122:	9203      	str	r2, [sp, #12]
 8007124:	2406      	movs	r4, #6
 8007126:	ad01      	add	r5, sp, #4
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	beab      	bkpt	0x00ab
 800712e:	4604      	mov	r4, r0
 8007130:	4620      	mov	r0, r4
 8007132:	f7ff ffed 	bl	8007110 <checkerror>
 8007136:	b005      	add	sp, #20
 8007138:	bd30      	pop	{r4, r5, pc}

0800713a <_read>:
 800713a:	b570      	push	{r4, r5, r6, lr}
 800713c:	460e      	mov	r6, r1
 800713e:	4614      	mov	r4, r2
 8007140:	f7ff ffbe 	bl	80070c0 <findslot>
 8007144:	4605      	mov	r5, r0
 8007146:	b930      	cbnz	r0, 8007156 <_read+0x1c>
 8007148:	f000 fcc8 	bl	8007adc <__errno>
 800714c:	2309      	movs	r3, #9
 800714e:	6003      	str	r3, [r0, #0]
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	4622      	mov	r2, r4
 800715a:	4631      	mov	r1, r6
 800715c:	f7ff ffdd 	bl	800711a <_swiread>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d0f5      	beq.n	8007150 <_read+0x16>
 8007164:	686b      	ldr	r3, [r5, #4]
 8007166:	1a20      	subs	r0, r4, r0
 8007168:	4403      	add	r3, r0
 800716a:	606b      	str	r3, [r5, #4]
 800716c:	e7f2      	b.n	8007154 <_read+0x1a>

0800716e <_swilseek>:
 800716e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007170:	460c      	mov	r4, r1
 8007172:	4616      	mov	r6, r2
 8007174:	f7ff ffa4 	bl	80070c0 <findslot>
 8007178:	4605      	mov	r5, r0
 800717a:	b940      	cbnz	r0, 800718e <_swilseek+0x20>
 800717c:	f000 fcae 	bl	8007adc <__errno>
 8007180:	2309      	movs	r3, #9
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	f04f 34ff 	mov.w	r4, #4294967295
 8007188:	4620      	mov	r0, r4
 800718a:	b003      	add	sp, #12
 800718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718e:	2e02      	cmp	r6, #2
 8007190:	d903      	bls.n	800719a <_swilseek+0x2c>
 8007192:	f000 fca3 	bl	8007adc <__errno>
 8007196:	2316      	movs	r3, #22
 8007198:	e7f3      	b.n	8007182 <_swilseek+0x14>
 800719a:	2e01      	cmp	r6, #1
 800719c:	d112      	bne.n	80071c4 <_swilseek+0x56>
 800719e:	6843      	ldr	r3, [r0, #4]
 80071a0:	18e4      	adds	r4, r4, r3
 80071a2:	d4f6      	bmi.n	8007192 <_swilseek+0x24>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	260a      	movs	r6, #10
 80071a8:	e9cd 3400 	strd	r3, r4, [sp]
 80071ac:	466f      	mov	r7, sp
 80071ae:	4630      	mov	r0, r6
 80071b0:	4639      	mov	r1, r7
 80071b2:	beab      	bkpt	0x00ab
 80071b4:	4606      	mov	r6, r0
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ffaa 	bl	8007110 <checkerror>
 80071bc:	2800      	cmp	r0, #0
 80071be:	dbe1      	blt.n	8007184 <_swilseek+0x16>
 80071c0:	606c      	str	r4, [r5, #4]
 80071c2:	e7e1      	b.n	8007188 <_swilseek+0x1a>
 80071c4:	2e02      	cmp	r6, #2
 80071c6:	6803      	ldr	r3, [r0, #0]
 80071c8:	d1ec      	bne.n	80071a4 <_swilseek+0x36>
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	260c      	movs	r6, #12
 80071ce:	466f      	mov	r7, sp
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	beab      	bkpt	0x00ab
 80071d6:	4606      	mov	r6, r0
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff ff99 	bl	8007110 <checkerror>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d0d0      	beq.n	8007184 <_swilseek+0x16>
 80071e2:	4404      	add	r4, r0
 80071e4:	e7de      	b.n	80071a4 <_swilseek+0x36>

080071e6 <_lseek>:
 80071e6:	f7ff bfc2 	b.w	800716e <_swilseek>

080071ea <_swiwrite>:
 80071ea:	b530      	push	{r4, r5, lr}
 80071ec:	b085      	sub	sp, #20
 80071ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80071f2:	9203      	str	r2, [sp, #12]
 80071f4:	2405      	movs	r4, #5
 80071f6:	ad01      	add	r5, sp, #4
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	beab      	bkpt	0x00ab
 80071fe:	4604      	mov	r4, r0
 8007200:	4620      	mov	r0, r4
 8007202:	f7ff ff85 	bl	8007110 <checkerror>
 8007206:	b005      	add	sp, #20
 8007208:	bd30      	pop	{r4, r5, pc}

0800720a <_write>:
 800720a:	b570      	push	{r4, r5, r6, lr}
 800720c:	460e      	mov	r6, r1
 800720e:	4615      	mov	r5, r2
 8007210:	f7ff ff56 	bl	80070c0 <findslot>
 8007214:	4604      	mov	r4, r0
 8007216:	b930      	cbnz	r0, 8007226 <_write+0x1c>
 8007218:	f000 fc60 	bl	8007adc <__errno>
 800721c:	2309      	movs	r3, #9
 800721e:	6003      	str	r3, [r0, #0]
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	6800      	ldr	r0, [r0, #0]
 8007228:	462a      	mov	r2, r5
 800722a:	4631      	mov	r1, r6
 800722c:	f7ff ffdd 	bl	80071ea <_swiwrite>
 8007230:	1e03      	subs	r3, r0, #0
 8007232:	dbf5      	blt.n	8007220 <_write+0x16>
 8007234:	6862      	ldr	r2, [r4, #4]
 8007236:	1ae8      	subs	r0, r5, r3
 8007238:	4402      	add	r2, r0
 800723a:	42ab      	cmp	r3, r5
 800723c:	6062      	str	r2, [r4, #4]
 800723e:	d1f1      	bne.n	8007224 <_write+0x1a>
 8007240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007244:	2000      	movs	r0, #0
 8007246:	f7ff bf55 	b.w	80070f4 <error>

0800724a <_swiclose>:
 800724a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724c:	2402      	movs	r4, #2
 800724e:	9001      	str	r0, [sp, #4]
 8007250:	ad01      	add	r5, sp, #4
 8007252:	4620      	mov	r0, r4
 8007254:	4629      	mov	r1, r5
 8007256:	beab      	bkpt	0x00ab
 8007258:	4604      	mov	r4, r0
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff ff58 	bl	8007110 <checkerror>
 8007260:	b003      	add	sp, #12
 8007262:	bd30      	pop	{r4, r5, pc}

08007264 <_close>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4605      	mov	r5, r0
 8007268:	f7ff ff2a 	bl	80070c0 <findslot>
 800726c:	4604      	mov	r4, r0
 800726e:	b930      	cbnz	r0, 800727e <_close+0x1a>
 8007270:	f000 fc34 	bl	8007adc <__errno>
 8007274:	2309      	movs	r3, #9
 8007276:	6003      	str	r3, [r0, #0]
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	3d01      	subs	r5, #1
 8007280:	2d01      	cmp	r5, #1
 8007282:	d809      	bhi.n	8007298 <_close+0x34>
 8007284:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <_close+0x40>)
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	d104      	bne.n	8007298 <_close+0x34>
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	2000      	movs	r0, #0
 8007296:	e7f1      	b.n	800727c <_close+0x18>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	f7ff ffd6 	bl	800724a <_swiclose>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0f5      	beq.n	800728e <_close+0x2a>
 80072a2:	e7eb      	b.n	800727c <_close+0x18>
 80072a4:	20025cbc 	.word	0x20025cbc

080072a8 <_swistat>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	f7ff ff08 	bl	80070c0 <findslot>
 80072b0:	4605      	mov	r5, r0
 80072b2:	b930      	cbnz	r0, 80072c2 <_swistat+0x1a>
 80072b4:	f000 fc12 	bl	8007adc <__errno>
 80072b8:	2309      	movs	r3, #9
 80072ba:	6003      	str	r3, [r0, #0]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	bd70      	pop	{r4, r5, r6, pc}
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80072c8:	6063      	str	r3, [r4, #4]
 80072ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072ce:	64a3      	str	r3, [r4, #72]	@ 0x48
 80072d0:	260c      	movs	r6, #12
 80072d2:	4630      	mov	r0, r6
 80072d4:	4629      	mov	r1, r5
 80072d6:	beab      	bkpt	0x00ab
 80072d8:	4605      	mov	r5, r0
 80072da:	4628      	mov	r0, r5
 80072dc:	f7ff ff18 	bl	8007110 <checkerror>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d0eb      	beq.n	80072bc <_swistat+0x14>
 80072e4:	6120      	str	r0, [r4, #16]
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7ea      	b.n	80072c0 <_swistat+0x18>

080072ea <_fstat>:
 80072ea:	460b      	mov	r3, r1
 80072ec:	b510      	push	{r4, lr}
 80072ee:	2100      	movs	r1, #0
 80072f0:	4604      	mov	r4, r0
 80072f2:	2258      	movs	r2, #88	@ 0x58
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fba3 	bl	8007a40 <memset>
 80072fa:	4601      	mov	r1, r0
 80072fc:	4620      	mov	r0, r4
 80072fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007302:	f7ff bfd1 	b.w	80072a8 <_swistat>

08007306 <_stat>:
 8007306:	b538      	push	{r3, r4, r5, lr}
 8007308:	460d      	mov	r5, r1
 800730a:	4604      	mov	r4, r0
 800730c:	2258      	movs	r2, #88	@ 0x58
 800730e:	2100      	movs	r1, #0
 8007310:	4628      	mov	r0, r5
 8007312:	f000 fb95 	bl	8007a40 <memset>
 8007316:	4620      	mov	r0, r4
 8007318:	2100      	movs	r1, #0
 800731a:	f000 f811 	bl	8007340 <_swiopen>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	4604      	mov	r4, r0
 8007322:	d00b      	beq.n	800733c <_stat+0x36>
 8007324:	686b      	ldr	r3, [r5, #4]
 8007326:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800732a:	606b      	str	r3, [r5, #4]
 800732c:	4629      	mov	r1, r5
 800732e:	f7ff ffbb 	bl	80072a8 <_swistat>
 8007332:	4605      	mov	r5, r0
 8007334:	4620      	mov	r0, r4
 8007336:	f7ff ff95 	bl	8007264 <_close>
 800733a:	462c      	mov	r4, r5
 800733c:	4620      	mov	r0, r4
 800733e:	bd38      	pop	{r3, r4, r5, pc}

08007340 <_swiopen>:
 8007340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	4f29      	ldr	r7, [pc, #164]	@ (80073ec <_swiopen+0xac>)
 8007346:	b096      	sub	sp, #88	@ 0x58
 8007348:	4682      	mov	sl, r0
 800734a:	460e      	mov	r6, r1
 800734c:	2400      	movs	r4, #0
 800734e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007352:	3301      	adds	r3, #1
 8007354:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007358:	d00c      	beq.n	8007374 <_swiopen+0x34>
 800735a:	3401      	adds	r4, #1
 800735c:	2c14      	cmp	r4, #20
 800735e:	d1f6      	bne.n	800734e <_swiopen+0xe>
 8007360:	f000 fbbc 	bl	8007adc <__errno>
 8007364:	2318      	movs	r3, #24
 8007366:	6003      	str	r3, [r0, #0]
 8007368:	f04f 34ff 	mov.w	r4, #4294967295
 800736c:	4620      	mov	r0, r4
 800736e:	b016      	add	sp, #88	@ 0x58
 8007370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007374:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007378:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800737c:	46e9      	mov	r9, sp
 800737e:	d109      	bne.n	8007394 <_swiopen+0x54>
 8007380:	4649      	mov	r1, r9
 8007382:	4650      	mov	r0, sl
 8007384:	f7ff ffbf 	bl	8007306 <_stat>
 8007388:	3001      	adds	r0, #1
 800738a:	d003      	beq.n	8007394 <_swiopen+0x54>
 800738c:	f000 fba6 	bl	8007adc <__errno>
 8007390:	2311      	movs	r3, #17
 8007392:	e7e8      	b.n	8007366 <_swiopen+0x26>
 8007394:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007398:	f240 6301 	movw	r3, #1537	@ 0x601
 800739c:	07b2      	lsls	r2, r6, #30
 800739e:	bf48      	it	mi
 80073a0:	f045 0502 	orrmi.w	r5, r5, #2
 80073a4:	421e      	tst	r6, r3
 80073a6:	bf18      	it	ne
 80073a8:	f045 0504 	orrne.w	r5, r5, #4
 80073ac:	0733      	lsls	r3, r6, #28
 80073ae:	bf48      	it	mi
 80073b0:	f025 0504 	bicmi.w	r5, r5, #4
 80073b4:	4650      	mov	r0, sl
 80073b6:	bf48      	it	mi
 80073b8:	f045 0508 	orrmi.w	r5, r5, #8
 80073bc:	f8cd a000 	str.w	sl, [sp]
 80073c0:	f7f8 ff16 	bl	80001f0 <strlen>
 80073c4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80073c8:	2501      	movs	r5, #1
 80073ca:	4628      	mov	r0, r5
 80073cc:	4649      	mov	r1, r9
 80073ce:	beab      	bkpt	0x00ab
 80073d0:	4605      	mov	r5, r0
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	db05      	blt.n	80073e2 <_swiopen+0xa2>
 80073d6:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80073da:	4447      	add	r7, r8
 80073dc:	2300      	movs	r3, #0
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e7c4      	b.n	800736c <_swiopen+0x2c>
 80073e2:	4628      	mov	r0, r5
 80073e4:	f7ff fe86 	bl	80070f4 <error>
 80073e8:	4604      	mov	r4, r0
 80073ea:	e7bf      	b.n	800736c <_swiopen+0x2c>
 80073ec:	20025cbc 	.word	0x20025cbc

080073f0 <_get_semihosting_exts>:
 80073f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4606      	mov	r6, r0
 80073f6:	460f      	mov	r7, r1
 80073f8:	4829      	ldr	r0, [pc, #164]	@ (80074a0 <_get_semihosting_exts+0xb0>)
 80073fa:	2100      	movs	r1, #0
 80073fc:	4615      	mov	r5, r2
 80073fe:	f7ff ff9f 	bl	8007340 <_swiopen>
 8007402:	462a      	mov	r2, r5
 8007404:	4604      	mov	r4, r0
 8007406:	2100      	movs	r1, #0
 8007408:	4630      	mov	r0, r6
 800740a:	f000 fb19 	bl	8007a40 <memset>
 800740e:	1c63      	adds	r3, r4, #1
 8007410:	d014      	beq.n	800743c <_get_semihosting_exts+0x4c>
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff fe54 	bl	80070c0 <findslot>
 8007418:	f04f 080c 	mov.w	r8, #12
 800741c:	4681      	mov	r9, r0
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	beab      	bkpt	0x00ab
 8007424:	4680      	mov	r8, r0
 8007426:	4640      	mov	r0, r8
 8007428:	f7ff fe72 	bl	8007110 <checkerror>
 800742c:	2803      	cmp	r0, #3
 800742e:	dd02      	ble.n	8007436 <_get_semihosting_exts+0x46>
 8007430:	1ec3      	subs	r3, r0, #3
 8007432:	42ab      	cmp	r3, r5
 8007434:	dc07      	bgt.n	8007446 <_get_semihosting_exts+0x56>
 8007436:	4620      	mov	r0, r4
 8007438:	f7ff ff14 	bl	8007264 <_close>
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	b003      	add	sp, #12
 8007442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007446:	2204      	movs	r2, #4
 8007448:	eb0d 0102 	add.w	r1, sp, r2
 800744c:	4620      	mov	r0, r4
 800744e:	f7ff fe74 	bl	800713a <_read>
 8007452:	2803      	cmp	r0, #3
 8007454:	ddef      	ble.n	8007436 <_get_semihosting_exts+0x46>
 8007456:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800745a:	2b53      	cmp	r3, #83	@ 0x53
 800745c:	d1eb      	bne.n	8007436 <_get_semihosting_exts+0x46>
 800745e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007462:	2b48      	cmp	r3, #72	@ 0x48
 8007464:	d1e7      	bne.n	8007436 <_get_semihosting_exts+0x46>
 8007466:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800746a:	2b46      	cmp	r3, #70	@ 0x46
 800746c:	d1e3      	bne.n	8007436 <_get_semihosting_exts+0x46>
 800746e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007472:	2b42      	cmp	r3, #66	@ 0x42
 8007474:	d1df      	bne.n	8007436 <_get_semihosting_exts+0x46>
 8007476:	2201      	movs	r2, #1
 8007478:	4639      	mov	r1, r7
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff fe77 	bl	800716e <_swilseek>
 8007480:	2800      	cmp	r0, #0
 8007482:	dbd8      	blt.n	8007436 <_get_semihosting_exts+0x46>
 8007484:	462a      	mov	r2, r5
 8007486:	4631      	mov	r1, r6
 8007488:	4620      	mov	r0, r4
 800748a:	f7ff fe56 	bl	800713a <_read>
 800748e:	4605      	mov	r5, r0
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fee7 	bl	8007264 <_close>
 8007496:	4628      	mov	r0, r5
 8007498:	f7ff fe3a 	bl	8007110 <checkerror>
 800749c:	e7d0      	b.n	8007440 <_get_semihosting_exts+0x50>
 800749e:	bf00      	nop
 80074a0:	08009c7c 	.word	0x08009c7c

080074a4 <initialise_semihosting_exts>:
 80074a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a6:	4d0a      	ldr	r5, [pc, #40]	@ (80074d0 <initialise_semihosting_exts+0x2c>)
 80074a8:	4c0a      	ldr	r4, [pc, #40]	@ (80074d4 <initialise_semihosting_exts+0x30>)
 80074aa:	2100      	movs	r1, #0
 80074ac:	2201      	movs	r2, #1
 80074ae:	a801      	add	r0, sp, #4
 80074b0:	6029      	str	r1, [r5, #0]
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	f7ff ff9c 	bl	80073f0 <_get_semihosting_exts>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	dd07      	ble.n	80074cc <initialise_semihosting_exts+0x28>
 80074bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80074c0:	f003 0201 	and.w	r2, r3, #1
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	b003      	add	sp, #12
 80074ce:	bd30      	pop	{r4, r5, pc}
 80074d0:	20000020 	.word	0x20000020
 80074d4:	2000001c 	.word	0x2000001c

080074d8 <_has_ext_stdout_stderr>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	4c04      	ldr	r4, [pc, #16]	@ (80074ec <_has_ext_stdout_stderr+0x14>)
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da01      	bge.n	80074e6 <_has_ext_stdout_stderr+0xe>
 80074e2:	f7ff ffdf 	bl	80074a4 <initialise_semihosting_exts>
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	bf00      	nop
 80074ec:	2000001c 	.word	0x2000001c

080074f0 <initialise_monitor_handles>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b085      	sub	sp, #20
 80074f6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80075a8 <initialise_monitor_handles+0xb8>
 80074fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80074fe:	2303      	movs	r3, #3
 8007500:	2400      	movs	r4, #0
 8007502:	9303      	str	r3, [sp, #12]
 8007504:	af01      	add	r7, sp, #4
 8007506:	9402      	str	r4, [sp, #8]
 8007508:	2501      	movs	r5, #1
 800750a:	4628      	mov	r0, r5
 800750c:	4639      	mov	r1, r7
 800750e:	beab      	bkpt	0x00ab
 8007510:	4605      	mov	r5, r0
 8007512:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80075ac <initialise_monitor_handles+0xbc>
 8007516:	4623      	mov	r3, r4
 8007518:	4c20      	ldr	r4, [pc, #128]	@ (800759c <initialise_monitor_handles+0xac>)
 800751a:	f8c8 5000 	str.w	r5, [r8]
 800751e:	f04f 32ff 	mov.w	r2, #4294967295
 8007522:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007526:	3301      	adds	r3, #1
 8007528:	2b14      	cmp	r3, #20
 800752a:	d1fa      	bne.n	8007522 <initialise_monitor_handles+0x32>
 800752c:	f7ff ffd4 	bl	80074d8 <_has_ext_stdout_stderr>
 8007530:	4d1b      	ldr	r5, [pc, #108]	@ (80075a0 <initialise_monitor_handles+0xb0>)
 8007532:	b1d0      	cbz	r0, 800756a <initialise_monitor_handles+0x7a>
 8007534:	f04f 0a03 	mov.w	sl, #3
 8007538:	2304      	movs	r3, #4
 800753a:	f8cd 9004 	str.w	r9, [sp, #4]
 800753e:	2601      	movs	r6, #1
 8007540:	f8cd a00c 	str.w	sl, [sp, #12]
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	beab      	bkpt	0x00ab
 800754c:	4683      	mov	fp, r0
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <initialise_monitor_handles+0xb4>)
 8007550:	f8cd 9004 	str.w	r9, [sp, #4]
 8007554:	f8c3 b000 	str.w	fp, [r3]
 8007558:	2308      	movs	r3, #8
 800755a:	f8cd a00c 	str.w	sl, [sp, #12]
 800755e:	9302      	str	r3, [sp, #8]
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	beab      	bkpt	0x00ab
 8007566:	4606      	mov	r6, r0
 8007568:	602e      	str	r6, [r5, #0]
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	bf02      	ittt	eq
 8007570:	4b0c      	ldreq	r3, [pc, #48]	@ (80075a4 <initialise_monitor_handles+0xb4>)
 8007572:	681b      	ldreq	r3, [r3, #0]
 8007574:	602b      	streq	r3, [r5, #0]
 8007576:	2600      	movs	r6, #0
 8007578:	f8d8 3000 	ldr.w	r3, [r8]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	6066      	str	r6, [r4, #4]
 8007580:	f7ff ffaa 	bl	80074d8 <_has_ext_stdout_stderr>
 8007584:	b130      	cbz	r0, 8007594 <initialise_monitor_handles+0xa4>
 8007586:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <initialise_monitor_handles+0xb4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007594:	b005      	add	sp, #20
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	bf00      	nop
 800759c:	20025cbc 	.word	0x20025cbc
 80075a0:	20025cb0 	.word	0x20025cb0
 80075a4:	20025cb4 	.word	0x20025cb4
 80075a8:	08009c92 	.word	0x08009c92
 80075ac:	20025cb8 	.word	0x20025cb8

080075b0 <_isatty>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	f7ff fd85 	bl	80070c0 <findslot>
 80075b6:	2409      	movs	r4, #9
 80075b8:	4605      	mov	r5, r0
 80075ba:	b920      	cbnz	r0, 80075c6 <_isatty+0x16>
 80075bc:	f000 fa8e 	bl	8007adc <__errno>
 80075c0:	6004      	str	r4, [r0, #0]
 80075c2:	2000      	movs	r0, #0
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	beab      	bkpt	0x00ab
 80075cc:	4604      	mov	r4, r0
 80075ce:	2c01      	cmp	r4, #1
 80075d0:	4620      	mov	r0, r4
 80075d2:	d0f7      	beq.n	80075c4 <_isatty+0x14>
 80075d4:	f000 fa82 	bl	8007adc <__errno>
 80075d8:	2513      	movs	r5, #19
 80075da:	4604      	mov	r4, r0
 80075dc:	2600      	movs	r6, #0
 80075de:	4628      	mov	r0, r5
 80075e0:	4631      	mov	r1, r6
 80075e2:	beab      	bkpt	0x00ab
 80075e4:	4605      	mov	r5, r0
 80075e6:	6025      	str	r5, [r4, #0]
 80075e8:	e7eb      	b.n	80075c2 <_isatty+0x12>
	...

080075ec <std>:
 80075ec:	2300      	movs	r3, #0
 80075ee:	b510      	push	{r4, lr}
 80075f0:	4604      	mov	r4, r0
 80075f2:	e9c0 3300 	strd	r3, r3, [r0]
 80075f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075fa:	6083      	str	r3, [r0, #8]
 80075fc:	8181      	strh	r1, [r0, #12]
 80075fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007600:	81c2      	strh	r2, [r0, #14]
 8007602:	6183      	str	r3, [r0, #24]
 8007604:	4619      	mov	r1, r3
 8007606:	2208      	movs	r2, #8
 8007608:	305c      	adds	r0, #92	@ 0x5c
 800760a:	f000 fa19 	bl	8007a40 <memset>
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <std+0x58>)
 8007610:	6263      	str	r3, [r4, #36]	@ 0x24
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <std+0x5c>)
 8007614:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <std+0x60>)
 8007618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <std+0x64>)
 800761c:	6323      	str	r3, [r4, #48]	@ 0x30
 800761e:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <std+0x68>)
 8007620:	6224      	str	r4, [r4, #32]
 8007622:	429c      	cmp	r4, r3
 8007624:	d006      	beq.n	8007634 <std+0x48>
 8007626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800762a:	4294      	cmp	r4, r2
 800762c:	d002      	beq.n	8007634 <std+0x48>
 800762e:	33d0      	adds	r3, #208	@ 0xd0
 8007630:	429c      	cmp	r4, r3
 8007632:	d105      	bne.n	8007640 <std+0x54>
 8007634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763c:	f000 ba78 	b.w	8007b30 <__retarget_lock_init_recursive>
 8007640:	bd10      	pop	{r4, pc}
 8007642:	bf00      	nop
 8007644:	08007891 	.word	0x08007891
 8007648:	080078b3 	.word	0x080078b3
 800764c:	080078eb 	.word	0x080078eb
 8007650:	0800790f 	.word	0x0800790f
 8007654:	20025d5c 	.word	0x20025d5c

08007658 <stdio_exit_handler>:
 8007658:	4a02      	ldr	r2, [pc, #8]	@ (8007664 <stdio_exit_handler+0xc>)
 800765a:	4903      	ldr	r1, [pc, #12]	@ (8007668 <stdio_exit_handler+0x10>)
 800765c:	4803      	ldr	r0, [pc, #12]	@ (800766c <stdio_exit_handler+0x14>)
 800765e:	f000 b869 	b.w	8007734 <_fwalk_sglue>
 8007662:	bf00      	nop
 8007664:	20000024 	.word	0x20000024
 8007668:	08008681 	.word	0x08008681
 800766c:	20000034 	.word	0x20000034

08007670 <cleanup_stdio>:
 8007670:	6841      	ldr	r1, [r0, #4]
 8007672:	4b0c      	ldr	r3, [pc, #48]	@ (80076a4 <cleanup_stdio+0x34>)
 8007674:	4299      	cmp	r1, r3
 8007676:	b510      	push	{r4, lr}
 8007678:	4604      	mov	r4, r0
 800767a:	d001      	beq.n	8007680 <cleanup_stdio+0x10>
 800767c:	f001 f800 	bl	8008680 <_fflush_r>
 8007680:	68a1      	ldr	r1, [r4, #8]
 8007682:	4b09      	ldr	r3, [pc, #36]	@ (80076a8 <cleanup_stdio+0x38>)
 8007684:	4299      	cmp	r1, r3
 8007686:	d002      	beq.n	800768e <cleanup_stdio+0x1e>
 8007688:	4620      	mov	r0, r4
 800768a:	f000 fff9 	bl	8008680 <_fflush_r>
 800768e:	68e1      	ldr	r1, [r4, #12]
 8007690:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <cleanup_stdio+0x3c>)
 8007692:	4299      	cmp	r1, r3
 8007694:	d004      	beq.n	80076a0 <cleanup_stdio+0x30>
 8007696:	4620      	mov	r0, r4
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f000 bff0 	b.w	8008680 <_fflush_r>
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	bf00      	nop
 80076a4:	20025d5c 	.word	0x20025d5c
 80076a8:	20025dc4 	.word	0x20025dc4
 80076ac:	20025e2c 	.word	0x20025e2c

080076b0 <global_stdio_init.part.0>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <global_stdio_init.part.0+0x30>)
 80076b4:	4c0b      	ldr	r4, [pc, #44]	@ (80076e4 <global_stdio_init.part.0+0x34>)
 80076b6:	4a0c      	ldr	r2, [pc, #48]	@ (80076e8 <global_stdio_init.part.0+0x38>)
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	4620      	mov	r0, r4
 80076bc:	2200      	movs	r2, #0
 80076be:	2104      	movs	r1, #4
 80076c0:	f7ff ff94 	bl	80075ec <std>
 80076c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076c8:	2201      	movs	r2, #1
 80076ca:	2109      	movs	r1, #9
 80076cc:	f7ff ff8e 	bl	80075ec <std>
 80076d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076d4:	2202      	movs	r2, #2
 80076d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076da:	2112      	movs	r1, #18
 80076dc:	f7ff bf86 	b.w	80075ec <std>
 80076e0:	20025e94 	.word	0x20025e94
 80076e4:	20025d5c 	.word	0x20025d5c
 80076e8:	08007659 	.word	0x08007659

080076ec <__sfp_lock_acquire>:
 80076ec:	4801      	ldr	r0, [pc, #4]	@ (80076f4 <__sfp_lock_acquire+0x8>)
 80076ee:	f000 ba20 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 80076f2:	bf00      	nop
 80076f4:	20025e9d 	.word	0x20025e9d

080076f8 <__sfp_lock_release>:
 80076f8:	4801      	ldr	r0, [pc, #4]	@ (8007700 <__sfp_lock_release+0x8>)
 80076fa:	f000 ba1b 	b.w	8007b34 <__retarget_lock_release_recursive>
 80076fe:	bf00      	nop
 8007700:	20025e9d 	.word	0x20025e9d

08007704 <__sinit>:
 8007704:	b510      	push	{r4, lr}
 8007706:	4604      	mov	r4, r0
 8007708:	f7ff fff0 	bl	80076ec <__sfp_lock_acquire>
 800770c:	6a23      	ldr	r3, [r4, #32]
 800770e:	b11b      	cbz	r3, 8007718 <__sinit+0x14>
 8007710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007714:	f7ff bff0 	b.w	80076f8 <__sfp_lock_release>
 8007718:	4b04      	ldr	r3, [pc, #16]	@ (800772c <__sinit+0x28>)
 800771a:	6223      	str	r3, [r4, #32]
 800771c:	4b04      	ldr	r3, [pc, #16]	@ (8007730 <__sinit+0x2c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1f5      	bne.n	8007710 <__sinit+0xc>
 8007724:	f7ff ffc4 	bl	80076b0 <global_stdio_init.part.0>
 8007728:	e7f2      	b.n	8007710 <__sinit+0xc>
 800772a:	bf00      	nop
 800772c:	08007671 	.word	0x08007671
 8007730:	20025e94 	.word	0x20025e94

08007734 <_fwalk_sglue>:
 8007734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007738:	4607      	mov	r7, r0
 800773a:	4688      	mov	r8, r1
 800773c:	4614      	mov	r4, r2
 800773e:	2600      	movs	r6, #0
 8007740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007744:	f1b9 0901 	subs.w	r9, r9, #1
 8007748:	d505      	bpl.n	8007756 <_fwalk_sglue+0x22>
 800774a:	6824      	ldr	r4, [r4, #0]
 800774c:	2c00      	cmp	r4, #0
 800774e:	d1f7      	bne.n	8007740 <_fwalk_sglue+0xc>
 8007750:	4630      	mov	r0, r6
 8007752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007756:	89ab      	ldrh	r3, [r5, #12]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d907      	bls.n	800776c <_fwalk_sglue+0x38>
 800775c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007760:	3301      	adds	r3, #1
 8007762:	d003      	beq.n	800776c <_fwalk_sglue+0x38>
 8007764:	4629      	mov	r1, r5
 8007766:	4638      	mov	r0, r7
 8007768:	47c0      	blx	r8
 800776a:	4306      	orrs	r6, r0
 800776c:	3568      	adds	r5, #104	@ 0x68
 800776e:	e7e9      	b.n	8007744 <_fwalk_sglue+0x10>

08007770 <iprintf>:
 8007770:	b40f      	push	{r0, r1, r2, r3}
 8007772:	b507      	push	{r0, r1, r2, lr}
 8007774:	4906      	ldr	r1, [pc, #24]	@ (8007790 <iprintf+0x20>)
 8007776:	ab04      	add	r3, sp, #16
 8007778:	6808      	ldr	r0, [r1, #0]
 800777a:	f853 2b04 	ldr.w	r2, [r3], #4
 800777e:	6881      	ldr	r1, [r0, #8]
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	f000 fc53 	bl	800802c <_vfiprintf_r>
 8007786:	b003      	add	sp, #12
 8007788:	f85d eb04 	ldr.w	lr, [sp], #4
 800778c:	b004      	add	sp, #16
 800778e:	4770      	bx	lr
 8007790:	20000030 	.word	0x20000030

08007794 <_puts_r>:
 8007794:	6a03      	ldr	r3, [r0, #32]
 8007796:	b570      	push	{r4, r5, r6, lr}
 8007798:	6884      	ldr	r4, [r0, #8]
 800779a:	4605      	mov	r5, r0
 800779c:	460e      	mov	r6, r1
 800779e:	b90b      	cbnz	r3, 80077a4 <_puts_r+0x10>
 80077a0:	f7ff ffb0 	bl	8007704 <__sinit>
 80077a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077a6:	07db      	lsls	r3, r3, #31
 80077a8:	d405      	bmi.n	80077b6 <_puts_r+0x22>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	0598      	lsls	r0, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_puts_r+0x22>
 80077b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077b2:	f000 f9be 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	0719      	lsls	r1, r3, #28
 80077ba:	d502      	bpl.n	80077c2 <_puts_r+0x2e>
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d135      	bne.n	800782e <_puts_r+0x9a>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 f8e5 	bl	8007994 <__swsetup_r>
 80077ca:	b380      	cbz	r0, 800782e <_puts_r+0x9a>
 80077cc:	f04f 35ff 	mov.w	r5, #4294967295
 80077d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077d2:	07da      	lsls	r2, r3, #31
 80077d4:	d405      	bmi.n	80077e2 <_puts_r+0x4e>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	059b      	lsls	r3, r3, #22
 80077da:	d402      	bmi.n	80077e2 <_puts_r+0x4e>
 80077dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077de:	f000 f9a9 	bl	8007b34 <__retarget_lock_release_recursive>
 80077e2:	4628      	mov	r0, r5
 80077e4:	bd70      	pop	{r4, r5, r6, pc}
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da04      	bge.n	80077f4 <_puts_r+0x60>
 80077ea:	69a2      	ldr	r2, [r4, #24]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	dc17      	bgt.n	8007820 <_puts_r+0x8c>
 80077f0:	290a      	cmp	r1, #10
 80077f2:	d015      	beq.n	8007820 <_puts_r+0x8c>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	6022      	str	r2, [r4, #0]
 80077fa:	7019      	strb	r1, [r3, #0]
 80077fc:	68a3      	ldr	r3, [r4, #8]
 80077fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007802:	3b01      	subs	r3, #1
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	2900      	cmp	r1, #0
 8007808:	d1ed      	bne.n	80077e6 <_puts_r+0x52>
 800780a:	2b00      	cmp	r3, #0
 800780c:	da11      	bge.n	8007832 <_puts_r+0x9e>
 800780e:	4622      	mov	r2, r4
 8007810:	210a      	movs	r1, #10
 8007812:	4628      	mov	r0, r5
 8007814:	f000 f87f 	bl	8007916 <__swbuf_r>
 8007818:	3001      	adds	r0, #1
 800781a:	d0d7      	beq.n	80077cc <_puts_r+0x38>
 800781c:	250a      	movs	r5, #10
 800781e:	e7d7      	b.n	80077d0 <_puts_r+0x3c>
 8007820:	4622      	mov	r2, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f877 	bl	8007916 <__swbuf_r>
 8007828:	3001      	adds	r0, #1
 800782a:	d1e7      	bne.n	80077fc <_puts_r+0x68>
 800782c:	e7ce      	b.n	80077cc <_puts_r+0x38>
 800782e:	3e01      	subs	r6, #1
 8007830:	e7e4      	b.n	80077fc <_puts_r+0x68>
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	6022      	str	r2, [r4, #0]
 8007838:	220a      	movs	r2, #10
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e7ee      	b.n	800781c <_puts_r+0x88>
	...

08007840 <puts>:
 8007840:	4b02      	ldr	r3, [pc, #8]	@ (800784c <puts+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f7ff bfa5 	b.w	8007794 <_puts_r>
 800784a:	bf00      	nop
 800784c:	20000030 	.word	0x20000030

08007850 <siprintf>:
 8007850:	b40e      	push	{r1, r2, r3}
 8007852:	b500      	push	{lr}
 8007854:	b09c      	sub	sp, #112	@ 0x70
 8007856:	ab1d      	add	r3, sp, #116	@ 0x74
 8007858:	9002      	str	r0, [sp, #8]
 800785a:	9006      	str	r0, [sp, #24]
 800785c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007860:	4809      	ldr	r0, [pc, #36]	@ (8007888 <siprintf+0x38>)
 8007862:	9107      	str	r1, [sp, #28]
 8007864:	9104      	str	r1, [sp, #16]
 8007866:	4909      	ldr	r1, [pc, #36]	@ (800788c <siprintf+0x3c>)
 8007868:	f853 2b04 	ldr.w	r2, [r3], #4
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	6800      	ldr	r0, [r0, #0]
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	a902      	add	r1, sp, #8
 8007874:	f000 fab4 	bl	8007de0 <_svfiprintf_r>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	b01c      	add	sp, #112	@ 0x70
 8007880:	f85d eb04 	ldr.w	lr, [sp], #4
 8007884:	b003      	add	sp, #12
 8007886:	4770      	bx	lr
 8007888:	20000030 	.word	0x20000030
 800788c:	ffff0208 	.word	0xffff0208

08007890 <__sread>:
 8007890:	b510      	push	{r4, lr}
 8007892:	460c      	mov	r4, r1
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	f000 f8fc 	bl	8007a94 <_read_r>
 800789c:	2800      	cmp	r0, #0
 800789e:	bfab      	itete	ge
 80078a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078a2:	89a3      	ldrhlt	r3, [r4, #12]
 80078a4:	181b      	addge	r3, r3, r0
 80078a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078aa:	bfac      	ite	ge
 80078ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078ae:	81a3      	strhlt	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__swrite>:
 80078b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b6:	461f      	mov	r7, r3
 80078b8:	898b      	ldrh	r3, [r1, #12]
 80078ba:	05db      	lsls	r3, r3, #23
 80078bc:	4605      	mov	r5, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	4616      	mov	r6, r2
 80078c2:	d505      	bpl.n	80078d0 <__swrite+0x1e>
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	2302      	movs	r3, #2
 80078ca:	2200      	movs	r2, #0
 80078cc:	f000 f8d0 	bl	8007a70 <_lseek_r>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	4632      	mov	r2, r6
 80078de:	463b      	mov	r3, r7
 80078e0:	4628      	mov	r0, r5
 80078e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	f000 b8e7 	b.w	8007ab8 <_write_r>

080078ea <__sseek>:
 80078ea:	b510      	push	{r4, lr}
 80078ec:	460c      	mov	r4, r1
 80078ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f2:	f000 f8bd 	bl	8007a70 <_lseek_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	bf15      	itete	ne
 80078fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007906:	81a3      	strheq	r3, [r4, #12]
 8007908:	bf18      	it	ne
 800790a:	81a3      	strhne	r3, [r4, #12]
 800790c:	bd10      	pop	{r4, pc}

0800790e <__sclose>:
 800790e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007912:	f000 b89d 	b.w	8007a50 <_close_r>

08007916 <__swbuf_r>:
 8007916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007918:	460e      	mov	r6, r1
 800791a:	4614      	mov	r4, r2
 800791c:	4605      	mov	r5, r0
 800791e:	b118      	cbz	r0, 8007928 <__swbuf_r+0x12>
 8007920:	6a03      	ldr	r3, [r0, #32]
 8007922:	b90b      	cbnz	r3, 8007928 <__swbuf_r+0x12>
 8007924:	f7ff feee 	bl	8007704 <__sinit>
 8007928:	69a3      	ldr	r3, [r4, #24]
 800792a:	60a3      	str	r3, [r4, #8]
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	071a      	lsls	r2, r3, #28
 8007930:	d501      	bpl.n	8007936 <__swbuf_r+0x20>
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	b943      	cbnz	r3, 8007948 <__swbuf_r+0x32>
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f000 f82b 	bl	8007994 <__swsetup_r>
 800793e:	b118      	cbz	r0, 8007948 <__swbuf_r+0x32>
 8007940:	f04f 37ff 	mov.w	r7, #4294967295
 8007944:	4638      	mov	r0, r7
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	6922      	ldr	r2, [r4, #16]
 800794c:	1a98      	subs	r0, r3, r2
 800794e:	6963      	ldr	r3, [r4, #20]
 8007950:	b2f6      	uxtb	r6, r6
 8007952:	4283      	cmp	r3, r0
 8007954:	4637      	mov	r7, r6
 8007956:	dc05      	bgt.n	8007964 <__swbuf_r+0x4e>
 8007958:	4621      	mov	r1, r4
 800795a:	4628      	mov	r0, r5
 800795c:	f000 fe90 	bl	8008680 <_fflush_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	d1ed      	bne.n	8007940 <__swbuf_r+0x2a>
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	3b01      	subs	r3, #1
 8007968:	60a3      	str	r3, [r4, #8]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	6022      	str	r2, [r4, #0]
 8007970:	701e      	strb	r6, [r3, #0]
 8007972:	6962      	ldr	r2, [r4, #20]
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	429a      	cmp	r2, r3
 8007978:	d004      	beq.n	8007984 <__swbuf_r+0x6e>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d5e1      	bpl.n	8007944 <__swbuf_r+0x2e>
 8007980:	2e0a      	cmp	r6, #10
 8007982:	d1df      	bne.n	8007944 <__swbuf_r+0x2e>
 8007984:	4621      	mov	r1, r4
 8007986:	4628      	mov	r0, r5
 8007988:	f000 fe7a 	bl	8008680 <_fflush_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	d0d9      	beq.n	8007944 <__swbuf_r+0x2e>
 8007990:	e7d6      	b.n	8007940 <__swbuf_r+0x2a>
	...

08007994 <__swsetup_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4b29      	ldr	r3, [pc, #164]	@ (8007a3c <__swsetup_r+0xa8>)
 8007998:	4605      	mov	r5, r0
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	460c      	mov	r4, r1
 800799e:	b118      	cbz	r0, 80079a8 <__swsetup_r+0x14>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <__swsetup_r+0x14>
 80079a4:	f7ff feae 	bl	8007704 <__sinit>
 80079a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ac:	0719      	lsls	r1, r3, #28
 80079ae:	d422      	bmi.n	80079f6 <__swsetup_r+0x62>
 80079b0:	06da      	lsls	r2, r3, #27
 80079b2:	d407      	bmi.n	80079c4 <__swsetup_r+0x30>
 80079b4:	2209      	movs	r2, #9
 80079b6:	602a      	str	r2, [r5, #0]
 80079b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	e033      	b.n	8007a2c <__swsetup_r+0x98>
 80079c4:	0758      	lsls	r0, r3, #29
 80079c6:	d512      	bpl.n	80079ee <__swsetup_r+0x5a>
 80079c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ca:	b141      	cbz	r1, 80079de <__swsetup_r+0x4a>
 80079cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d002      	beq.n	80079da <__swsetup_r+0x46>
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 f8af 	bl	8007b38 <_free_r>
 80079da:	2300      	movs	r3, #0
 80079dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	2300      	movs	r3, #0
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f043 0308 	orr.w	r3, r3, #8
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	b94b      	cbnz	r3, 8007a0e <__swsetup_r+0x7a>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a04:	d003      	beq.n	8007a0e <__swsetup_r+0x7a>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 fe87 	bl	800871c <__smakebuf_r>
 8007a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a12:	f013 0201 	ands.w	r2, r3, #1
 8007a16:	d00a      	beq.n	8007a2e <__swsetup_r+0x9a>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	60a2      	str	r2, [r4, #8]
 8007a1c:	6962      	ldr	r2, [r4, #20]
 8007a1e:	4252      	negs	r2, r2
 8007a20:	61a2      	str	r2, [r4, #24]
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	b942      	cbnz	r2, 8007a38 <__swsetup_r+0xa4>
 8007a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a2a:	d1c5      	bne.n	80079b8 <__swsetup_r+0x24>
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	0799      	lsls	r1, r3, #30
 8007a30:	bf58      	it	pl
 8007a32:	6962      	ldrpl	r2, [r4, #20]
 8007a34:	60a2      	str	r2, [r4, #8]
 8007a36:	e7f4      	b.n	8007a22 <__swsetup_r+0x8e>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e7f7      	b.n	8007a2c <__swsetup_r+0x98>
 8007a3c:	20000030 	.word	0x20000030

08007a40 <memset>:
 8007a40:	4402      	add	r2, r0
 8007a42:	4603      	mov	r3, r0
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d100      	bne.n	8007a4a <memset+0xa>
 8007a48:	4770      	bx	lr
 8007a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4e:	e7f9      	b.n	8007a44 <memset+0x4>

08007a50 <_close_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4d06      	ldr	r5, [pc, #24]	@ (8007a6c <_close_r+0x1c>)
 8007a54:	2300      	movs	r3, #0
 8007a56:	4604      	mov	r4, r0
 8007a58:	4608      	mov	r0, r1
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	f7ff fc02 	bl	8007264 <_close>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_close_r+0x1a>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_close_r+0x1a>
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	20025e98 	.word	0x20025e98

08007a70 <_lseek_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d07      	ldr	r5, [pc, #28]	@ (8007a90 <_lseek_r+0x20>)
 8007a74:	4604      	mov	r4, r0
 8007a76:	4608      	mov	r0, r1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	602a      	str	r2, [r5, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f7ff fbb1 	bl	80071e6 <_lseek>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_lseek_r+0x1e>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_lseek_r+0x1e>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20025e98 	.word	0x20025e98

08007a94 <_read_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	@ (8007ab4 <_read_r+0x20>)
 8007a98:	4604      	mov	r4, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7ff fb49 	bl	800713a <_read>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_read_r+0x1e>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_read_r+0x1e>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20025e98 	.word	0x20025e98

08007ab8 <_write_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	@ (8007ad8 <_write_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7ff fb9f 	bl	800720a <_write>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_write_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_write_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20025e98 	.word	0x20025e98

08007adc <__errno>:
 8007adc:	4b01      	ldr	r3, [pc, #4]	@ (8007ae4 <__errno+0x8>)
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000030 	.word	0x20000030

08007ae8 <__libc_init_array>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4d0d      	ldr	r5, [pc, #52]	@ (8007b20 <__libc_init_array+0x38>)
 8007aec:	4c0d      	ldr	r4, [pc, #52]	@ (8007b24 <__libc_init_array+0x3c>)
 8007aee:	1b64      	subs	r4, r4, r5
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	2600      	movs	r6, #0
 8007af4:	42a6      	cmp	r6, r4
 8007af6:	d109      	bne.n	8007b0c <__libc_init_array+0x24>
 8007af8:	4d0b      	ldr	r5, [pc, #44]	@ (8007b28 <__libc_init_array+0x40>)
 8007afa:	4c0c      	ldr	r4, [pc, #48]	@ (8007b2c <__libc_init_array+0x44>)
 8007afc:	f000 feda 	bl	80088b4 <_init>
 8007b00:	1b64      	subs	r4, r4, r5
 8007b02:	10a4      	asrs	r4, r4, #2
 8007b04:	2600      	movs	r6, #0
 8007b06:	42a6      	cmp	r6, r4
 8007b08:	d105      	bne.n	8007b16 <__libc_init_array+0x2e>
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b10:	4798      	blx	r3
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7ee      	b.n	8007af4 <__libc_init_array+0xc>
 8007b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1a:	4798      	blx	r3
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	e7f2      	b.n	8007b06 <__libc_init_array+0x1e>
 8007b20:	08009cd4 	.word	0x08009cd4
 8007b24:	08009cd4 	.word	0x08009cd4
 8007b28:	08009cd4 	.word	0x08009cd4
 8007b2c:	08009cd8 	.word	0x08009cd8

08007b30 <__retarget_lock_init_recursive>:
 8007b30:	4770      	bx	lr

08007b32 <__retarget_lock_acquire_recursive>:
 8007b32:	4770      	bx	lr

08007b34 <__retarget_lock_release_recursive>:
 8007b34:	4770      	bx	lr
	...

08007b38 <_free_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d041      	beq.n	8007bc4 <_free_r+0x8c>
 8007b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b44:	1f0c      	subs	r4, r1, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	18e4      	addlt	r4, r4, r3
 8007b4c:	f000 f8e0 	bl	8007d10 <__malloc_lock>
 8007b50:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc8 <_free_r+0x90>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	b933      	cbnz	r3, 8007b64 <_free_r+0x2c>
 8007b56:	6063      	str	r3, [r4, #4]
 8007b58:	6014      	str	r4, [r2, #0]
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b60:	f000 b8dc 	b.w	8007d1c <__malloc_unlock>
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	d908      	bls.n	8007b7a <_free_r+0x42>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	1821      	adds	r1, r4, r0
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	bf01      	itttt	eq
 8007b70:	6819      	ldreq	r1, [r3, #0]
 8007b72:	685b      	ldreq	r3, [r3, #4]
 8007b74:	1809      	addeq	r1, r1, r0
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	e7ed      	b.n	8007b56 <_free_r+0x1e>
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	b10b      	cbz	r3, 8007b84 <_free_r+0x4c>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d9fa      	bls.n	8007b7a <_free_r+0x42>
 8007b84:	6811      	ldr	r1, [r2, #0]
 8007b86:	1850      	adds	r0, r2, r1
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d10b      	bne.n	8007ba4 <_free_r+0x6c>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	4401      	add	r1, r0
 8007b90:	1850      	adds	r0, r2, r1
 8007b92:	4283      	cmp	r3, r0
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	d1e0      	bne.n	8007b5a <_free_r+0x22>
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	6053      	str	r3, [r2, #4]
 8007b9e:	4408      	add	r0, r1
 8007ba0:	6010      	str	r0, [r2, #0]
 8007ba2:	e7da      	b.n	8007b5a <_free_r+0x22>
 8007ba4:	d902      	bls.n	8007bac <_free_r+0x74>
 8007ba6:	230c      	movs	r3, #12
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	e7d6      	b.n	8007b5a <_free_r+0x22>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	1821      	adds	r1, r4, r0
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf04      	itt	eq
 8007bb4:	6819      	ldreq	r1, [r3, #0]
 8007bb6:	685b      	ldreq	r3, [r3, #4]
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	bf04      	itt	eq
 8007bbc:	1809      	addeq	r1, r1, r0
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	6054      	str	r4, [r2, #4]
 8007bc2:	e7ca      	b.n	8007b5a <_free_r+0x22>
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20025ea4 	.word	0x20025ea4

08007bcc <sbrk_aligned>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	4e0f      	ldr	r6, [pc, #60]	@ (8007c0c <sbrk_aligned+0x40>)
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	6831      	ldr	r1, [r6, #0]
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	b911      	cbnz	r1, 8007bde <sbrk_aligned+0x12>
 8007bd8:	f000 fe18 	bl	800880c <_sbrk_r>
 8007bdc:	6030      	str	r0, [r6, #0]
 8007bde:	4621      	mov	r1, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 fe13 	bl	800880c <_sbrk_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	d103      	bne.n	8007bf2 <sbrk_aligned+0x26>
 8007bea:	f04f 34ff 	mov.w	r4, #4294967295
 8007bee:	4620      	mov	r0, r4
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	1cc4      	adds	r4, r0, #3
 8007bf4:	f024 0403 	bic.w	r4, r4, #3
 8007bf8:	42a0      	cmp	r0, r4
 8007bfa:	d0f8      	beq.n	8007bee <sbrk_aligned+0x22>
 8007bfc:	1a21      	subs	r1, r4, r0
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 fe04 	bl	800880c <_sbrk_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d1f2      	bne.n	8007bee <sbrk_aligned+0x22>
 8007c08:	e7ef      	b.n	8007bea <sbrk_aligned+0x1e>
 8007c0a:	bf00      	nop
 8007c0c:	20025ea0 	.word	0x20025ea0

08007c10 <_malloc_r>:
 8007c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c14:	1ccd      	adds	r5, r1, #3
 8007c16:	f025 0503 	bic.w	r5, r5, #3
 8007c1a:	3508      	adds	r5, #8
 8007c1c:	2d0c      	cmp	r5, #12
 8007c1e:	bf38      	it	cc
 8007c20:	250c      	movcc	r5, #12
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	4606      	mov	r6, r0
 8007c26:	db01      	blt.n	8007c2c <_malloc_r+0x1c>
 8007c28:	42a9      	cmp	r1, r5
 8007c2a:	d904      	bls.n	8007c36 <_malloc_r+0x26>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	6033      	str	r3, [r6, #0]
 8007c30:	2000      	movs	r0, #0
 8007c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d0c <_malloc_r+0xfc>
 8007c3a:	f000 f869 	bl	8007d10 <__malloc_lock>
 8007c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c42:	461c      	mov	r4, r3
 8007c44:	bb44      	cbnz	r4, 8007c98 <_malloc_r+0x88>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7ff ffbf 	bl	8007bcc <sbrk_aligned>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	4604      	mov	r4, r0
 8007c52:	d158      	bne.n	8007d06 <_malloc_r+0xf6>
 8007c54:	f8d8 4000 	ldr.w	r4, [r8]
 8007c58:	4627      	mov	r7, r4
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	d143      	bne.n	8007ce6 <_malloc_r+0xd6>
 8007c5e:	2c00      	cmp	r4, #0
 8007c60:	d04b      	beq.n	8007cfa <_malloc_r+0xea>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	4639      	mov	r1, r7
 8007c66:	4630      	mov	r0, r6
 8007c68:	eb04 0903 	add.w	r9, r4, r3
 8007c6c:	f000 fdce 	bl	800880c <_sbrk_r>
 8007c70:	4581      	cmp	r9, r0
 8007c72:	d142      	bne.n	8007cfa <_malloc_r+0xea>
 8007c74:	6821      	ldr	r1, [r4, #0]
 8007c76:	1a6d      	subs	r5, r5, r1
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff ffa6 	bl	8007bcc <sbrk_aligned>
 8007c80:	3001      	adds	r0, #1
 8007c82:	d03a      	beq.n	8007cfa <_malloc_r+0xea>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	442b      	add	r3, r5
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	bb62      	cbnz	r2, 8007cec <_malloc_r+0xdc>
 8007c92:	f8c8 7000 	str.w	r7, [r8]
 8007c96:	e00f      	b.n	8007cb8 <_malloc_r+0xa8>
 8007c98:	6822      	ldr	r2, [r4, #0]
 8007c9a:	1b52      	subs	r2, r2, r5
 8007c9c:	d420      	bmi.n	8007ce0 <_malloc_r+0xd0>
 8007c9e:	2a0b      	cmp	r2, #11
 8007ca0:	d917      	bls.n	8007cd2 <_malloc_r+0xc2>
 8007ca2:	1961      	adds	r1, r4, r5
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	6025      	str	r5, [r4, #0]
 8007ca8:	bf18      	it	ne
 8007caa:	6059      	strne	r1, [r3, #4]
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	bf08      	it	eq
 8007cb0:	f8c8 1000 	streq.w	r1, [r8]
 8007cb4:	5162      	str	r2, [r4, r5]
 8007cb6:	604b      	str	r3, [r1, #4]
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 f82f 	bl	8007d1c <__malloc_unlock>
 8007cbe:	f104 000b 	add.w	r0, r4, #11
 8007cc2:	1d23      	adds	r3, r4, #4
 8007cc4:	f020 0007 	bic.w	r0, r0, #7
 8007cc8:	1ac2      	subs	r2, r0, r3
 8007cca:	bf1c      	itt	ne
 8007ccc:	1a1b      	subne	r3, r3, r0
 8007cce:	50a3      	strne	r3, [r4, r2]
 8007cd0:	e7af      	b.n	8007c32 <_malloc_r+0x22>
 8007cd2:	6862      	ldr	r2, [r4, #4]
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	bf0c      	ite	eq
 8007cd8:	f8c8 2000 	streq.w	r2, [r8]
 8007cdc:	605a      	strne	r2, [r3, #4]
 8007cde:	e7eb      	b.n	8007cb8 <_malloc_r+0xa8>
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	6864      	ldr	r4, [r4, #4]
 8007ce4:	e7ae      	b.n	8007c44 <_malloc_r+0x34>
 8007ce6:	463c      	mov	r4, r7
 8007ce8:	687f      	ldr	r7, [r7, #4]
 8007cea:	e7b6      	b.n	8007c5a <_malloc_r+0x4a>
 8007cec:	461a      	mov	r2, r3
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d1fb      	bne.n	8007cec <_malloc_r+0xdc>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6053      	str	r3, [r2, #4]
 8007cf8:	e7de      	b.n	8007cb8 <_malloc_r+0xa8>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f000 f80c 	bl	8007d1c <__malloc_unlock>
 8007d04:	e794      	b.n	8007c30 <_malloc_r+0x20>
 8007d06:	6005      	str	r5, [r0, #0]
 8007d08:	e7d6      	b.n	8007cb8 <_malloc_r+0xa8>
 8007d0a:	bf00      	nop
 8007d0c:	20025ea4 	.word	0x20025ea4

08007d10 <__malloc_lock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	@ (8007d18 <__malloc_lock+0x8>)
 8007d12:	f7ff bf0e 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	20025e9c 	.word	0x20025e9c

08007d1c <__malloc_unlock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	@ (8007d24 <__malloc_unlock+0x8>)
 8007d1e:	f7ff bf09 	b.w	8007b34 <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	20025e9c 	.word	0x20025e9c

08007d28 <__ssputs_r>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	688e      	ldr	r6, [r1, #8]
 8007d2e:	461f      	mov	r7, r3
 8007d30:	42be      	cmp	r6, r7
 8007d32:	680b      	ldr	r3, [r1, #0]
 8007d34:	4682      	mov	sl, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	4690      	mov	r8, r2
 8007d3a:	d82d      	bhi.n	8007d98 <__ssputs_r+0x70>
 8007d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d44:	d026      	beq.n	8007d94 <__ssputs_r+0x6c>
 8007d46:	6965      	ldr	r5, [r4, #20]
 8007d48:	6909      	ldr	r1, [r1, #16]
 8007d4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d4e:	eba3 0901 	sub.w	r9, r3, r1
 8007d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d56:	1c7b      	adds	r3, r7, #1
 8007d58:	444b      	add	r3, r9
 8007d5a:	106d      	asrs	r5, r5, #1
 8007d5c:	429d      	cmp	r5, r3
 8007d5e:	bf38      	it	cc
 8007d60:	461d      	movcc	r5, r3
 8007d62:	0553      	lsls	r3, r2, #21
 8007d64:	d527      	bpl.n	8007db6 <__ssputs_r+0x8e>
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7ff ff52 	bl	8007c10 <_malloc_r>
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	b360      	cbz	r0, 8007dca <__ssputs_r+0xa2>
 8007d70:	6921      	ldr	r1, [r4, #16]
 8007d72:	464a      	mov	r2, r9
 8007d74:	f000 fd5a 	bl	800882c <memcpy>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	6126      	str	r6, [r4, #16]
 8007d86:	6165      	str	r5, [r4, #20]
 8007d88:	444e      	add	r6, r9
 8007d8a:	eba5 0509 	sub.w	r5, r5, r9
 8007d8e:	6026      	str	r6, [r4, #0]
 8007d90:	60a5      	str	r5, [r4, #8]
 8007d92:	463e      	mov	r6, r7
 8007d94:	42be      	cmp	r6, r7
 8007d96:	d900      	bls.n	8007d9a <__ssputs_r+0x72>
 8007d98:	463e      	mov	r6, r7
 8007d9a:	6820      	ldr	r0, [r4, #0]
 8007d9c:	4632      	mov	r2, r6
 8007d9e:	4641      	mov	r1, r8
 8007da0:	f000 fcf8 	bl	8008794 <memmove>
 8007da4:	68a3      	ldr	r3, [r4, #8]
 8007da6:	1b9b      	subs	r3, r3, r6
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	4433      	add	r3, r6
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	2000      	movs	r0, #0
 8007db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db6:	462a      	mov	r2, r5
 8007db8:	f000 fd46 	bl	8008848 <_realloc_r>
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d1e0      	bne.n	8007d84 <__ssputs_r+0x5c>
 8007dc2:	6921      	ldr	r1, [r4, #16]
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	f7ff feb7 	bl	8007b38 <_free_r>
 8007dca:	230c      	movs	r3, #12
 8007dcc:	f8ca 3000 	str.w	r3, [sl]
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ddc:	e7e9      	b.n	8007db2 <__ssputs_r+0x8a>
	...

08007de0 <_svfiprintf_r>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	4698      	mov	r8, r3
 8007de6:	898b      	ldrh	r3, [r1, #12]
 8007de8:	061b      	lsls	r3, r3, #24
 8007dea:	b09d      	sub	sp, #116	@ 0x74
 8007dec:	4607      	mov	r7, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	4614      	mov	r4, r2
 8007df2:	d510      	bpl.n	8007e16 <_svfiprintf_r+0x36>
 8007df4:	690b      	ldr	r3, [r1, #16]
 8007df6:	b973      	cbnz	r3, 8007e16 <_svfiprintf_r+0x36>
 8007df8:	2140      	movs	r1, #64	@ 0x40
 8007dfa:	f7ff ff09 	bl	8007c10 <_malloc_r>
 8007dfe:	6028      	str	r0, [r5, #0]
 8007e00:	6128      	str	r0, [r5, #16]
 8007e02:	b930      	cbnz	r0, 8007e12 <_svfiprintf_r+0x32>
 8007e04:	230c      	movs	r3, #12
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	b01d      	add	sp, #116	@ 0x74
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	2340      	movs	r3, #64	@ 0x40
 8007e14:	616b      	str	r3, [r5, #20]
 8007e16:	2300      	movs	r3, #0
 8007e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e1a:	2320      	movs	r3, #32
 8007e1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e24:	2330      	movs	r3, #48	@ 0x30
 8007e26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fc4 <_svfiprintf_r+0x1e4>
 8007e2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e2e:	f04f 0901 	mov.w	r9, #1
 8007e32:	4623      	mov	r3, r4
 8007e34:	469a      	mov	sl, r3
 8007e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3a:	b10a      	cbz	r2, 8007e40 <_svfiprintf_r+0x60>
 8007e3c:	2a25      	cmp	r2, #37	@ 0x25
 8007e3e:	d1f9      	bne.n	8007e34 <_svfiprintf_r+0x54>
 8007e40:	ebba 0b04 	subs.w	fp, sl, r4
 8007e44:	d00b      	beq.n	8007e5e <_svfiprintf_r+0x7e>
 8007e46:	465b      	mov	r3, fp
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff ff6b 	bl	8007d28 <__ssputs_r>
 8007e52:	3001      	adds	r0, #1
 8007e54:	f000 80a7 	beq.w	8007fa6 <_svfiprintf_r+0x1c6>
 8007e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e5a:	445a      	add	r2, fp
 8007e5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 809f 	beq.w	8007fa6 <_svfiprintf_r+0x1c6>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e72:	f10a 0a01 	add.w	sl, sl, #1
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	9307      	str	r3, [sp, #28]
 8007e7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e80:	4654      	mov	r4, sl
 8007e82:	2205      	movs	r2, #5
 8007e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e88:	484e      	ldr	r0, [pc, #312]	@ (8007fc4 <_svfiprintf_r+0x1e4>)
 8007e8a:	f7f8 f9b9 	bl	8000200 <memchr>
 8007e8e:	9a04      	ldr	r2, [sp, #16]
 8007e90:	b9d8      	cbnz	r0, 8007eca <_svfiprintf_r+0xea>
 8007e92:	06d0      	lsls	r0, r2, #27
 8007e94:	bf44      	itt	mi
 8007e96:	2320      	movmi	r3, #32
 8007e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e9c:	0711      	lsls	r1, r2, #28
 8007e9e:	bf44      	itt	mi
 8007ea0:	232b      	movmi	r3, #43	@ 0x2b
 8007ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eac:	d015      	beq.n	8007eda <_svfiprintf_r+0xfa>
 8007eae:	9a07      	ldr	r2, [sp, #28]
 8007eb0:	4654      	mov	r4, sl
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f04f 0c0a 	mov.w	ip, #10
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ebe:	3b30      	subs	r3, #48	@ 0x30
 8007ec0:	2b09      	cmp	r3, #9
 8007ec2:	d94b      	bls.n	8007f5c <_svfiprintf_r+0x17c>
 8007ec4:	b1b0      	cbz	r0, 8007ef4 <_svfiprintf_r+0x114>
 8007ec6:	9207      	str	r2, [sp, #28]
 8007ec8:	e014      	b.n	8007ef4 <_svfiprintf_r+0x114>
 8007eca:	eba0 0308 	sub.w	r3, r0, r8
 8007ece:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	46a2      	mov	sl, r4
 8007ed8:	e7d2      	b.n	8007e80 <_svfiprintf_r+0xa0>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	1d19      	adds	r1, r3, #4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	9103      	str	r1, [sp, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bfbb      	ittet	lt
 8007ee6:	425b      	neglt	r3, r3
 8007ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8007eec:	9307      	strge	r3, [sp, #28]
 8007eee:	9307      	strlt	r3, [sp, #28]
 8007ef0:	bfb8      	it	lt
 8007ef2:	9204      	strlt	r2, [sp, #16]
 8007ef4:	7823      	ldrb	r3, [r4, #0]
 8007ef6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ef8:	d10a      	bne.n	8007f10 <_svfiprintf_r+0x130>
 8007efa:	7863      	ldrb	r3, [r4, #1]
 8007efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007efe:	d132      	bne.n	8007f66 <_svfiprintf_r+0x186>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	1d1a      	adds	r2, r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	9203      	str	r2, [sp, #12]
 8007f08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f0c:	3402      	adds	r4, #2
 8007f0e:	9305      	str	r3, [sp, #20]
 8007f10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fd4 <_svfiprintf_r+0x1f4>
 8007f14:	7821      	ldrb	r1, [r4, #0]
 8007f16:	2203      	movs	r2, #3
 8007f18:	4650      	mov	r0, sl
 8007f1a:	f7f8 f971 	bl	8000200 <memchr>
 8007f1e:	b138      	cbz	r0, 8007f30 <_svfiprintf_r+0x150>
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	eba0 000a 	sub.w	r0, r0, sl
 8007f26:	2240      	movs	r2, #64	@ 0x40
 8007f28:	4082      	lsls	r2, r0
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	3401      	adds	r4, #1
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f34:	4824      	ldr	r0, [pc, #144]	@ (8007fc8 <_svfiprintf_r+0x1e8>)
 8007f36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f3a:	2206      	movs	r2, #6
 8007f3c:	f7f8 f960 	bl	8000200 <memchr>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d036      	beq.n	8007fb2 <_svfiprintf_r+0x1d2>
 8007f44:	4b21      	ldr	r3, [pc, #132]	@ (8007fcc <_svfiprintf_r+0x1ec>)
 8007f46:	bb1b      	cbnz	r3, 8007f90 <_svfiprintf_r+0x1b0>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	3307      	adds	r3, #7
 8007f4c:	f023 0307 	bic.w	r3, r3, #7
 8007f50:	3308      	adds	r3, #8
 8007f52:	9303      	str	r3, [sp, #12]
 8007f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f56:	4433      	add	r3, r6
 8007f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f5a:	e76a      	b.n	8007e32 <_svfiprintf_r+0x52>
 8007f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f60:	460c      	mov	r4, r1
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7a8      	b.n	8007eb8 <_svfiprintf_r+0xd8>
 8007f66:	2300      	movs	r3, #0
 8007f68:	3401      	adds	r4, #1
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f04f 0c0a 	mov.w	ip, #10
 8007f72:	4620      	mov	r0, r4
 8007f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f78:	3a30      	subs	r2, #48	@ 0x30
 8007f7a:	2a09      	cmp	r2, #9
 8007f7c:	d903      	bls.n	8007f86 <_svfiprintf_r+0x1a6>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0c6      	beq.n	8007f10 <_svfiprintf_r+0x130>
 8007f82:	9105      	str	r1, [sp, #20]
 8007f84:	e7c4      	b.n	8007f10 <_svfiprintf_r+0x130>
 8007f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e7f0      	b.n	8007f72 <_svfiprintf_r+0x192>
 8007f90:	ab03      	add	r3, sp, #12
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	462a      	mov	r2, r5
 8007f96:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <_svfiprintf_r+0x1f0>)
 8007f98:	a904      	add	r1, sp, #16
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	f3af 8000 	nop.w
 8007fa0:	1c42      	adds	r2, r0, #1
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	d1d6      	bne.n	8007f54 <_svfiprintf_r+0x174>
 8007fa6:	89ab      	ldrh	r3, [r5, #12]
 8007fa8:	065b      	lsls	r3, r3, #25
 8007faa:	f53f af2d 	bmi.w	8007e08 <_svfiprintf_r+0x28>
 8007fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fb0:	e72c      	b.n	8007e0c <_svfiprintf_r+0x2c>
 8007fb2:	ab03      	add	r3, sp, #12
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	462a      	mov	r2, r5
 8007fb8:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <_svfiprintf_r+0x1f0>)
 8007fba:	a904      	add	r1, sp, #16
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f000 f9bb 	bl	8008338 <_printf_i>
 8007fc2:	e7ed      	b.n	8007fa0 <_svfiprintf_r+0x1c0>
 8007fc4:	08009c96 	.word	0x08009c96
 8007fc8:	08009ca0 	.word	0x08009ca0
 8007fcc:	00000000 	.word	0x00000000
 8007fd0:	08007d29 	.word	0x08007d29
 8007fd4:	08009c9c 	.word	0x08009c9c

08007fd8 <__sfputc_r>:
 8007fd8:	6893      	ldr	r3, [r2, #8]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	b410      	push	{r4}
 8007fe0:	6093      	str	r3, [r2, #8]
 8007fe2:	da08      	bge.n	8007ff6 <__sfputc_r+0x1e>
 8007fe4:	6994      	ldr	r4, [r2, #24]
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	db01      	blt.n	8007fee <__sfputc_r+0x16>
 8007fea:	290a      	cmp	r1, #10
 8007fec:	d103      	bne.n	8007ff6 <__sfputc_r+0x1e>
 8007fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff2:	f7ff bc90 	b.w	8007916 <__swbuf_r>
 8007ff6:	6813      	ldr	r3, [r2, #0]
 8007ff8:	1c58      	adds	r0, r3, #1
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	7019      	strb	r1, [r3, #0]
 8007ffe:	4608      	mov	r0, r1
 8008000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008004:	4770      	bx	lr

08008006 <__sfputs_r>:
 8008006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008008:	4606      	mov	r6, r0
 800800a:	460f      	mov	r7, r1
 800800c:	4614      	mov	r4, r2
 800800e:	18d5      	adds	r5, r2, r3
 8008010:	42ac      	cmp	r4, r5
 8008012:	d101      	bne.n	8008018 <__sfputs_r+0x12>
 8008014:	2000      	movs	r0, #0
 8008016:	e007      	b.n	8008028 <__sfputs_r+0x22>
 8008018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801c:	463a      	mov	r2, r7
 800801e:	4630      	mov	r0, r6
 8008020:	f7ff ffda 	bl	8007fd8 <__sfputc_r>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d1f3      	bne.n	8008010 <__sfputs_r+0xa>
 8008028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800802c <_vfiprintf_r>:
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	460d      	mov	r5, r1
 8008032:	b09d      	sub	sp, #116	@ 0x74
 8008034:	4614      	mov	r4, r2
 8008036:	4698      	mov	r8, r3
 8008038:	4606      	mov	r6, r0
 800803a:	b118      	cbz	r0, 8008044 <_vfiprintf_r+0x18>
 800803c:	6a03      	ldr	r3, [r0, #32]
 800803e:	b90b      	cbnz	r3, 8008044 <_vfiprintf_r+0x18>
 8008040:	f7ff fb60 	bl	8007704 <__sinit>
 8008044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008046:	07d9      	lsls	r1, r3, #31
 8008048:	d405      	bmi.n	8008056 <_vfiprintf_r+0x2a>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	059a      	lsls	r2, r3, #22
 800804e:	d402      	bmi.n	8008056 <_vfiprintf_r+0x2a>
 8008050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008052:	f7ff fd6e 	bl	8007b32 <__retarget_lock_acquire_recursive>
 8008056:	89ab      	ldrh	r3, [r5, #12]
 8008058:	071b      	lsls	r3, r3, #28
 800805a:	d501      	bpl.n	8008060 <_vfiprintf_r+0x34>
 800805c:	692b      	ldr	r3, [r5, #16]
 800805e:	b99b      	cbnz	r3, 8008088 <_vfiprintf_r+0x5c>
 8008060:	4629      	mov	r1, r5
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff fc96 	bl	8007994 <__swsetup_r>
 8008068:	b170      	cbz	r0, 8008088 <_vfiprintf_r+0x5c>
 800806a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800806c:	07dc      	lsls	r4, r3, #31
 800806e:	d504      	bpl.n	800807a <_vfiprintf_r+0x4e>
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	b01d      	add	sp, #116	@ 0x74
 8008076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	0598      	lsls	r0, r3, #22
 800807e:	d4f7      	bmi.n	8008070 <_vfiprintf_r+0x44>
 8008080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008082:	f7ff fd57 	bl	8007b34 <__retarget_lock_release_recursive>
 8008086:	e7f3      	b.n	8008070 <_vfiprintf_r+0x44>
 8008088:	2300      	movs	r3, #0
 800808a:	9309      	str	r3, [sp, #36]	@ 0x24
 800808c:	2320      	movs	r3, #32
 800808e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008092:	f8cd 800c 	str.w	r8, [sp, #12]
 8008096:	2330      	movs	r3, #48	@ 0x30
 8008098:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008248 <_vfiprintf_r+0x21c>
 800809c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080a0:	f04f 0901 	mov.w	r9, #1
 80080a4:	4623      	mov	r3, r4
 80080a6:	469a      	mov	sl, r3
 80080a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ac:	b10a      	cbz	r2, 80080b2 <_vfiprintf_r+0x86>
 80080ae:	2a25      	cmp	r2, #37	@ 0x25
 80080b0:	d1f9      	bne.n	80080a6 <_vfiprintf_r+0x7a>
 80080b2:	ebba 0b04 	subs.w	fp, sl, r4
 80080b6:	d00b      	beq.n	80080d0 <_vfiprintf_r+0xa4>
 80080b8:	465b      	mov	r3, fp
 80080ba:	4622      	mov	r2, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f7ff ffa1 	bl	8008006 <__sfputs_r>
 80080c4:	3001      	adds	r0, #1
 80080c6:	f000 80a7 	beq.w	8008218 <_vfiprintf_r+0x1ec>
 80080ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080cc:	445a      	add	r2, fp
 80080ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80080d0:	f89a 3000 	ldrb.w	r3, [sl]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 809f 	beq.w	8008218 <_vfiprintf_r+0x1ec>
 80080da:	2300      	movs	r3, #0
 80080dc:	f04f 32ff 	mov.w	r2, #4294967295
 80080e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e4:	f10a 0a01 	add.w	sl, sl, #1
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	9307      	str	r3, [sp, #28]
 80080ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80080f2:	4654      	mov	r4, sl
 80080f4:	2205      	movs	r2, #5
 80080f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fa:	4853      	ldr	r0, [pc, #332]	@ (8008248 <_vfiprintf_r+0x21c>)
 80080fc:	f7f8 f880 	bl	8000200 <memchr>
 8008100:	9a04      	ldr	r2, [sp, #16]
 8008102:	b9d8      	cbnz	r0, 800813c <_vfiprintf_r+0x110>
 8008104:	06d1      	lsls	r1, r2, #27
 8008106:	bf44      	itt	mi
 8008108:	2320      	movmi	r3, #32
 800810a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800810e:	0713      	lsls	r3, r2, #28
 8008110:	bf44      	itt	mi
 8008112:	232b      	movmi	r3, #43	@ 0x2b
 8008114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008118:	f89a 3000 	ldrb.w	r3, [sl]
 800811c:	2b2a      	cmp	r3, #42	@ 0x2a
 800811e:	d015      	beq.n	800814c <_vfiprintf_r+0x120>
 8008120:	9a07      	ldr	r2, [sp, #28]
 8008122:	4654      	mov	r4, sl
 8008124:	2000      	movs	r0, #0
 8008126:	f04f 0c0a 	mov.w	ip, #10
 800812a:	4621      	mov	r1, r4
 800812c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008130:	3b30      	subs	r3, #48	@ 0x30
 8008132:	2b09      	cmp	r3, #9
 8008134:	d94b      	bls.n	80081ce <_vfiprintf_r+0x1a2>
 8008136:	b1b0      	cbz	r0, 8008166 <_vfiprintf_r+0x13a>
 8008138:	9207      	str	r2, [sp, #28]
 800813a:	e014      	b.n	8008166 <_vfiprintf_r+0x13a>
 800813c:	eba0 0308 	sub.w	r3, r0, r8
 8008140:	fa09 f303 	lsl.w	r3, r9, r3
 8008144:	4313      	orrs	r3, r2
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	46a2      	mov	sl, r4
 800814a:	e7d2      	b.n	80080f2 <_vfiprintf_r+0xc6>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	1d19      	adds	r1, r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	9103      	str	r1, [sp, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfbb      	ittet	lt
 8008158:	425b      	neglt	r3, r3
 800815a:	f042 0202 	orrlt.w	r2, r2, #2
 800815e:	9307      	strge	r3, [sp, #28]
 8008160:	9307      	strlt	r3, [sp, #28]
 8008162:	bfb8      	it	lt
 8008164:	9204      	strlt	r2, [sp, #16]
 8008166:	7823      	ldrb	r3, [r4, #0]
 8008168:	2b2e      	cmp	r3, #46	@ 0x2e
 800816a:	d10a      	bne.n	8008182 <_vfiprintf_r+0x156>
 800816c:	7863      	ldrb	r3, [r4, #1]
 800816e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008170:	d132      	bne.n	80081d8 <_vfiprintf_r+0x1ac>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	1d1a      	adds	r2, r3, #4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	9203      	str	r2, [sp, #12]
 800817a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800817e:	3402      	adds	r4, #2
 8008180:	9305      	str	r3, [sp, #20]
 8008182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008258 <_vfiprintf_r+0x22c>
 8008186:	7821      	ldrb	r1, [r4, #0]
 8008188:	2203      	movs	r2, #3
 800818a:	4650      	mov	r0, sl
 800818c:	f7f8 f838 	bl	8000200 <memchr>
 8008190:	b138      	cbz	r0, 80081a2 <_vfiprintf_r+0x176>
 8008192:	9b04      	ldr	r3, [sp, #16]
 8008194:	eba0 000a 	sub.w	r0, r0, sl
 8008198:	2240      	movs	r2, #64	@ 0x40
 800819a:	4082      	lsls	r2, r0
 800819c:	4313      	orrs	r3, r2
 800819e:	3401      	adds	r4, #1
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a6:	4829      	ldr	r0, [pc, #164]	@ (800824c <_vfiprintf_r+0x220>)
 80081a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ac:	2206      	movs	r2, #6
 80081ae:	f7f8 f827 	bl	8000200 <memchr>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d03f      	beq.n	8008236 <_vfiprintf_r+0x20a>
 80081b6:	4b26      	ldr	r3, [pc, #152]	@ (8008250 <_vfiprintf_r+0x224>)
 80081b8:	bb1b      	cbnz	r3, 8008202 <_vfiprintf_r+0x1d6>
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	3307      	adds	r3, #7
 80081be:	f023 0307 	bic.w	r3, r3, #7
 80081c2:	3308      	adds	r3, #8
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c8:	443b      	add	r3, r7
 80081ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80081cc:	e76a      	b.n	80080a4 <_vfiprintf_r+0x78>
 80081ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d2:	460c      	mov	r4, r1
 80081d4:	2001      	movs	r0, #1
 80081d6:	e7a8      	b.n	800812a <_vfiprintf_r+0xfe>
 80081d8:	2300      	movs	r3, #0
 80081da:	3401      	adds	r4, #1
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	4619      	mov	r1, r3
 80081e0:	f04f 0c0a 	mov.w	ip, #10
 80081e4:	4620      	mov	r0, r4
 80081e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ea:	3a30      	subs	r2, #48	@ 0x30
 80081ec:	2a09      	cmp	r2, #9
 80081ee:	d903      	bls.n	80081f8 <_vfiprintf_r+0x1cc>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0c6      	beq.n	8008182 <_vfiprintf_r+0x156>
 80081f4:	9105      	str	r1, [sp, #20]
 80081f6:	e7c4      	b.n	8008182 <_vfiprintf_r+0x156>
 80081f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fc:	4604      	mov	r4, r0
 80081fe:	2301      	movs	r3, #1
 8008200:	e7f0      	b.n	80081e4 <_vfiprintf_r+0x1b8>
 8008202:	ab03      	add	r3, sp, #12
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	462a      	mov	r2, r5
 8008208:	4b12      	ldr	r3, [pc, #72]	@ (8008254 <_vfiprintf_r+0x228>)
 800820a:	a904      	add	r1, sp, #16
 800820c:	4630      	mov	r0, r6
 800820e:	f3af 8000 	nop.w
 8008212:	4607      	mov	r7, r0
 8008214:	1c78      	adds	r0, r7, #1
 8008216:	d1d6      	bne.n	80081c6 <_vfiprintf_r+0x19a>
 8008218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800821a:	07d9      	lsls	r1, r3, #31
 800821c:	d405      	bmi.n	800822a <_vfiprintf_r+0x1fe>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d402      	bmi.n	800822a <_vfiprintf_r+0x1fe>
 8008224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008226:	f7ff fc85 	bl	8007b34 <__retarget_lock_release_recursive>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	065b      	lsls	r3, r3, #25
 800822e:	f53f af1f 	bmi.w	8008070 <_vfiprintf_r+0x44>
 8008232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008234:	e71e      	b.n	8008074 <_vfiprintf_r+0x48>
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <_vfiprintf_r+0x228>)
 800823e:	a904      	add	r1, sp, #16
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f879 	bl	8008338 <_printf_i>
 8008246:	e7e4      	b.n	8008212 <_vfiprintf_r+0x1e6>
 8008248:	08009c96 	.word	0x08009c96
 800824c:	08009ca0 	.word	0x08009ca0
 8008250:	00000000 	.word	0x00000000
 8008254:	08008007 	.word	0x08008007
 8008258:	08009c9c 	.word	0x08009c9c

0800825c <_printf_common>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	4616      	mov	r6, r2
 8008262:	4698      	mov	r8, r3
 8008264:	688a      	ldr	r2, [r1, #8]
 8008266:	690b      	ldr	r3, [r1, #16]
 8008268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800826c:	4293      	cmp	r3, r2
 800826e:	bfb8      	it	lt
 8008270:	4613      	movlt	r3, r2
 8008272:	6033      	str	r3, [r6, #0]
 8008274:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008278:	4607      	mov	r7, r0
 800827a:	460c      	mov	r4, r1
 800827c:	b10a      	cbz	r2, 8008282 <_printf_common+0x26>
 800827e:	3301      	adds	r3, #1
 8008280:	6033      	str	r3, [r6, #0]
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	0699      	lsls	r1, r3, #26
 8008286:	bf42      	ittt	mi
 8008288:	6833      	ldrmi	r3, [r6, #0]
 800828a:	3302      	addmi	r3, #2
 800828c:	6033      	strmi	r3, [r6, #0]
 800828e:	6825      	ldr	r5, [r4, #0]
 8008290:	f015 0506 	ands.w	r5, r5, #6
 8008294:	d106      	bne.n	80082a4 <_printf_common+0x48>
 8008296:	f104 0a19 	add.w	sl, r4, #25
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	6832      	ldr	r2, [r6, #0]
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	dc26      	bgt.n	80082f2 <_printf_common+0x96>
 80082a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	3b00      	subs	r3, #0
 80082ac:	bf18      	it	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	0692      	lsls	r2, r2, #26
 80082b2:	d42b      	bmi.n	800830c <_printf_common+0xb0>
 80082b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082b8:	4641      	mov	r1, r8
 80082ba:	4638      	mov	r0, r7
 80082bc:	47c8      	blx	r9
 80082be:	3001      	adds	r0, #1
 80082c0:	d01e      	beq.n	8008300 <_printf_common+0xa4>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	6922      	ldr	r2, [r4, #16]
 80082c6:	f003 0306 	and.w	r3, r3, #6
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	bf02      	ittt	eq
 80082ce:	68e5      	ldreq	r5, [r4, #12]
 80082d0:	6833      	ldreq	r3, [r6, #0]
 80082d2:	1aed      	subeq	r5, r5, r3
 80082d4:	68a3      	ldr	r3, [r4, #8]
 80082d6:	bf0c      	ite	eq
 80082d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082dc:	2500      	movne	r5, #0
 80082de:	4293      	cmp	r3, r2
 80082e0:	bfc4      	itt	gt
 80082e2:	1a9b      	subgt	r3, r3, r2
 80082e4:	18ed      	addgt	r5, r5, r3
 80082e6:	2600      	movs	r6, #0
 80082e8:	341a      	adds	r4, #26
 80082ea:	42b5      	cmp	r5, r6
 80082ec:	d11a      	bne.n	8008324 <_printf_common+0xc8>
 80082ee:	2000      	movs	r0, #0
 80082f0:	e008      	b.n	8008304 <_printf_common+0xa8>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4652      	mov	r2, sl
 80082f6:	4641      	mov	r1, r8
 80082f8:	4638      	mov	r0, r7
 80082fa:	47c8      	blx	r9
 80082fc:	3001      	adds	r0, #1
 80082fe:	d103      	bne.n	8008308 <_printf_common+0xac>
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008308:	3501      	adds	r5, #1
 800830a:	e7c6      	b.n	800829a <_printf_common+0x3e>
 800830c:	18e1      	adds	r1, r4, r3
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	2030      	movs	r0, #48	@ 0x30
 8008312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008316:	4422      	add	r2, r4
 8008318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800831c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008320:	3302      	adds	r3, #2
 8008322:	e7c7      	b.n	80082b4 <_printf_common+0x58>
 8008324:	2301      	movs	r3, #1
 8008326:	4622      	mov	r2, r4
 8008328:	4641      	mov	r1, r8
 800832a:	4638      	mov	r0, r7
 800832c:	47c8      	blx	r9
 800832e:	3001      	adds	r0, #1
 8008330:	d0e6      	beq.n	8008300 <_printf_common+0xa4>
 8008332:	3601      	adds	r6, #1
 8008334:	e7d9      	b.n	80082ea <_printf_common+0x8e>
	...

08008338 <_printf_i>:
 8008338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	7e0f      	ldrb	r7, [r1, #24]
 800833e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008340:	2f78      	cmp	r7, #120	@ 0x78
 8008342:	4691      	mov	r9, r2
 8008344:	4680      	mov	r8, r0
 8008346:	460c      	mov	r4, r1
 8008348:	469a      	mov	sl, r3
 800834a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800834e:	d807      	bhi.n	8008360 <_printf_i+0x28>
 8008350:	2f62      	cmp	r7, #98	@ 0x62
 8008352:	d80a      	bhi.n	800836a <_printf_i+0x32>
 8008354:	2f00      	cmp	r7, #0
 8008356:	f000 80d2 	beq.w	80084fe <_printf_i+0x1c6>
 800835a:	2f58      	cmp	r7, #88	@ 0x58
 800835c:	f000 80b9 	beq.w	80084d2 <_printf_i+0x19a>
 8008360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008368:	e03a      	b.n	80083e0 <_printf_i+0xa8>
 800836a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800836e:	2b15      	cmp	r3, #21
 8008370:	d8f6      	bhi.n	8008360 <_printf_i+0x28>
 8008372:	a101      	add	r1, pc, #4	@ (adr r1, 8008378 <_printf_i+0x40>)
 8008374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008378:	080083d1 	.word	0x080083d1
 800837c:	080083e5 	.word	0x080083e5
 8008380:	08008361 	.word	0x08008361
 8008384:	08008361 	.word	0x08008361
 8008388:	08008361 	.word	0x08008361
 800838c:	08008361 	.word	0x08008361
 8008390:	080083e5 	.word	0x080083e5
 8008394:	08008361 	.word	0x08008361
 8008398:	08008361 	.word	0x08008361
 800839c:	08008361 	.word	0x08008361
 80083a0:	08008361 	.word	0x08008361
 80083a4:	080084e5 	.word	0x080084e5
 80083a8:	0800840f 	.word	0x0800840f
 80083ac:	0800849f 	.word	0x0800849f
 80083b0:	08008361 	.word	0x08008361
 80083b4:	08008361 	.word	0x08008361
 80083b8:	08008507 	.word	0x08008507
 80083bc:	08008361 	.word	0x08008361
 80083c0:	0800840f 	.word	0x0800840f
 80083c4:	08008361 	.word	0x08008361
 80083c8:	08008361 	.word	0x08008361
 80083cc:	080084a7 	.word	0x080084a7
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	1d1a      	adds	r2, r3, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6032      	str	r2, [r6, #0]
 80083d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083e0:	2301      	movs	r3, #1
 80083e2:	e09d      	b.n	8008520 <_printf_i+0x1e8>
 80083e4:	6833      	ldr	r3, [r6, #0]
 80083e6:	6820      	ldr	r0, [r4, #0]
 80083e8:	1d19      	adds	r1, r3, #4
 80083ea:	6031      	str	r1, [r6, #0]
 80083ec:	0606      	lsls	r6, r0, #24
 80083ee:	d501      	bpl.n	80083f4 <_printf_i+0xbc>
 80083f0:	681d      	ldr	r5, [r3, #0]
 80083f2:	e003      	b.n	80083fc <_printf_i+0xc4>
 80083f4:	0645      	lsls	r5, r0, #25
 80083f6:	d5fb      	bpl.n	80083f0 <_printf_i+0xb8>
 80083f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083fc:	2d00      	cmp	r5, #0
 80083fe:	da03      	bge.n	8008408 <_printf_i+0xd0>
 8008400:	232d      	movs	r3, #45	@ 0x2d
 8008402:	426d      	negs	r5, r5
 8008404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008408:	4859      	ldr	r0, [pc, #356]	@ (8008570 <_printf_i+0x238>)
 800840a:	230a      	movs	r3, #10
 800840c:	e011      	b.n	8008432 <_printf_i+0xfa>
 800840e:	6821      	ldr	r1, [r4, #0]
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	0608      	lsls	r0, r1, #24
 8008414:	f853 5b04 	ldr.w	r5, [r3], #4
 8008418:	d402      	bmi.n	8008420 <_printf_i+0xe8>
 800841a:	0649      	lsls	r1, r1, #25
 800841c:	bf48      	it	mi
 800841e:	b2ad      	uxthmi	r5, r5
 8008420:	2f6f      	cmp	r7, #111	@ 0x6f
 8008422:	4853      	ldr	r0, [pc, #332]	@ (8008570 <_printf_i+0x238>)
 8008424:	6033      	str	r3, [r6, #0]
 8008426:	bf14      	ite	ne
 8008428:	230a      	movne	r3, #10
 800842a:	2308      	moveq	r3, #8
 800842c:	2100      	movs	r1, #0
 800842e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008432:	6866      	ldr	r6, [r4, #4]
 8008434:	60a6      	str	r6, [r4, #8]
 8008436:	2e00      	cmp	r6, #0
 8008438:	bfa2      	ittt	ge
 800843a:	6821      	ldrge	r1, [r4, #0]
 800843c:	f021 0104 	bicge.w	r1, r1, #4
 8008440:	6021      	strge	r1, [r4, #0]
 8008442:	b90d      	cbnz	r5, 8008448 <_printf_i+0x110>
 8008444:	2e00      	cmp	r6, #0
 8008446:	d04b      	beq.n	80084e0 <_printf_i+0x1a8>
 8008448:	4616      	mov	r6, r2
 800844a:	fbb5 f1f3 	udiv	r1, r5, r3
 800844e:	fb03 5711 	mls	r7, r3, r1, r5
 8008452:	5dc7      	ldrb	r7, [r0, r7]
 8008454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008458:	462f      	mov	r7, r5
 800845a:	42bb      	cmp	r3, r7
 800845c:	460d      	mov	r5, r1
 800845e:	d9f4      	bls.n	800844a <_printf_i+0x112>
 8008460:	2b08      	cmp	r3, #8
 8008462:	d10b      	bne.n	800847c <_printf_i+0x144>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	07df      	lsls	r7, r3, #31
 8008468:	d508      	bpl.n	800847c <_printf_i+0x144>
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	6861      	ldr	r1, [r4, #4]
 800846e:	4299      	cmp	r1, r3
 8008470:	bfde      	ittt	le
 8008472:	2330      	movle	r3, #48	@ 0x30
 8008474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800847c:	1b92      	subs	r2, r2, r6
 800847e:	6122      	str	r2, [r4, #16]
 8008480:	f8cd a000 	str.w	sl, [sp]
 8008484:	464b      	mov	r3, r9
 8008486:	aa03      	add	r2, sp, #12
 8008488:	4621      	mov	r1, r4
 800848a:	4640      	mov	r0, r8
 800848c:	f7ff fee6 	bl	800825c <_printf_common>
 8008490:	3001      	adds	r0, #1
 8008492:	d14a      	bne.n	800852a <_printf_i+0x1f2>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	b004      	add	sp, #16
 800849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	f043 0320 	orr.w	r3, r3, #32
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	4833      	ldr	r0, [pc, #204]	@ (8008574 <_printf_i+0x23c>)
 80084a8:	2778      	movs	r7, #120	@ 0x78
 80084aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	6831      	ldr	r1, [r6, #0]
 80084b2:	061f      	lsls	r7, r3, #24
 80084b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80084b8:	d402      	bmi.n	80084c0 <_printf_i+0x188>
 80084ba:	065f      	lsls	r7, r3, #25
 80084bc:	bf48      	it	mi
 80084be:	b2ad      	uxthmi	r5, r5
 80084c0:	6031      	str	r1, [r6, #0]
 80084c2:	07d9      	lsls	r1, r3, #31
 80084c4:	bf44      	itt	mi
 80084c6:	f043 0320 	orrmi.w	r3, r3, #32
 80084ca:	6023      	strmi	r3, [r4, #0]
 80084cc:	b11d      	cbz	r5, 80084d6 <_printf_i+0x19e>
 80084ce:	2310      	movs	r3, #16
 80084d0:	e7ac      	b.n	800842c <_printf_i+0xf4>
 80084d2:	4827      	ldr	r0, [pc, #156]	@ (8008570 <_printf_i+0x238>)
 80084d4:	e7e9      	b.n	80084aa <_printf_i+0x172>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	f023 0320 	bic.w	r3, r3, #32
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	e7f6      	b.n	80084ce <_printf_i+0x196>
 80084e0:	4616      	mov	r6, r2
 80084e2:	e7bd      	b.n	8008460 <_printf_i+0x128>
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	6825      	ldr	r5, [r4, #0]
 80084e8:	6961      	ldr	r1, [r4, #20]
 80084ea:	1d18      	adds	r0, r3, #4
 80084ec:	6030      	str	r0, [r6, #0]
 80084ee:	062e      	lsls	r6, r5, #24
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	d501      	bpl.n	80084f8 <_printf_i+0x1c0>
 80084f4:	6019      	str	r1, [r3, #0]
 80084f6:	e002      	b.n	80084fe <_printf_i+0x1c6>
 80084f8:	0668      	lsls	r0, r5, #25
 80084fa:	d5fb      	bpl.n	80084f4 <_printf_i+0x1bc>
 80084fc:	8019      	strh	r1, [r3, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	4616      	mov	r6, r2
 8008504:	e7bc      	b.n	8008480 <_printf_i+0x148>
 8008506:	6833      	ldr	r3, [r6, #0]
 8008508:	1d1a      	adds	r2, r3, #4
 800850a:	6032      	str	r2, [r6, #0]
 800850c:	681e      	ldr	r6, [r3, #0]
 800850e:	6862      	ldr	r2, [r4, #4]
 8008510:	2100      	movs	r1, #0
 8008512:	4630      	mov	r0, r6
 8008514:	f7f7 fe74 	bl	8000200 <memchr>
 8008518:	b108      	cbz	r0, 800851e <_printf_i+0x1e6>
 800851a:	1b80      	subs	r0, r0, r6
 800851c:	6060      	str	r0, [r4, #4]
 800851e:	6863      	ldr	r3, [r4, #4]
 8008520:	6123      	str	r3, [r4, #16]
 8008522:	2300      	movs	r3, #0
 8008524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008528:	e7aa      	b.n	8008480 <_printf_i+0x148>
 800852a:	6923      	ldr	r3, [r4, #16]
 800852c:	4632      	mov	r2, r6
 800852e:	4649      	mov	r1, r9
 8008530:	4640      	mov	r0, r8
 8008532:	47d0      	blx	sl
 8008534:	3001      	adds	r0, #1
 8008536:	d0ad      	beq.n	8008494 <_printf_i+0x15c>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	079b      	lsls	r3, r3, #30
 800853c:	d413      	bmi.n	8008566 <_printf_i+0x22e>
 800853e:	68e0      	ldr	r0, [r4, #12]
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	4298      	cmp	r0, r3
 8008544:	bfb8      	it	lt
 8008546:	4618      	movlt	r0, r3
 8008548:	e7a6      	b.n	8008498 <_printf_i+0x160>
 800854a:	2301      	movs	r3, #1
 800854c:	4632      	mov	r2, r6
 800854e:	4649      	mov	r1, r9
 8008550:	4640      	mov	r0, r8
 8008552:	47d0      	blx	sl
 8008554:	3001      	adds	r0, #1
 8008556:	d09d      	beq.n	8008494 <_printf_i+0x15c>
 8008558:	3501      	adds	r5, #1
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	9903      	ldr	r1, [sp, #12]
 800855e:	1a5b      	subs	r3, r3, r1
 8008560:	42ab      	cmp	r3, r5
 8008562:	dcf2      	bgt.n	800854a <_printf_i+0x212>
 8008564:	e7eb      	b.n	800853e <_printf_i+0x206>
 8008566:	2500      	movs	r5, #0
 8008568:	f104 0619 	add.w	r6, r4, #25
 800856c:	e7f5      	b.n	800855a <_printf_i+0x222>
 800856e:	bf00      	nop
 8008570:	08009ca7 	.word	0x08009ca7
 8008574:	08009cb8 	.word	0x08009cb8

08008578 <__sflush_r>:
 8008578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	0716      	lsls	r6, r2, #28
 8008582:	4605      	mov	r5, r0
 8008584:	460c      	mov	r4, r1
 8008586:	d454      	bmi.n	8008632 <__sflush_r+0xba>
 8008588:	684b      	ldr	r3, [r1, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc02      	bgt.n	8008594 <__sflush_r+0x1c>
 800858e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	dd48      	ble.n	8008626 <__sflush_r+0xae>
 8008594:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008596:	2e00      	cmp	r6, #0
 8008598:	d045      	beq.n	8008626 <__sflush_r+0xae>
 800859a:	2300      	movs	r3, #0
 800859c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085a0:	682f      	ldr	r7, [r5, #0]
 80085a2:	6a21      	ldr	r1, [r4, #32]
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	d030      	beq.n	800860a <__sflush_r+0x92>
 80085a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	0759      	lsls	r1, r3, #29
 80085ae:	d505      	bpl.n	80085bc <__sflush_r+0x44>
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085b6:	b10b      	cbz	r3, 80085bc <__sflush_r+0x44>
 80085b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	2300      	movs	r3, #0
 80085be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085c0:	6a21      	ldr	r1, [r4, #32]
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b0      	blx	r6
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	d106      	bne.n	80085da <__sflush_r+0x62>
 80085cc:	6829      	ldr	r1, [r5, #0]
 80085ce:	291d      	cmp	r1, #29
 80085d0:	d82b      	bhi.n	800862a <__sflush_r+0xb2>
 80085d2:	4a2a      	ldr	r2, [pc, #168]	@ (800867c <__sflush_r+0x104>)
 80085d4:	410a      	asrs	r2, r1
 80085d6:	07d6      	lsls	r6, r2, #31
 80085d8:	d427      	bmi.n	800862a <__sflush_r+0xb2>
 80085da:	2200      	movs	r2, #0
 80085dc:	6062      	str	r2, [r4, #4]
 80085de:	04d9      	lsls	r1, r3, #19
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	d504      	bpl.n	80085f0 <__sflush_r+0x78>
 80085e6:	1c42      	adds	r2, r0, #1
 80085e8:	d101      	bne.n	80085ee <__sflush_r+0x76>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	b903      	cbnz	r3, 80085f0 <__sflush_r+0x78>
 80085ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80085f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085f2:	602f      	str	r7, [r5, #0]
 80085f4:	b1b9      	cbz	r1, 8008626 <__sflush_r+0xae>
 80085f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085fa:	4299      	cmp	r1, r3
 80085fc:	d002      	beq.n	8008604 <__sflush_r+0x8c>
 80085fe:	4628      	mov	r0, r5
 8008600:	f7ff fa9a 	bl	8007b38 <_free_r>
 8008604:	2300      	movs	r3, #0
 8008606:	6363      	str	r3, [r4, #52]	@ 0x34
 8008608:	e00d      	b.n	8008626 <__sflush_r+0xae>
 800860a:	2301      	movs	r3, #1
 800860c:	4628      	mov	r0, r5
 800860e:	47b0      	blx	r6
 8008610:	4602      	mov	r2, r0
 8008612:	1c50      	adds	r0, r2, #1
 8008614:	d1c9      	bne.n	80085aa <__sflush_r+0x32>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0c6      	beq.n	80085aa <__sflush_r+0x32>
 800861c:	2b1d      	cmp	r3, #29
 800861e:	d001      	beq.n	8008624 <__sflush_r+0xac>
 8008620:	2b16      	cmp	r3, #22
 8008622:	d11e      	bne.n	8008662 <__sflush_r+0xea>
 8008624:	602f      	str	r7, [r5, #0]
 8008626:	2000      	movs	r0, #0
 8008628:	e022      	b.n	8008670 <__sflush_r+0xf8>
 800862a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862e:	b21b      	sxth	r3, r3
 8008630:	e01b      	b.n	800866a <__sflush_r+0xf2>
 8008632:	690f      	ldr	r7, [r1, #16]
 8008634:	2f00      	cmp	r7, #0
 8008636:	d0f6      	beq.n	8008626 <__sflush_r+0xae>
 8008638:	0793      	lsls	r3, r2, #30
 800863a:	680e      	ldr	r6, [r1, #0]
 800863c:	bf08      	it	eq
 800863e:	694b      	ldreq	r3, [r1, #20]
 8008640:	600f      	str	r7, [r1, #0]
 8008642:	bf18      	it	ne
 8008644:	2300      	movne	r3, #0
 8008646:	eba6 0807 	sub.w	r8, r6, r7
 800864a:	608b      	str	r3, [r1, #8]
 800864c:	f1b8 0f00 	cmp.w	r8, #0
 8008650:	dde9      	ble.n	8008626 <__sflush_r+0xae>
 8008652:	6a21      	ldr	r1, [r4, #32]
 8008654:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008656:	4643      	mov	r3, r8
 8008658:	463a      	mov	r2, r7
 800865a:	4628      	mov	r0, r5
 800865c:	47b0      	blx	r6
 800865e:	2800      	cmp	r0, #0
 8008660:	dc08      	bgt.n	8008674 <__sflush_r+0xfc>
 8008662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	4407      	add	r7, r0
 8008676:	eba8 0800 	sub.w	r8, r8, r0
 800867a:	e7e7      	b.n	800864c <__sflush_r+0xd4>
 800867c:	dfbffffe 	.word	0xdfbffffe

08008680 <_fflush_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b913      	cbnz	r3, 8008690 <_fflush_r+0x10>
 800868a:	2500      	movs	r5, #0
 800868c:	4628      	mov	r0, r5
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	b118      	cbz	r0, 800869a <_fflush_r+0x1a>
 8008692:	6a03      	ldr	r3, [r0, #32]
 8008694:	b90b      	cbnz	r3, 800869a <_fflush_r+0x1a>
 8008696:	f7ff f835 	bl	8007704 <__sinit>
 800869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0f3      	beq.n	800868a <_fflush_r+0xa>
 80086a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086a4:	07d0      	lsls	r0, r2, #31
 80086a6:	d404      	bmi.n	80086b2 <_fflush_r+0x32>
 80086a8:	0599      	lsls	r1, r3, #22
 80086aa:	d402      	bmi.n	80086b2 <_fflush_r+0x32>
 80086ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ae:	f7ff fa40 	bl	8007b32 <__retarget_lock_acquire_recursive>
 80086b2:	4628      	mov	r0, r5
 80086b4:	4621      	mov	r1, r4
 80086b6:	f7ff ff5f 	bl	8008578 <__sflush_r>
 80086ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086bc:	07da      	lsls	r2, r3, #31
 80086be:	4605      	mov	r5, r0
 80086c0:	d4e4      	bmi.n	800868c <_fflush_r+0xc>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	059b      	lsls	r3, r3, #22
 80086c6:	d4e1      	bmi.n	800868c <_fflush_r+0xc>
 80086c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ca:	f7ff fa33 	bl	8007b34 <__retarget_lock_release_recursive>
 80086ce:	e7dd      	b.n	800868c <_fflush_r+0xc>

080086d0 <__swhatbuf_r>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d8:	2900      	cmp	r1, #0
 80086da:	b096      	sub	sp, #88	@ 0x58
 80086dc:	4615      	mov	r5, r2
 80086de:	461e      	mov	r6, r3
 80086e0:	da0d      	bge.n	80086fe <__swhatbuf_r+0x2e>
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086e8:	f04f 0100 	mov.w	r1, #0
 80086ec:	bf14      	ite	ne
 80086ee:	2340      	movne	r3, #64	@ 0x40
 80086f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086f4:	2000      	movs	r0, #0
 80086f6:	6031      	str	r1, [r6, #0]
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	b016      	add	sp, #88	@ 0x58
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	466a      	mov	r2, sp
 8008700:	f000 f862 	bl	80087c8 <_fstat_r>
 8008704:	2800      	cmp	r0, #0
 8008706:	dbec      	blt.n	80086e2 <__swhatbuf_r+0x12>
 8008708:	9901      	ldr	r1, [sp, #4]
 800870a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800870e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008712:	4259      	negs	r1, r3
 8008714:	4159      	adcs	r1, r3
 8008716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800871a:	e7eb      	b.n	80086f4 <__swhatbuf_r+0x24>

0800871c <__smakebuf_r>:
 800871c:	898b      	ldrh	r3, [r1, #12]
 800871e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008720:	079d      	lsls	r5, r3, #30
 8008722:	4606      	mov	r6, r0
 8008724:	460c      	mov	r4, r1
 8008726:	d507      	bpl.n	8008738 <__smakebuf_r+0x1c>
 8008728:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	6123      	str	r3, [r4, #16]
 8008730:	2301      	movs	r3, #1
 8008732:	6163      	str	r3, [r4, #20]
 8008734:	b003      	add	sp, #12
 8008736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008738:	ab01      	add	r3, sp, #4
 800873a:	466a      	mov	r2, sp
 800873c:	f7ff ffc8 	bl	80086d0 <__swhatbuf_r>
 8008740:	9f00      	ldr	r7, [sp, #0]
 8008742:	4605      	mov	r5, r0
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	f7ff fa62 	bl	8007c10 <_malloc_r>
 800874c:	b948      	cbnz	r0, 8008762 <__smakebuf_r+0x46>
 800874e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008752:	059a      	lsls	r2, r3, #22
 8008754:	d4ee      	bmi.n	8008734 <__smakebuf_r+0x18>
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	f043 0302 	orr.w	r3, r3, #2
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	e7e2      	b.n	8008728 <__smakebuf_r+0xc>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	6020      	str	r0, [r4, #0]
 8008766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	9b01      	ldr	r3, [sp, #4]
 800876e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008772:	b15b      	cbz	r3, 800878c <__smakebuf_r+0x70>
 8008774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008778:	4630      	mov	r0, r6
 800877a:	f000 f837 	bl	80087ec <_isatty_r>
 800877e:	b128      	cbz	r0, 800878c <__smakebuf_r+0x70>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	431d      	orrs	r5, r3
 8008790:	81a5      	strh	r5, [r4, #12]
 8008792:	e7cf      	b.n	8008734 <__smakebuf_r+0x18>

08008794 <memmove>:
 8008794:	4288      	cmp	r0, r1
 8008796:	b510      	push	{r4, lr}
 8008798:	eb01 0402 	add.w	r4, r1, r2
 800879c:	d902      	bls.n	80087a4 <memmove+0x10>
 800879e:	4284      	cmp	r4, r0
 80087a0:	4623      	mov	r3, r4
 80087a2:	d807      	bhi.n	80087b4 <memmove+0x20>
 80087a4:	1e43      	subs	r3, r0, #1
 80087a6:	42a1      	cmp	r1, r4
 80087a8:	d008      	beq.n	80087bc <memmove+0x28>
 80087aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087b2:	e7f8      	b.n	80087a6 <memmove+0x12>
 80087b4:	4402      	add	r2, r0
 80087b6:	4601      	mov	r1, r0
 80087b8:	428a      	cmp	r2, r1
 80087ba:	d100      	bne.n	80087be <memmove+0x2a>
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087c6:	e7f7      	b.n	80087b8 <memmove+0x24>

080087c8 <_fstat_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	@ (80087e8 <_fstat_r+0x20>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	f7fe fd88 	bl	80072ea <_fstat>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d102      	bne.n	80087e4 <_fstat_r+0x1c>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	b103      	cbz	r3, 80087e4 <_fstat_r+0x1c>
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	20025e98 	.word	0x20025e98

080087ec <_isatty_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	@ (8008808 <_isatty_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7fe feda 	bl	80075b0 <_isatty>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_isatty_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_isatty_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20025e98 	.word	0x20025e98

0800880c <_sbrk_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d06      	ldr	r5, [pc, #24]	@ (8008828 <_sbrk_r+0x1c>)
 8008810:	2300      	movs	r3, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	f7fa ff72 	bl	8003700 <_sbrk>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_sbrk_r+0x1a>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_sbrk_r+0x1a>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20025e98 	.word	0x20025e98

0800882c <memcpy>:
 800882c:	440a      	add	r2, r1
 800882e:	4291      	cmp	r1, r2
 8008830:	f100 33ff 	add.w	r3, r0, #4294967295
 8008834:	d100      	bne.n	8008838 <memcpy+0xc>
 8008836:	4770      	bx	lr
 8008838:	b510      	push	{r4, lr}
 800883a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800883e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008842:	4291      	cmp	r1, r2
 8008844:	d1f9      	bne.n	800883a <memcpy+0xe>
 8008846:	bd10      	pop	{r4, pc}

08008848 <_realloc_r>:
 8008848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	4680      	mov	r8, r0
 800884e:	4615      	mov	r5, r2
 8008850:	460c      	mov	r4, r1
 8008852:	b921      	cbnz	r1, 800885e <_realloc_r+0x16>
 8008854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	4611      	mov	r1, r2
 800885a:	f7ff b9d9 	b.w	8007c10 <_malloc_r>
 800885e:	b92a      	cbnz	r2, 800886c <_realloc_r+0x24>
 8008860:	f7ff f96a 	bl	8007b38 <_free_r>
 8008864:	2400      	movs	r4, #0
 8008866:	4620      	mov	r0, r4
 8008868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800886c:	f000 f81a 	bl	80088a4 <_malloc_usable_size_r>
 8008870:	4285      	cmp	r5, r0
 8008872:	4606      	mov	r6, r0
 8008874:	d802      	bhi.n	800887c <_realloc_r+0x34>
 8008876:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800887a:	d8f4      	bhi.n	8008866 <_realloc_r+0x1e>
 800887c:	4629      	mov	r1, r5
 800887e:	4640      	mov	r0, r8
 8008880:	f7ff f9c6 	bl	8007c10 <_malloc_r>
 8008884:	4607      	mov	r7, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	d0ec      	beq.n	8008864 <_realloc_r+0x1c>
 800888a:	42b5      	cmp	r5, r6
 800888c:	462a      	mov	r2, r5
 800888e:	4621      	mov	r1, r4
 8008890:	bf28      	it	cs
 8008892:	4632      	movcs	r2, r6
 8008894:	f7ff ffca 	bl	800882c <memcpy>
 8008898:	4621      	mov	r1, r4
 800889a:	4640      	mov	r0, r8
 800889c:	f7ff f94c 	bl	8007b38 <_free_r>
 80088a0:	463c      	mov	r4, r7
 80088a2:	e7e0      	b.n	8008866 <_realloc_r+0x1e>

080088a4 <_malloc_usable_size_r>:
 80088a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a8:	1f18      	subs	r0, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfbc      	itt	lt
 80088ae:	580b      	ldrlt	r3, [r1, r0]
 80088b0:	18c0      	addlt	r0, r0, r3
 80088b2:	4770      	bx	lr

080088b4 <_init>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr

080088c0 <_fini>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr
