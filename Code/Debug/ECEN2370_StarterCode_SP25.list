
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001378  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d4  080092d4  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  080092d4  080092d4  0000a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092dc  080092dc  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092dc  080092dc  0000a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092e0  080092e0  0000a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080092e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00025e28  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ea8  20025ea8  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014751  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003447  00000000  00000000  0001f801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00022c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9e  00000000  00000000  00024098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d1e  00000000  00000000  00025036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019de9  00000000  00000000  0004bd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12e5  00000000  00000000  00065b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146e22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f28  00000000  00000000  00146e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0014cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007f44 	.word	0x08007f44

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08007f44 	.word	0x08007f44

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
extern void initialise_monitor_handles(void); 

static bool Drop_Coin = 0;

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f006 fcca 	bl	8006f2c <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f000 fde4 	bl	8001164 <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fda1 	bl	80010e4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fefa 	bl	80013a0 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ac:	f000 ffea 	bl	8001584 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <ApplicationInit+0x44>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
	
	greenLEDInit();
 80005b6:	f000 f815 	bl	80005e4 <greenLEDInit>
	turnOffGreenLED();
 80005ba:	f000 f821 	bl	8000600 <turnOffGreenLED>
	redLEDInit();
 80005be:	f000 f818 	bl	80005f2 <redLEDInit>
	turnOffRedLED();
 80005c2:	f000 f824 	bl	800060e <turnOffRedLED>
	ButtonInit();
 80005c6:	f000 f807 	bl	80005d8 <ButtonInit>
	addSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f001 f8a0 	bl	8001710 <addSchedulerEvent>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <ButtonInit>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void ButtonInit(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	Button_Init();
 80005dc:	f000 fc64 	bl	8000ea8 <Button_Init>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <greenLEDInit>:

void greenLEDInit(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	LED_Init(GREEN_LED);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f001 f837 	bl	800165c <LED_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <redLEDInit>:

void redLEDInit(){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	LED_Init(RED_LED);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 f830 	bl	800165c <LED_Init>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <turnOffGreenLED>:

void turnOnRedLED(){
	TurnOnLED(RED_LED);
}

void turnOffGreenLED(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	TurnOffLED(GREEN_LED);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 f863 	bl	80016d0 <TurnOffLED>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}

0800060e <turnOffRedLED>:

void turnOffRedLED(){
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	TurnOffLED(RED_LED);
 8000612:	2000      	movs	r0, #0
 8000614:	f001 f85c 	bl	80016d0 <TurnOffLED>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <Display_Menu_Screen>:

void Display_Menu_Screen(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000620:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000624:	2000      	movs	r0, #0
 8000626:	f000 febb 	bl	80013a0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 feda 	bl	80013e4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000630:	4836      	ldr	r0, [pc, #216]	@ (800070c <Display_Menu_Screen+0xf0>)
 8000632:	f000 fee7 	bl	8001404 <LCD_SetFont>

	LCD_DisplayChar(80,10,"W");
 8000636:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <Display_Menu_Screen+0xf4>)
 8000638:	210a      	movs	r1, #10
 800063a:	2050      	movs	r0, #80	@ 0x50
 800063c:	f000 ff60 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(92,10,"e");
 8000640:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <Display_Menu_Screen+0xf8>)
 8000642:	210a      	movs	r1, #10
 8000644:	205c      	movs	r0, #92	@ 0x5c
 8000646:	f000 ff5b 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(100,10,"l");
 800064a:	4a33      	ldr	r2, [pc, #204]	@ (8000718 <Display_Menu_Screen+0xfc>)
 800064c:	210a      	movs	r1, #10
 800064e:	2064      	movs	r0, #100	@ 0x64
 8000650:	f000 ff56 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(107,10,"c");
 8000654:	4a31      	ldr	r2, [pc, #196]	@ (800071c <Display_Menu_Screen+0x100>)
 8000656:	210a      	movs	r1, #10
 8000658:	206b      	movs	r0, #107	@ 0x6b
 800065a:	f000 ff51 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(117,10,"o");
 800065e:	4a30      	ldr	r2, [pc, #192]	@ (8000720 <Display_Menu_Screen+0x104>)
 8000660:	210a      	movs	r1, #10
 8000662:	2075      	movs	r0, #117	@ 0x75
 8000664:	f000 ff4c 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(133,10,"m");
 8000668:	4a2e      	ldr	r2, [pc, #184]	@ (8000724 <Display_Menu_Screen+0x108>)
 800066a:	210a      	movs	r1, #10
 800066c:	2085      	movs	r0, #133	@ 0x85
 800066e:	f000 ff47 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(148,10,"e");
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <Display_Menu_Screen+0xf8>)
 8000674:	210a      	movs	r1, #10
 8000676:	2094      	movs	r0, #148	@ 0x94
 8000678:	f000 ff42 	bl	8001500 <LCD_DisplayChar>
	

	LCD_DisplayChar(45,30,"t");
 800067c:	4a2a      	ldr	r2, [pc, #168]	@ (8000728 <Display_Menu_Screen+0x10c>)
 800067e:	211e      	movs	r1, #30
 8000680:	202d      	movs	r0, #45	@ 0x2d
 8000682:	f000 ff3d 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(55,30,"o");
 8000686:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <Display_Menu_Screen+0x104>)
 8000688:	211e      	movs	r1, #30
 800068a:	2037      	movs	r0, #55	@ 0x37
 800068c:	f000 ff38 	bl	8001500 <LCD_DisplayChar>
	
	LCD_DisplayChar(85,30,"C");
 8000690:	4a26      	ldr	r2, [pc, #152]	@ (800072c <Display_Menu_Screen+0x110>)
 8000692:	211e      	movs	r1, #30
 8000694:	2055      	movs	r0, #85	@ 0x55
 8000696:	f000 ff33 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(100,30,"o");
 800069a:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <Display_Menu_Screen+0x104>)
 800069c:	211e      	movs	r1, #30
 800069e:	2064      	movs	r0, #100	@ 0x64
 80006a0:	f000 ff2e 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(113,30,"n");
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <Display_Menu_Screen+0x114>)
 80006a6:	211e      	movs	r1, #30
 80006a8:	2071      	movs	r0, #113	@ 0x71
 80006aa:	f000 ff29 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(126,30,"n");
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <Display_Menu_Screen+0x114>)
 80006b0:	211e      	movs	r1, #30
 80006b2:	207e      	movs	r0, #126	@ 0x7e
 80006b4:	f000 ff24 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(139,30,"e");
 80006b8:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <Display_Menu_Screen+0xf8>)
 80006ba:	211e      	movs	r1, #30
 80006bc:	208b      	movs	r0, #139	@ 0x8b
 80006be:	f000 ff1f 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(151,30,"c");
 80006c2:	4a16      	ldr	r2, [pc, #88]	@ (800071c <Display_Menu_Screen+0x100>)
 80006c4:	211e      	movs	r1, #30
 80006c6:	2097      	movs	r0, #151	@ 0x97
 80006c8:	f000 ff1a 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(161,30,"t");
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <Display_Menu_Screen+0x10c>)
 80006ce:	211e      	movs	r1, #30
 80006d0:	20a1      	movs	r0, #161	@ 0xa1
 80006d2:	f000 ff15 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(181,30,"4");
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <Display_Menu_Screen+0x118>)
 80006d8:	211e      	movs	r1, #30
 80006da:	20b5      	movs	r0, #181	@ 0xb5
 80006dc:	f000 ff10 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(190,30,"!");
 80006e0:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <Display_Menu_Screen+0x11c>)
 80006e2:	211e      	movs	r1, #30
 80006e4:	20be      	movs	r0, #190	@ 0xbe
 80006e6:	f000 ff0b 	bl	8001500 <LCD_DisplayChar>

	LCD_DisplayChar(60,70,"Select Mode:");
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <Display_Menu_Screen+0x120>)
 80006ec:	2146      	movs	r1, #70	@ 0x46
 80006ee:	203c      	movs	r0, #60	@ 0x3c
 80006f0:	f000 ff06 	bl	8001500 <LCD_DisplayChar>

	LCD_DisplayChar(15,180,"1-player");
 80006f4:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <Display_Menu_Screen+0x124>)
 80006f6:	21b4      	movs	r1, #180	@ 0xb4
 80006f8:	200f      	movs	r0, #15
 80006fa:	f000 ff01 	bl	8001500 <LCD_DisplayChar>
	LCD_DisplayChar(150,180,"2-player");
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <Display_Menu_Screen+0x128>)
 8000700:	21b4      	movs	r1, #180	@ 0xb4
 8000702:	2096      	movs	r0, #150	@ 0x96
 8000704:	f000 fefc 	bl	8001500 <LCD_DisplayChar>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000004 	.word	0x20000004
 8000710:	08007f80 	.word	0x08007f80
 8000714:	08007f84 	.word	0x08007f84
 8000718:	08007f88 	.word	0x08007f88
 800071c:	08007f8c 	.word	0x08007f8c
 8000720:	08007f90 	.word	0x08007f90
 8000724:	08007f94 	.word	0x08007f94
 8000728:	08007f98 	.word	0x08007f98
 800072c:	08007f9c 	.word	0x08007f9c
 8000730:	08007fa0 	.word	0x08007fa0
 8000734:	08007fa4 	.word	0x08007fa4
 8000738:	08007fa8 	.word	0x08007fa8
 800073c:	08007fac 	.word	0x08007fac
 8000740:	08007fbc 	.word	0x08007fbc
 8000744:	08007fc8 	.word	0x08007fc8

08000748 <Display_Board>:

void Display_Board(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	for(int i = 0; i <= NUM_COLS; i++){
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e010      	b.n	8000776 <Display_Board+0x2e>
		LCD_Draw_Vertical_Line(15+30*i, 80, 181, LCD_COLOR_BLACK);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	b29b      	uxth	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	b29b      	uxth	r3, r3
 8000762:	330f      	adds	r3, #15
 8000764:	b298      	uxth	r0, r3
 8000766:	2300      	movs	r3, #0
 8000768:	22b5      	movs	r2, #181	@ 0xb5
 800076a:	2150      	movs	r1, #80	@ 0x50
 800076c:	f000 fdc9 	bl	8001302 <LCD_Draw_Vertical_Line>
	for(int i = 0; i <= NUM_COLS; i++){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b07      	cmp	r3, #7
 800077a:	ddeb      	ble.n	8000754 <Display_Board+0xc>
	}

	for(int i = 0; i <= NUM_ROWS; i++){
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	e010      	b.n	80007a4 <Display_Board+0x5c>
		LCD_Draw_Horizontal_Line(15, 80+30*i, 210, LCD_COLOR_BLACK);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b29b      	uxth	r3, r3
 8000790:	3350      	adds	r3, #80	@ 0x50
 8000792:	b299      	uxth	r1, r3
 8000794:	2300      	movs	r3, #0
 8000796:	22d2      	movs	r2, #210	@ 0xd2
 8000798:	200f      	movs	r0, #15
 800079a:	f000 fdd9 	bl	8001350 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i <= NUM_ROWS; i++){
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	ddeb      	ble.n	8000782 <Display_Board+0x3a>
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Update_Board>:

void Update_Board(int row, int col, int value){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	board[row][col] = value;
 80007c0:	4907      	ldr	r1, [pc, #28]	@ (80007e0 <Update_Board+0x2c>)
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4613      	mov	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	200000a4 	.word	0x200000a4

080007e4 <Display_Coins>:

void Display_Coins(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++){
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e04d      	b.n	800088c <Display_Coins+0xa8>
		for(int j = 0; j < NUM_COLS; j++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e044      	b.n	8000880 <Display_Coins+0x9c>
			if(board[i][j] == 1){
 80007f6:	4929      	ldr	r1, [pc, #164]	@ (800089c <Display_Coins+0xb8>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	4413      	add	r3, r2
 8000804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d115      	bne.n	8000838 <Display_Coins+0x54>
				LCD_Draw_Circle_Fill(30+30*j, 95+30*i, 8, LCD_COLOR_BLUE);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	b298      	uxth	r0, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b29b      	uxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	335f      	adds	r3, #95	@ 0x5f
 800082c:	b299      	uxth	r1, r3
 800082e:	231f      	movs	r3, #31
 8000830:	2208      	movs	r2, #8
 8000832:	f000 fd13 	bl	800125c <LCD_Draw_Circle_Fill>
 8000836:	e020      	b.n	800087a <Display_Coins+0x96>
			}

			else if(board[i][j] == 2){
 8000838:	4918      	ldr	r1, [pc, #96]	@ (800089c <Display_Coins+0xb8>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d115      	bne.n	800087a <Display_Coins+0x96>
				LCD_Draw_Circle_Fill(30+30*j, 95+30*i, 8, LCD_COLOR_RED);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b298      	uxth	r0, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	335f      	adds	r3, #95	@ 0x5f
 800086e:	b299      	uxth	r1, r3
 8000870:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000874:	2208      	movs	r2, #8
 8000876:	f000 fcf1 	bl	800125c <LCD_Draw_Circle_Fill>
		for(int j = 0; j < NUM_COLS; j++){
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b06      	cmp	r3, #6
 8000884:	ddb7      	ble.n	80007f6 <Display_Coins+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b05      	cmp	r3, #5
 8000890:	ddae      	ble.n	80007f0 <Display_Coins+0xc>
			}
		}
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000a4 	.word	0x200000a4

080008a0 <Single_Player>:

void Single_Player(RNG_HandleTypeDef* hrng){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	turns = 0;
 80008a8:	4b58      	ldr	r3, [pc, #352]	@ (8000a0c <Single_Player+0x16c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]

	while(Game_Status() == ONGOING){
 80008ae:	e0a0      	b.n	80009f2 <Single_Player+0x152>
		//User Turn
		if(turns % 2 == 0){
 80008b0:	4b56      	ldr	r3, [pc, #344]	@ (8000a0c <Single_Player+0x16c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d16f      	bne.n	800099c <Single_Player+0xfc>
			int position = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
			LCD_Clear(0, LCD_COLOR_WHITE);
 80008c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 fd6b 	bl	80013a0 <LCD_Clear>
			Display_Board();
 80008ca:	f7ff ff3d 	bl	8000748 <Display_Board>
			Display_Coins();
 80008ce:	f7ff ff89 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_BLUE);
 80008d2:	231f      	movs	r3, #31
 80008d4:	2208      	movs	r2, #8
 80008d6:	2141      	movs	r1, #65	@ 0x41
 80008d8:	201e      	movs	r0, #30
 80008da:	f000 fcbf 	bl	800125c <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	72fb      	strb	r3, [r7, #11]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 80008e2:	484b      	ldr	r0, [pc, #300]	@ (8000a10 <Single_Player+0x170>)
 80008e4:	f000 fe59 	bl	800159a <returnTouchStateAndLocation>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d125      	bne.n	800093a <Single_Player+0x9a>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80008ee:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <Single_Player+0x170>)
 80008f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008f4:	f000 fe5e 	bl	80015b4 <returnTouchQuadrant>
 80008f8:	4603      	mov	r3, r0
 80008fa:	72bb      	strb	r3, [r7, #10]
					if(touchedQuadrant == BOTTOM_RIGHT){
 80008fc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10b      	bne.n	800091c <Single_Player+0x7c>
						if(position <= 0) position = 6;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dc02      	bgt.n	8000910 <Single_Player+0x70>
 800090a:	2306      	movs	r3, #6
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e002      	b.n	8000916 <Single_Player+0x76>
						else position--;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3b01      	subs	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	72fb      	strb	r3, [r7, #11]
 800091a:	e00e      	b.n	800093a <Single_Player+0x9a>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT){
 800091c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10a      	bne.n	800093a <Single_Player+0x9a>
						if(position >= 6) position = 0;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b05      	cmp	r3, #5
 8000928:	dd02      	ble.n	8000930 <Single_Player+0x90>
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e002      	b.n	8000936 <Single_Player+0x96>
						else position++;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	72fb      	strb	r3, [r7, #11]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d018      	beq.n	8000972 <Single_Player+0xd2>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8000940:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000944:	2000      	movs	r0, #0
 8000946:	f000 fd2b 	bl	80013a0 <LCD_Clear>
					Display_Board();
 800094a:	f7ff fefd 	bl	8000748 <Display_Board>
					Display_Coins();
 800094e:	f7ff ff49 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_BLUE2);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	b29b      	uxth	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b298      	uxth	r0, r3
 8000962:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000966:	2208      	movs	r2, #8
 8000968:	2141      	movs	r1, #65	@ 0x41
 800096a:	f000 fc77 	bl	800125c <LCD_Draw_Circle_Fill>

					touched = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	72fb      	strb	r3, [r7, #11]
				}

				if(Drop_Coin){
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <Single_Player+0x174>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0b1      	beq.n	80008de <Single_Player+0x3e>
					Drop_Coin = 0;
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <Single_Player+0x174>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
					break;
 8000980:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, FIRST_PLAYER);
 8000982:	2101      	movs	r1, #1
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 f86d 	bl	8000a64 <Place_Coin>
 800098a:	4603      	mov	r3, r0
 800098c:	727b      	strb	r3, [r7, #9]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 800098e:	7a7b      	ldrb	r3, [r7, #9]
 8000990:	f083 0301 	eor.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d026      	beq.n	80009e8 <Single_Player+0x148>
 800099a:	e02a      	b.n	80009f2 <Single_Player+0x152>
		}

		//ai turn
		else{
			LCD_DisplayChar(30, 35, "Generating Move.");
 800099c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <Single_Player+0x178>)
 800099e:	2123      	movs	r1, #35	@ 0x23
 80009a0:	201e      	movs	r0, #30
 80009a2:	f000 fdad 	bl	8001500 <LCD_DisplayChar>
			HAL_Delay(750);
 80009a6:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80009aa:	f002 fcab 	bl	8003304 <HAL_Delay>
			LCD_DisplayChar(30, 35, "Generating Move..");
 80009ae:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <Single_Player+0x17c>)
 80009b0:	2123      	movs	r1, #35	@ 0x23
 80009b2:	201e      	movs	r0, #30
 80009b4:	f000 fda4 	bl	8001500 <LCD_DisplayChar>
			HAL_Delay(750);
 80009b8:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80009bc:	f002 fca2 	bl	8003304 <HAL_Delay>
			LCD_DisplayChar(30, 35, "Generating Move...");
 80009c0:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <Single_Player+0x180>)
 80009c2:	2123      	movs	r1, #35	@ 0x23
 80009c4:	201e      	movs	r0, #30
 80009c6:	f000 fd9b 	bl	8001500 <LCD_DisplayChar>

			#if USE_AI_FOR_SINGLE_PLAYER == 0
			while(!Place_Coin(Generate_Random_Move(hrng), SECOND_PLAYER)); //generate random moves until one is valid
 80009ca:	bf00      	nop
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f829 	bl	8000a24 <Generate_Random_Move>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f844 	bl	8000a64 <Place_Coin>
 80009dc:	4603      	mov	r3, r0
 80009de:	f083 0301 	eor.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f1      	bne.n	80009cc <Single_Player+0x12c>
			#else
			//Intelligent AI move generator
			#endif

		}
		turns++;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <Single_Player+0x16c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <Single_Player+0x16c>)
 80009f0:	6013      	str	r3, [r2, #0]
	while(Game_Status() == ONGOING){
 80009f2:	f000 f86f 	bl	8000ad4 <Game_Status>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f43f af59 	beq.w	80008b0 <Single_Player+0x10>
	}
	addSchedulerEvent(DISPLAY_RESULTS_EVENT);
 80009fe:	2020      	movs	r0, #32
 8000a00:	f000 fe86 	bl	8001710 <addSchedulerEvent>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000158 	.word	0x20000158
 8000a10:	2000009c 	.word	0x2000009c
 8000a14:	2000015c 	.word	0x2000015c
 8000a18:	08007fd4 	.word	0x08007fd4
 8000a1c:	08007fe8 	.word	0x08007fe8
 8000a20:	08007ffc 	.word	0x08007ffc

08000a24 <Generate_Random_Move>:

int Generate_Random_Move(RNG_HandleTypeDef* hrng){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint32_t randNum = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
	HAL_RNG_GenerateRandomNumber(hrng, &randNum);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f005 fa52 	bl	8005ee0 <HAL_RNG_GenerateRandomNumber>

	return randNum % 7;
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <Generate_Random_Move+0x3c>)
 8000a40:	fba3 1302 	umull	r1, r3, r3, r2
 8000a44:	1ad1      	subs	r1, r2, r3
 8000a46:	0849      	lsrs	r1, r1, #1
 8000a48:	440b      	add	r3, r1
 8000a4a:	0899      	lsrs	r1, r3, #2
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	1ad1      	subs	r1, r2, r3
 8000a54:	460b      	mov	r3, r1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24924925 	.word	0x24924925

08000a64 <Place_Coin>:

bool Place_Coin(int position, int player){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	if(position > 6 || position < 0) return false;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	dc02      	bgt.n	8000a7a <Place_Coin+0x16>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	da01      	bge.n	8000a7e <Place_Coin+0x1a>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e024      	b.n	8000ac8 <Place_Coin+0x64>

	for(int i = NUM_ROWS-1; i >= 0; i--){
 8000a7e:	2305      	movs	r3, #5
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e01d      	b.n	8000ac0 <Place_Coin+0x5c>
		if(board[i][position] == 0){
 8000a84:	4912      	ldr	r1, [pc, #72]	@ (8000ad0 <Place_Coin+0x6c>)
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10f      	bne.n	8000aba <Place_Coin+0x56>
			Update_Board(i, position, player);
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff fe88 	bl	80007b4 <Update_Board>
			LCD_Clear(0, LCD_COLOR_WHITE);
 8000aa4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 fc79 	bl	80013a0 <LCD_Clear>
			Display_Board();
 8000aae:	f7ff fe4b 	bl	8000748 <Display_Board>
			Display_Coins();
 8000ab2:	f7ff fe97 	bl	80007e4 <Display_Coins>
			return true;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e006      	b.n	8000ac8 <Place_Coin+0x64>
	for(int i = NUM_ROWS-1; i >= 0; i--){
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dade      	bge.n	8000a84 <Place_Coin+0x20>
		}
	}

	return false;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000a4 	.word	0x200000a4

08000ad4 <Game_Status>:

void Two_Player(){
	//two-player mode code
}

GAME_RESULT Game_Status(){
 8000ad4:	b490      	push	{r4, r7}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
	//algo idea (brute force): first check for all vertical solutions, then horizontal, then diagonal
	
	//Check for wins in each position
	for(int i = 0; i < NUM_ROWS; i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e136      	b.n	8000d4e <Game_Status+0x27a>
		for(int j = 0; j < NUM_COLS; j++){
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	e12c      	b.n	8000d40 <Game_Status+0x26c>
			//If curr position is 0, don't check it
			if(board[i][j] != 0){
 8000ae6:	49a5      	ldr	r1, [pc, #660]	@ (8000d7c <Game_Status+0x2a8>)
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4613      	mov	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	4413      	add	r3, r2
 8000af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 811e 	beq.w	8000d3a <Game_Status+0x266>
				//Vertical win (only check if it won't exceed dimensions)
				if(j+3 < NUM_ROWS){
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	dc58      	bgt.n	8000bb6 <Game_Status+0xe2>
					if(board[i][j] == board[i][j+1] && board[i][j+1] == board[i][j+2] && board[i][j+2] == board[j+3]){
 8000b04:	499d      	ldr	r1, [pc, #628]	@ (8000d7c <Game_Status+0x2a8>)
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1c58      	adds	r0, r3, #1
 8000b1a:	4c98      	ldr	r4, [pc, #608]	@ (8000d7c <Game_Status+0x2a8>)
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	4403      	add	r3, r0
 8000b26:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d143      	bne.n	8000bb6 <Game_Status+0xe2>
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1c59      	adds	r1, r3, #1
 8000b32:	4892      	ldr	r0, [pc, #584]	@ (8000d7c <Game_Status+0x2a8>)
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	4613      	mov	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1c98      	adds	r0, r3, #2
 8000b46:	4c8d      	ldr	r4, [pc, #564]	@ (8000d7c <Game_Status+0x2a8>)
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	4403      	add	r3, r0
 8000b52:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d12d      	bne.n	8000bb6 <Game_Status+0xe2>
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c99      	adds	r1, r3, #2
 8000b5e:	4887      	ldr	r0, [pc, #540]	@ (8000d7c <Game_Status+0x2a8>)
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4613      	mov	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1cda      	adds	r2, r3, #3
 8000b74:	4613      	mov	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d7c <Game_Status+0x2a8>)
 8000b7e:	4413      	add	r3, r2
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d118      	bne.n	8000bb6 <Game_Status+0xe2>
						if(board[i][j] == 1){
 8000b84:	497d      	ldr	r1, [pc, #500]	@ (8000d7c <Game_Status+0x2a8>)
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <Game_Status+0xd4>
							num_blue_victories++;
 8000b9a:	4b79      	ldr	r3, [pc, #484]	@ (8000d80 <Game_Status+0x2ac>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a77      	ldr	r2, [pc, #476]	@ (8000d80 <Game_Status+0x2ac>)
 8000ba2:	6013      	str	r3, [r2, #0]
							return BLUE_WINS;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e101      	b.n	8000dac <Game_Status+0x2d8>
						} 
						else{
							num_red_victories++;
 8000ba8:	4b76      	ldr	r3, [pc, #472]	@ (8000d84 <Game_Status+0x2b0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a75      	ldr	r2, [pc, #468]	@ (8000d84 <Game_Status+0x2b0>)
 8000bb0:	6013      	str	r3, [r2, #0]
							return RED_WINS;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e0fa      	b.n	8000dac <Game_Status+0x2d8>
						}
					}
				}

				//Horizontal win (only check if it won't exceed dimensions)
				if(i+3 < NUM_COLS){
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	dc59      	bgt.n	8000c70 <Game_Status+0x19c>
					if(board[i][j] == board[i+1][j] && board[i+1][j] == board[i+2][j] && board[i+2][j] == board[i+3][j]){
 8000bbc:	496f      	ldr	r1, [pc, #444]	@ (8000d7c <Game_Status+0x2a8>)
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	4413      	add	r3, r2
 8000bca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	486a      	ldr	r0, [pc, #424]	@ (8000d7c <Game_Status+0x2a8>)
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000be2:	4299      	cmp	r1, r3
 8000be4:	d144      	bne.n	8000c70 <Game_Status+0x19c>
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	4964      	ldr	r1, [pc, #400]	@ (8000d7c <Game_Status+0x2a8>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1c9a      	adds	r2, r3, #2
 8000bfe:	485f      	ldr	r0, [pc, #380]	@ (8000d7c <Game_Status+0x2a8>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	4413      	add	r3, r2
 8000c0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	d12e      	bne.n	8000c70 <Game_Status+0x19c>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1c9a      	adds	r2, r3, #2
 8000c16:	4959      	ldr	r1, [pc, #356]	@ (8000d7c <Game_Status+0x2a8>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	4413      	add	r3, r2
 8000c22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	1cda      	adds	r2, r3, #3
 8000c2a:	4854      	ldr	r0, [pc, #336]	@ (8000d7c <Game_Status+0x2a8>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	d118      	bne.n	8000c70 <Game_Status+0x19c>
						if(board[i][j] == 1){
 8000c3e:	494f      	ldr	r1, [pc, #316]	@ (8000d7c <Game_Status+0x2a8>)
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d106      	bne.n	8000c62 <Game_Status+0x18e>
							num_blue_victories++;
 8000c54:	4b4a      	ldr	r3, [pc, #296]	@ (8000d80 <Game_Status+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a49      	ldr	r2, [pc, #292]	@ (8000d80 <Game_Status+0x2ac>)
 8000c5c:	6013      	str	r3, [r2, #0]
							return BLUE_WINS;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e0a4      	b.n	8000dac <Game_Status+0x2d8>
						}
						else{
							num_red_victories++;
 8000c62:	4b48      	ldr	r3, [pc, #288]	@ (8000d84 <Game_Status+0x2b0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a46      	ldr	r2, [pc, #280]	@ (8000d84 <Game_Status+0x2b0>)
 8000c6a:	6013      	str	r3, [r2, #0]
							return RED_WINS;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e09d      	b.n	8000dac <Game_Status+0x2d8>
						}
					}
				}

				//Diagonal win (only check if it won't exceed dimensions)
				if(i+3 < NUM_COLS && j+3 < NUM_ROWS){
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	dc61      	bgt.n	8000d3a <Game_Status+0x266>
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	dc5e      	bgt.n	8000d3a <Game_Status+0x266>
					if(board[i][j] == board[i+1][j+1] && board[i+1][j+1] == board[i+2][j+2] && board[i+2][j+2] == board[i+3][j+3]){
 8000c7c:	493f      	ldr	r1, [pc, #252]	@ (8000d7c <Game_Status+0x2a8>)
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4613      	mov	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1c58      	adds	r0, r3, #1
 8000c96:	4c39      	ldr	r4, [pc, #228]	@ (8000d7c <Game_Status+0x2a8>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	4403      	add	r3, r0
 8000ca0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d148      	bne.n	8000d3a <Game_Status+0x266>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c59      	adds	r1, r3, #1
 8000cb0:	4832      	ldr	r0, [pc, #200]	@ (8000d7c <Game_Status+0x2a8>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1c9a      	adds	r2, r3, #2
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1c98      	adds	r0, r3, #2
 8000cc6:	4c2d      	ldr	r4, [pc, #180]	@ (8000d7c <Game_Status+0x2a8>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	4403      	add	r3, r0
 8000cd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d130      	bne.n	8000d3a <Game_Status+0x266>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1c9a      	adds	r2, r3, #2
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c99      	adds	r1, r3, #2
 8000ce0:	4826      	ldr	r0, [pc, #152]	@ (8000d7c <Game_Status+0x2a8>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1cda      	adds	r2, r3, #3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1cd8      	adds	r0, r3, #3
 8000cf6:	4c21      	ldr	r4, [pc, #132]	@ (8000d7c <Game_Status+0x2a8>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	4403      	add	r3, r0
 8000d00:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d04:	4299      	cmp	r1, r3
 8000d06:	d118      	bne.n	8000d3a <Game_Status+0x266>
						if(board[i][j] == 1){
 8000d08:	491c      	ldr	r1, [pc, #112]	@ (8000d7c <Game_Status+0x2a8>)
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	1a9b      	subs	r3, r3, r2
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	4413      	add	r3, r2
 8000d16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d106      	bne.n	8000d2c <Game_Status+0x258>
							num_blue_victories++;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <Game_Status+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <Game_Status+0x2ac>)
 8000d26:	6013      	str	r3, [r2, #0]
							return BLUE_WINS;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e03f      	b.n	8000dac <Game_Status+0x2d8>
						}
						else{
							num_red_victories++;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <Game_Status+0x2b0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a14      	ldr	r2, [pc, #80]	@ (8000d84 <Game_Status+0x2b0>)
 8000d34:	6013      	str	r3, [r2, #0]
							return RED_WINS;
 8000d36:	2302      	movs	r3, #2
 8000d38:	e038      	b.n	8000dac <Game_Status+0x2d8>
		for(int j = 0; j < NUM_COLS; j++){
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	f77f aecf 	ble.w	8000ae6 <Game_Status+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	f77f aec5 	ble.w	8000ae0 <Game_Status+0xc>
			
		}
	}

	//Check for tie (board is full)
	for(int i = 0; i < NUM_ROWS; i++){
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	e01e      	b.n	8000d9a <Game_Status+0x2c6>
		for(int j = 0; j < NUM_COLS; j++){
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	e015      	b.n	8000d8e <Game_Status+0x2ba>
			if(board[i][j] == 0){
 8000d62:	4906      	ldr	r1, [pc, #24]	@ (8000d7c <Game_Status+0x2a8>)
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d107      	bne.n	8000d88 <Game_Status+0x2b4>
				return ONGOING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e017      	b.n	8000dac <Game_Status+0x2d8>
 8000d7c:	200000a4 	.word	0x200000a4
 8000d80:	2000014c 	.word	0x2000014c
 8000d84:	20000150 	.word	0x20000150
		for(int j = 0; j < NUM_COLS; j++){
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	dde6      	ble.n	8000d62 <Game_Status+0x28e>
	for(int i = 0; i < NUM_ROWS; i++){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	dddd      	ble.n	8000d5c <Game_Status+0x288>
			}
		}
	}

	num_ties++;
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <Game_Status+0x2e4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <Game_Status+0x2e4>)
 8000da8:	6013      	str	r3, [r2, #0]
	return TIE;
 8000daa:	2303      	movs	r3, #3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc90      	pop	{r4, r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000154 	.word	0x20000154

08000dbc <Display_Results>:

void Display_Results(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	GAME_RESULT result = Game_Status();
 8000dc2:	f7ff fe87 	bl	8000ad4 <Game_Status>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	switch(result){
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d019      	beq.n	8000e04 <Display_Results+0x48>
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	dc20      	bgt.n	8000e16 <Display_Results+0x5a>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d002      	beq.n	8000dde <Display_Results+0x22>
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d009      	beq.n	8000df0 <Display_Results+0x34>
 8000ddc:	e01b      	b.n	8000e16 <Display_Results+0x5a>
		case BLUE_WINS:
			LCD_SetTextColor(LCD_COLOR_BLUE);
 8000dde:	201f      	movs	r0, #31
 8000de0:	f000 fb00 	bl	80013e4 <LCD_SetTextColor>
			LCD_DisplayChar(65, 10, "Blue Wins!");
 8000de4:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <Display_Results+0xb0>)
 8000de6:	210a      	movs	r1, #10
 8000de8:	2041      	movs	r0, #65	@ 0x41
 8000dea:	f000 fb89 	bl	8001500 <LCD_DisplayChar>
			break;
 8000dee:	e01b      	b.n	8000e28 <Display_Results+0x6c>
		case RED_WINS:
			LCD_SetTextColor(LCD_COLOR_RED);
 8000df0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000df4:	f000 faf6 	bl	80013e4 <LCD_SetTextColor>
			LCD_DisplayChar(70, 10, "Red Wins!");
 8000df8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e70 <Display_Results+0xb4>)
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	2046      	movs	r0, #70	@ 0x46
 8000dfe:	f000 fb7f 	bl	8001500 <LCD_DisplayChar>
			break;
 8000e02:	e011      	b.n	8000e28 <Display_Results+0x6c>
		case TIE:
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 faed 	bl	80013e4 <LCD_SetTextColor>
			LCD_DisplayChar(60, 10, "It's a tie!");
 8000e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e74 <Display_Results+0xb8>)
 8000e0c:	210a      	movs	r1, #10
 8000e0e:	203c      	movs	r0, #60	@ 0x3c
 8000e10:	f000 fb76 	bl	8001500 <LCD_DisplayChar>
			break;
 8000e14:	e008      	b.n	8000e28 <Display_Results+0x6c>
		default:
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 fae4 	bl	80013e4 <LCD_SetTextColor>
			LCD_DisplayChar(80, 10, "Unknown erorr :(");
 8000e1c:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <Display_Results+0xbc>)
 8000e1e:	210a      	movs	r1, #10
 8000e20:	2050      	movs	r0, #80	@ 0x50
 8000e22:	f000 fb6d 	bl	8001500 <LCD_DisplayChar>
			break;
 8000e26:	bf00      	nop
	}
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 fadb 	bl	80013e4 <LCD_SetTextColor>
	LCD_DisplayChar(65, 45, "Show stats");
 8000e2e:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <Display_Results+0xc0>)
 8000e30:	212d      	movs	r1, #45	@ 0x2d
 8000e32:	2041      	movs	r0, #65	@ 0x41
 8000e34:	f000 fb64 	bl	8001500 <LCD_DisplayChar>

	while(1){
		if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8000e38:	4811      	ldr	r0, [pc, #68]	@ (8000e80 <Display_Results+0xc4>)
 8000e3a:	f000 fbae 	bl	800159a <returnTouchStateAndLocation>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f9      	bne.n	8000e38 <Display_Results+0x7c>
			LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <Display_Results+0xc4>)
 8000e46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e4a:	f000 fbb3 	bl	80015b4 <returnTouchQuadrant>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71bb      	strb	r3, [r7, #6]
			if(touchedQuadrant == BOTTOM_LEFT || touchedQuadrant == BOTTOM_RIGHT) break;
 8000e52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d004      	beq.n	8000e64 <Display_Results+0xa8>
 8000e5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d000      	beq.n	8000e64 <Display_Results+0xa8>
		if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8000e62:	e7e9      	b.n	8000e38 <Display_Results+0x7c>
		}
	}

	//show stats
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	08008010 	.word	0x08008010
 8000e70:	0800801c 	.word	0x0800801c
 8000e74:	08008028 	.word	0x08008028
 8000e78:	08008034 	.word	0x08008034
 8000e7c:	08008048 	.word	0x08008048
 8000e80:	2000009c 	.word	0x2000009c

08000e84 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){ //Button Interrupt Handler
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	DisableInterrupt(EXTI0_IRQ_NUMBER);
 8000e88:	2006      	movs	r0, #6
 8000e8a:	f000 f845 	bl	8000f18 <DisableInterrupt>
	
	Drop_Coin = 1;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <EXTI0_IRQHandler+0x20>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]

	ClearPendingEXTIBit(1 << GPIOA_PORT_NUMBER);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 f84d 	bl	8000f34 <ClearPendingEXTIBit>
	EnableInterrupt(EXTI0_IRQ_NUMBER);
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f000 f82e 	bl	8000efc <EnableInterrupt>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000015c 	.word	0x2000015c

08000ea8 <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef button;

	button.Pin = GPIO_PIN_0;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
	button.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	60bb      	str	r3, [r7, #8]
	button.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <Button_Init+0x4c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <Button_Init+0x4c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <Button_Init+0x4c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &button);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <Button_Init+0x50>)
 8000ee2:	f002 fb77 	bl	80035d4 <HAL_GPIO_Init>
	EnableInterrupt(EXTI0_IRQ_NUMBER);
 8000ee6:	2006      	movs	r0, #6
 8000ee8:	f000 f808 	bl	8000efc <EnableInterrupt>
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <EnableInterrupt>:
#include "InterruptControl.h"

void EnableInterrupt(IRQn_Type IRQ_Number){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_EnableIRQ(IRQ_Number);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fb39 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <DisableInterrupt>:

void DisableInterrupt(IRQn_Type IRQ_Number){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(IRQ_Number);
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fb39 	bl	800359e <HAL_NVIC_DisableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <ClearPendingEXTIBit>:

void ClearPendingInterrupt(IRQn_Type IRQ_Number){
	HAL_NVIC_ClearPendingIRQ(IRQ_Number);
}

void ClearPendingEXTIBit(uint8_t PinNumber){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	__HAL_GPIO_EXTI_CLEAR_FLAG(PinNumber);
 8000f3e:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <ClearPendingEXTIBit+0x1c>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	6153      	str	r3, [r2, #20]
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	40013c00 	.word	0x40013c00

08000f54 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a59      	ldr	r2, [pc, #356]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b57      	ldr	r3, [pc, #348]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a52      	ldr	r2, [pc, #328]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b4c      	ldr	r3, [pc, #304]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b49      	ldr	r3, [pc, #292]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b45      	ldr	r3, [pc, #276]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a44      	ldr	r2, [pc, #272]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b42      	ldr	r3, [pc, #264]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b3e      	ldr	r3, [pc, #248]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a36      	ldr	r2, [pc, #216]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a2f      	ldr	r2, [pc, #188]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <LCD_GPIO_Init+0x174>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800101e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001022:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001030:	230e      	movs	r3, #14
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4824      	ldr	r0, [pc, #144]	@ (80010cc <LCD_GPIO_Init+0x178>)
 800103c:	f002 faca 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001040:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001044:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4820      	ldr	r0, [pc, #128]	@ (80010d0 <LCD_GPIO_Init+0x17c>)
 800104e:	f002 fac1 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001052:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	481d      	ldr	r0, [pc, #116]	@ (80010d4 <LCD_GPIO_Init+0x180>)
 8001060:	f002 fab8 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001064:	2348      	movs	r3, #72	@ 0x48
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	481a      	ldr	r0, [pc, #104]	@ (80010d8 <LCD_GPIO_Init+0x184>)
 8001070:	f002 fab0 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4816      	ldr	r0, [pc, #88]	@ (80010dc <LCD_GPIO_Init+0x188>)
 8001082:	f002 faa7 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001086:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800108a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <LCD_GPIO_Init+0x18c>)
 8001094:	f002 fa9e 	bl	80035d4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001098:	2303      	movs	r3, #3
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800109c:	2309      	movs	r3, #9
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <LCD_GPIO_Init+0x17c>)
 80010a8:	f002 fa94 	bl	80035d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80010ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <LCD_GPIO_Init+0x18c>)
 80010ba:	f002 fa8b 	bl	80035d4 <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	3730      	adds	r7, #48	@ 0x30
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021400 	.word	0x40021400
 80010e0:	40021800 	.word	0x40021800

080010e4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	@ 0x40
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80010f2:	23f0      	movs	r3, #240	@ 0xf0
 80010f4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80010fa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010fe:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001104:	23ff      	movs	r3, #255	@ 0xff
 8001106:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800110c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001112:	2305      	movs	r3, #5
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <LTCD_Layer_Init+0x78>)
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001120:	23f0      	movs	r3, #240	@ 0xf0
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001124:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <LTCD_Layer_Init+0x7c>)
 8001146:	f003 fe87 	bl	8004e58 <HAL_LTDC_ConfigLayer>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001150:	f000 fa12 	bl	8001578 <LCD_Error_Handler>
	}
}
 8001154:	bf00      	nop
 8001156:	3740      	adds	r7, #64	@ 0x40
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000023c 	.word	0x2000023c
 8001160:	20000160 	.word	0x20000160

08001164 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <LTCD__Init+0xb0>)
 800116a:	4a2b      	ldr	r2, [pc, #172]	@ (8001218 <LTCD__Init+0xb4>)
 800116c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <LTCD__Init+0xb0>)
 8001170:	2209      	movs	r2, #9
 8001172:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <LTCD__Init+0xb0>)
 8001176:	2201      	movs	r2, #1
 8001178:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <LTCD__Init+0xb0>)
 800117c:	221d      	movs	r2, #29
 800117e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <LTCD__Init+0xb0>)
 8001182:	2203      	movs	r2, #3
 8001184:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <LTCD__Init+0xb0>)
 8001188:	f240 120d 	movw	r2, #269	@ 0x10d
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <LTCD__Init+0xb0>)
 8001190:	f240 1243 	movw	r2, #323	@ 0x143
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001196:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <LTCD__Init+0xb0>)
 8001198:	f240 1217 	movw	r2, #279	@ 0x117
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <LTCD__Init+0xb0>)
 80011a0:	f240 1247 	movw	r2, #327	@ 0x147
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <LTCD__Init+0xb0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <LTCD__Init+0xb0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <LTCD__Init+0xb0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <LTCD__Init+0xb8>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <LTCD__Init+0xb8>)
 80011c6:	22c0      	movs	r2, #192	@ 0xc0
 80011c8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <LTCD__Init+0xb8>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <LTCD__Init+0xb8>)
 80011d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <LTCD__Init+0xb8>)
 80011da:	f004 fc97 	bl	8005b0c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <LTCD__Init+0xb0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <LTCD__Init+0xb0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <LTCD__Init+0xb0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <LTCD__Init+0xb0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80011f6:	f7ff fead 	bl	8000f54 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011fa:	4806      	ldr	r0, [pc, #24]	@ (8001214 <LTCD__Init+0xb0>)
 80011fc:	f003 fd5c 	bl	8004cb8 <HAL_LTDC_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001206:	f000 f9b7 	bl	8001578 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800120a:	f000 fab3 	bl	8001774 <ili9341_Init>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000160 	.word	0x20000160
 8001218:	40016800 	.word	0x40016800
 800121c:	20000208 	.word	0x20000208

08001220 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	460b      	mov	r3, r1
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	461a      	mov	r2, r3
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4413      	add	r3, r2
 8001242:	4905      	ldr	r1, [pc, #20]	@ (8001258 <LCD_Draw_Pixel+0x38>)
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000023c 	.word	0x2000023c

0800125c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	4603      	mov	r3, r0
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]
 8001276:	4613      	mov	r3, r2
 8001278:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	425b      	negs	r3, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]
 8001282:	e034      	b.n	80012ee <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	425b      	negs	r3, r3
 8001288:	b29b      	uxth	r3, r3
 800128a:	81bb      	strh	r3, [r7, #12]
 800128c:	e024      	b.n	80012d8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800128e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001292:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001296:	fb03 f202 	mul.w	r2, r3, r2
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80012a2:	fb01 f303 	mul.w	r3, r1, r3
 80012a6:	441a      	add	r2, r3
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	8879      	ldrh	r1, [r7, #2]
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dc0b      	bgt.n	80012cc <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80012b4:	89ba      	ldrh	r2, [r7, #12]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4413      	add	r3, r2
 80012ba:	b298      	uxth	r0, r3
 80012bc:	89fa      	ldrh	r2, [r7, #14]
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff ffaa 	bl	8001220 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80012cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	81bb      	strh	r3, [r7, #12]
 80012d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	429a      	cmp	r2, r3
 80012e0:	ddd5      	ble.n	800128e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80012e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	81fb      	strh	r3, [r7, #14]
 80012ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	ddc5      	ble.n	8001284 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}

08001302 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	4604      	mov	r4, r0
 800130a:	4608      	mov	r0, r1
 800130c:	4611      	mov	r1, r2
 800130e:	461a      	mov	r2, r3
 8001310:	4623      	mov	r3, r4
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	4603      	mov	r3, r0
 8001316:	80bb      	strh	r3, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	81fb      	strh	r3, [r7, #14]
 8001324:	e00b      	b.n	800133e <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001326:	89fa      	ldrh	r2, [r7, #14]
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	b299      	uxth	r1, r3
 800132e:	883a      	ldrh	r2, [r7, #0]
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff74 	bl	8001220 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	3301      	adds	r3, #1
 800133c:	81fb      	strh	r3, [r7, #14]
 800133e:	89fa      	ldrh	r2, [r7, #14]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3ef      	bcc.n	8001326 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}

08001350 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	4603      	mov	r3, r0
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
 800136a:	4613      	mov	r3, r2
 800136c:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	e00b      	b.n	800138c <LCD_Draw_Horizontal_Line+0x3c>
	{
		LCD_Draw_Pixel(i+x, y, color);
 8001374:	89fa      	ldrh	r2, [r7, #14]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4413      	add	r3, r2
 800137a:	b29b      	uxth	r3, r3
 800137c:	883a      	ldrh	r2, [r7, #0]
 800137e:	88b9      	ldrh	r1, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff4d 	bl	8001220 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	3301      	adds	r3, #1
 800138a:	81fb      	strh	r3, [r7, #14]
 800138c:	89fa      	ldrh	r2, [r7, #14]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3ef      	bcc.n	8001374 <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
	...

080013a0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10e      	bne.n	80013d4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e007      	b.n	80013cc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80013bc:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <LCD_Clear+0x40>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	88ba      	ldrh	r2, [r7, #4]
 80013c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80013d2:	d3f3      	bcc.n	80013bc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	2000023c 	.word	0x2000023c

080013e4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <LCD_SetTextColor+0x1c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	8013      	strh	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	20000000 	.word	0x20000000

08001404 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <LCD_SetFont+0x1c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000238 	.word	0x20000238

08001424 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	603a      	str	r2, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	460b      	mov	r3, r1
 8001432:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e04c      	b.n	80014dc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	e03f      	b.n	80014c8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <LCD_Draw_Char+0xd0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	4a27      	ldr	r2, [pc, #156]	@ (80014f8 <LCD_Draw_Char+0xd4>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	b29b      	uxth	r3, r3
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	2280      	movs	r2, #128	@ 0x80
 8001468:	409a      	lsls	r2, r3
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	fa42 f303 	asr.w	r3, r2, r3
 8001470:	400b      	ands	r3, r1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d104      	bne.n	8001480 <LCD_Draw_Char+0x5c>
 8001476:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <LCD_Draw_Char+0xd0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d920      	bls.n	80014c2 <LCD_Draw_Char+0x9e>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	fa42 f303 	asr.w	r3, r2, r3
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <LCD_Draw_Char+0x80>
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <LCD_Draw_Char+0xd0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d80e      	bhi.n	80014c2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4413      	add	r3, r2
 80014ac:	b298      	uxth	r0, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4a10      	ldr	r2, [pc, #64]	@ (80014fc <LCD_Draw_Char+0xd8>)
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff feaf 	bl	8001220 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <LCD_Draw_Char+0xd0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	889b      	ldrh	r3, [r3, #4]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d3b8      	bcc.n	8001448 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <LCD_Draw_Char+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	88db      	ldrh	r3, [r3, #6]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3ab      	bcc.n	8001442 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000238 	.word	0x20000238
 80014f8:	aaaaaaab 	.word	0xaaaaaaab
 80014fc:	20000000 	.word	0x20000000

08001500 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, char text_to_print[])
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	603a      	str	r2, [r7, #0]
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	460b      	mov	r3, r1
 800150e:	80bb      	strh	r3, [r7, #4]
	//altering function to print strings. Printing one char at a time is more customizeable, but takes too long.
	//Might switch back to printing char by char when everything is functional to make it prettier.
	for(int i = 0; i < strlen(text_to_print); i++){
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e022      	b.n	800155c <LCD_DisplayChar+0x5c>
		int print_increment = 10*i;
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	613b      	str	r3, [r7, #16]
		uint8_t Ascii = text_to_print[i] - 32;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3b20      	subs	r3, #32
 800152c:	73fb      	strb	r3, [r7, #15]
		LCD_Draw_Char(Xpos+print_increment, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	b29a      	uxth	r2, r3
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	4413      	add	r3, r2
 8001536:	b298      	uxth	r0, r3
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <LCD_DisplayChar+0x74>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <LCD_DisplayChar+0x74>)
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	88c9      	ldrh	r1, [r1, #6]
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	441a      	add	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff ff67 	bl	8001424 <LCD_Draw_Char>
	for(int i = 0; i < strlen(text_to_print); i++){
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f7fe fe47 	bl	80001f0 <strlen>
 8001562:	4602      	mov	r2, r0
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	429a      	cmp	r2, r3
 8001568:	d8d5      	bhi.n	8001516 <LCD_DisplayChar+0x16>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000238 	.word	0x20000238

08001578 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <LCD_Error_Handler+0x8>

08001584 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001588:	f001 fa8f 	bl	8002aaa <STMPE811_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b02      	cmp	r3, #2
 8001590:	d001      	beq.n	8001596 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001592:	bf00      	nop
 8001594:	e7fd      	b.n	8001592 <InitializeLCDTouch+0xe>
  }
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}

0800159a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f001 fb39 	bl	8002c1a <STMPE811_ReadTouch>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <returnTouchQuadrant>:
void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
	STMPE811_Write(RegToWrite, writeData);
}

LCD_Quadrant returnTouchQuadrant(STMPE811_TouchData touchLocation){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	463b      	mov	r3, r7
 80015bc:	e883 0003 	stmia.w	r3, {r0, r1}
	//DIMENSIONS: X: (0, 240) ; Y: (0, 320)

	if(touchLocation.x >= 0 && touchLocation.x < 120 && touchLocation.y >= 0 && touchLocation.y < 160){
 80015c0:	883b      	ldrh	r3, [r7, #0]
 80015c2:	2b77      	cmp	r3, #119	@ 0x77
 80015c4:	d807      	bhi.n	80015d6 <returnTouchQuadrant+0x22>
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	2b9f      	cmp	r3, #159	@ 0x9f
 80015ca:	d804      	bhi.n	80015d6 <returnTouchQuadrant+0x22>
		printf("Top Right\n");
 80015cc:	481e      	ldr	r0, [pc, #120]	@ (8001648 <returnTouchQuadrant+0x94>)
 80015ce:	f005 fe55 	bl	800727c <puts>
		return TOP_RIGHT;
 80015d2:	2302      	movs	r3, #2
 80015d4:	e033      	b.n	800163e <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 120 && touchLocation.x <= 240 && touchLocation.y >= 0 && touchLocation.y < 160){
 80015d6:	883b      	ldrh	r3, [r7, #0]
 80015d8:	2b77      	cmp	r3, #119	@ 0x77
 80015da:	d90a      	bls.n	80015f2 <returnTouchQuadrant+0x3e>
 80015dc:	883b      	ldrh	r3, [r7, #0]
 80015de:	2bf0      	cmp	r3, #240	@ 0xf0
 80015e0:	d807      	bhi.n	80015f2 <returnTouchQuadrant+0x3e>
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	2b9f      	cmp	r3, #159	@ 0x9f
 80015e6:	d804      	bhi.n	80015f2 <returnTouchQuadrant+0x3e>
		printf("Top Left\n");
 80015e8:	4818      	ldr	r0, [pc, #96]	@ (800164c <returnTouchQuadrant+0x98>)
 80015ea:	f005 fe47 	bl	800727c <puts>
		return TOP_LEFT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e025      	b.n	800163e <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 0 && touchLocation.x < 120 && touchLocation.y >= 160 && touchLocation.y <= 320){
 80015f2:	883b      	ldrh	r3, [r7, #0]
 80015f4:	2b77      	cmp	r3, #119	@ 0x77
 80015f6:	d80b      	bhi.n	8001610 <returnTouchQuadrant+0x5c>
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	2b9f      	cmp	r3, #159	@ 0x9f
 80015fc:	d908      	bls.n	8001610 <returnTouchQuadrant+0x5c>
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001604:	d804      	bhi.n	8001610 <returnTouchQuadrant+0x5c>
		printf("Bottom Right\n");
 8001606:	4812      	ldr	r0, [pc, #72]	@ (8001650 <returnTouchQuadrant+0x9c>)
 8001608:	f005 fe38 	bl	800727c <puts>
		return BOTTOM_RIGHT;
 800160c:	2301      	movs	r3, #1
 800160e:	e016      	b.n	800163e <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 120 && touchLocation.x <= 240 && touchLocation.y >= 160 && touchLocation.y <= 320){
 8001610:	883b      	ldrh	r3, [r7, #0]
 8001612:	2b77      	cmp	r3, #119	@ 0x77
 8001614:	d90e      	bls.n	8001634 <returnTouchQuadrant+0x80>
 8001616:	883b      	ldrh	r3, [r7, #0]
 8001618:	2bf0      	cmp	r3, #240	@ 0xf0
 800161a:	d80b      	bhi.n	8001634 <returnTouchQuadrant+0x80>
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	2b9f      	cmp	r3, #159	@ 0x9f
 8001620:	d908      	bls.n	8001634 <returnTouchQuadrant+0x80>
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001628:	d804      	bhi.n	8001634 <returnTouchQuadrant+0x80>
		printf("Bottom Left\n");
 800162a:	480a      	ldr	r0, [pc, #40]	@ (8001654 <returnTouchQuadrant+0xa0>)
 800162c:	f005 fe26 	bl	800727c <puts>
		return BOTTOM_LEFT;
 8001630:	2300      	movs	r3, #0
 8001632:	e004      	b.n	800163e <returnTouchQuadrant+0x8a>
	}

	else{
		printf("Detection Error\n");
 8001634:	4808      	ldr	r0, [pc, #32]	@ (8001658 <returnTouchQuadrant+0xa4>)
 8001636:	f005 fe21 	bl	800727c <puts>
		return DETECTION_ERROR;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08008054 	.word	0x08008054
 800164c:	08008060 	.word	0x08008060
 8001650:	0800806c 	.word	0x0800806c
 8001654:	0800807c 	.word	0x0800807c
 8001658:	08008088 	.word	0x08008088

0800165c <LED_Init>:
#include "LED_Driver.h"

void LED_Init(uint8_t LED){
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef led;
	switch(LED){
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <LED_Init+0x16>
 800166c:	2b01      	cmp	r3, #1
 800166e:	d00a      	beq.n	8001686 <LED_Init+0x2a>
 8001670:	e012      	b.n	8001698 <LED_Init+0x3c>
		case 0:
			led.Pin = GPIO_PIN_14;
 8001672:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
			led.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	61bb      	str	r3, [r7, #24]
			led.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
			break;
 8001684:	e008      	b.n	8001698 <LED_Init+0x3c>
		case 1:
			led.Pin = GPIO_PIN_13;
 8001686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800168a:	60fb      	str	r3, [r7, #12]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
			led.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	61bb      	str	r3, [r7, #24]
			led.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
	}

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <LED_Init+0x6c>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <LED_Init+0x6c>)
 80016a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <LED_Init+0x6c>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOG, &led);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4619      	mov	r1, r3
 80016ba:	4804      	ldr	r0, [pc, #16]	@ (80016cc <LED_Init+0x70>)
 80016bc:	f001 ff8a 	bl	80035d4 <HAL_GPIO_Init>
}
 80016c0:	bf00      	nop
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021800 	.word	0x40021800

080016d0 <TurnOffLED>:
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
			break;
	}
}

void TurnOffLED(uint8_t LED){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	switch(LED){
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <TurnOffLED+0x16>
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d007      	beq.n	80016f4 <TurnOffLED+0x24>

		case 1:
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
			break;
	}
}
 80016e4:	e00d      	b.n	8001702 <TurnOffLED+0x32>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ec:	4807      	ldr	r0, [pc, #28]	@ (800170c <TurnOffLED+0x3c>)
 80016ee:	f002 fa29 	bl	8003b44 <HAL_GPIO_WritePin>
			break;
 80016f2:	e006      	b.n	8001702 <TurnOffLED+0x32>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016fa:	4804      	ldr	r0, [pc, #16]	@ (800170c <TurnOffLED+0x3c>)
 80016fc:	f002 fa22 	bl	8003b44 <HAL_GPIO_WritePin>
			break;
 8001700:	bf00      	nop
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021800 	.word	0x40021800

08001710 <addSchedulerEvent>:
#include "Scheduler.h"
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event){
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <addSchedulerEvent+0x20>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	4a03      	ldr	r2, [pc, #12]	@ (8001730 <addSchedulerEvent+0x20>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20025a3c 	.word	0x20025a3c

08001734 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	43da      	mvns	r2, r3
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <removeSchedulerEvent+0x24>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4013      	ands	r3, r2
 8001746:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <removeSchedulerEvent+0x24>)
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20025a3c 	.word	0x20025a3c

0800175c <getScheduledEvents>:

uint32_t getScheduledEvents(){
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <getScheduledEvents+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20025a3c 	.word	0x20025a3c

08001774 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001778:	f000 f9fe 	bl	8001b78 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800177c:	20ca      	movs	r0, #202	@ 0xca
 800177e:	f000 f943 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001782:	20c3      	movs	r0, #195	@ 0xc3
 8001784:	f000 f94d 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001788:	2008      	movs	r0, #8
 800178a:	f000 f94a 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800178e:	2050      	movs	r0, #80	@ 0x50
 8001790:	f000 f947 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001794:	20cf      	movs	r0, #207	@ 0xcf
 8001796:	f000 f937 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f941 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80017a0:	20c1      	movs	r0, #193	@ 0xc1
 80017a2:	f000 f93e 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80017a6:	2030      	movs	r0, #48	@ 0x30
 80017a8:	f000 f93b 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80017ac:	20ed      	movs	r0, #237	@ 0xed
 80017ae:	f000 f92b 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80017b2:	2064      	movs	r0, #100	@ 0x64
 80017b4:	f000 f935 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f932 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80017be:	2012      	movs	r0, #18
 80017c0:	f000 f92f 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80017c4:	2081      	movs	r0, #129	@ 0x81
 80017c6:	f000 f92c 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80017ca:	20e8      	movs	r0, #232	@ 0xe8
 80017cc:	f000 f91c 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80017d0:	2085      	movs	r0, #133	@ 0x85
 80017d2:	f000 f926 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f923 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80017dc:	2078      	movs	r0, #120	@ 0x78
 80017de:	f000 f920 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80017e2:	20cb      	movs	r0, #203	@ 0xcb
 80017e4:	f000 f910 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80017e8:	2039      	movs	r0, #57	@ 0x39
 80017ea:	f000 f91a 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80017ee:	202c      	movs	r0, #44	@ 0x2c
 80017f0:	f000 f917 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f914 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80017fa:	2034      	movs	r0, #52	@ 0x34
 80017fc:	f000 f911 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001800:	2002      	movs	r0, #2
 8001802:	f000 f90e 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001806:	20f7      	movs	r0, #247	@ 0xf7
 8001808:	f000 f8fe 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800180c:	2020      	movs	r0, #32
 800180e:	f000 f908 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001812:	20ea      	movs	r0, #234	@ 0xea
 8001814:	f000 f8f8 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f902 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f8ff 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001824:	20b1      	movs	r0, #177	@ 0xb1
 8001826:	f000 f8ef 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f8f9 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001830:	201b      	movs	r0, #27
 8001832:	f000 f8f6 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001836:	20b6      	movs	r0, #182	@ 0xb6
 8001838:	f000 f8e6 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800183c:	200a      	movs	r0, #10
 800183e:	f000 f8f0 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001842:	20a2      	movs	r0, #162	@ 0xa2
 8001844:	f000 f8ed 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001848:	20c0      	movs	r0, #192	@ 0xc0
 800184a:	f000 f8dd 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800184e:	2010      	movs	r0, #16
 8001850:	f000 f8e7 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001854:	20c1      	movs	r0, #193	@ 0xc1
 8001856:	f000 f8d7 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800185a:	2010      	movs	r0, #16
 800185c:	f000 f8e1 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001860:	20c5      	movs	r0, #197	@ 0xc5
 8001862:	f000 f8d1 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001866:	2045      	movs	r0, #69	@ 0x45
 8001868:	f000 f8db 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800186c:	2015      	movs	r0, #21
 800186e:	f000 f8d8 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001872:	20c7      	movs	r0, #199	@ 0xc7
 8001874:	f000 f8c8 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001878:	2090      	movs	r0, #144	@ 0x90
 800187a:	f000 f8d2 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800187e:	2036      	movs	r0, #54	@ 0x36
 8001880:	f000 f8c2 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001884:	20c8      	movs	r0, #200	@ 0xc8
 8001886:	f000 f8cc 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800188a:	20f2      	movs	r0, #242	@ 0xf2
 800188c:	f000 f8bc 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 f8c6 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001896:	20b0      	movs	r0, #176	@ 0xb0
 8001898:	f000 f8b6 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800189c:	20c2      	movs	r0, #194	@ 0xc2
 800189e:	f000 f8c0 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80018a2:	20b6      	movs	r0, #182	@ 0xb6
 80018a4:	f000 f8b0 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80018a8:	200a      	movs	r0, #10
 80018aa:	f000 f8ba 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80018ae:	20a7      	movs	r0, #167	@ 0xa7
 80018b0:	f000 f8b7 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80018b4:	2027      	movs	r0, #39	@ 0x27
 80018b6:	f000 f8b4 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80018ba:	2004      	movs	r0, #4
 80018bc:	f000 f8b1 	bl	8001a22 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80018c0:	202a      	movs	r0, #42	@ 0x2a
 80018c2:	f000 f8a1 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f8ab 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f000 f8a8 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f8a5 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80018d8:	20ef      	movs	r0, #239	@ 0xef
 80018da:	f000 f8a2 	bl	8001a22 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80018de:	202b      	movs	r0, #43	@ 0x2b
 80018e0:	f000 f892 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 f89c 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f899 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f000 f896 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80018f6:	203f      	movs	r0, #63	@ 0x3f
 80018f8:	f000 f893 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80018fc:	20f6      	movs	r0, #246	@ 0xf6
 80018fe:	f000 f883 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 f88d 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001908:	2000      	movs	r0, #0
 800190a:	f000 f88a 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800190e:	2006      	movs	r0, #6
 8001910:	f000 f887 	bl	8001a22 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001914:	202c      	movs	r0, #44	@ 0x2c
 8001916:	f000 f877 	bl	8001a08 <ili9341_Write_Reg>
  LCD_Delay(200);
 800191a:	20c8      	movs	r0, #200	@ 0xc8
 800191c:	f000 f9e8 	bl	8001cf0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001920:	2026      	movs	r0, #38	@ 0x26
 8001922:	f000 f871 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001926:	2001      	movs	r0, #1
 8001928:	f000 f87b 	bl	8001a22 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800192c:	20e0      	movs	r0, #224	@ 0xe0
 800192e:	f000 f86b 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f875 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001938:	2029      	movs	r0, #41	@ 0x29
 800193a:	f000 f872 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800193e:	2024      	movs	r0, #36	@ 0x24
 8001940:	f000 f86f 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001944:	200c      	movs	r0, #12
 8001946:	f000 f86c 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800194a:	200e      	movs	r0, #14
 800194c:	f000 f869 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001950:	2009      	movs	r0, #9
 8001952:	f000 f866 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001956:	204e      	movs	r0, #78	@ 0x4e
 8001958:	f000 f863 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800195c:	2078      	movs	r0, #120	@ 0x78
 800195e:	f000 f860 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001962:	203c      	movs	r0, #60	@ 0x3c
 8001964:	f000 f85d 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001968:	2009      	movs	r0, #9
 800196a:	f000 f85a 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800196e:	2013      	movs	r0, #19
 8001970:	f000 f857 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001974:	2005      	movs	r0, #5
 8001976:	f000 f854 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800197a:	2017      	movs	r0, #23
 800197c:	f000 f851 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001980:	2011      	movs	r0, #17
 8001982:	f000 f84e 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f84b 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800198c:	20e1      	movs	r0, #225	@ 0xe1
 800198e:	f000 f83b 	bl	8001a08 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f845 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001998:	2016      	movs	r0, #22
 800199a:	f000 f842 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800199e:	201b      	movs	r0, #27
 80019a0:	f000 f83f 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80019a4:	2004      	movs	r0, #4
 80019a6:	f000 f83c 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80019aa:	2011      	movs	r0, #17
 80019ac:	f000 f839 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80019b0:	2007      	movs	r0, #7
 80019b2:	f000 f836 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80019b6:	2031      	movs	r0, #49	@ 0x31
 80019b8:	f000 f833 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80019bc:	2033      	movs	r0, #51	@ 0x33
 80019be:	f000 f830 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80019c2:	2042      	movs	r0, #66	@ 0x42
 80019c4:	f000 f82d 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80019c8:	2005      	movs	r0, #5
 80019ca:	f000 f82a 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80019ce:	200c      	movs	r0, #12
 80019d0:	f000 f827 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f000 f824 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80019da:	2028      	movs	r0, #40	@ 0x28
 80019dc:	f000 f821 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80019e0:	202f      	movs	r0, #47	@ 0x2f
 80019e2:	f000 f81e 	bl	8001a22 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f81b 	bl	8001a22 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80019ec:	2011      	movs	r0, #17
 80019ee:	f000 f80b 	bl	8001a08 <ili9341_Write_Reg>
  LCD_Delay(200);
 80019f2:	20c8      	movs	r0, #200	@ 0xc8
 80019f4:	f000 f97c 	bl	8001cf0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80019f8:	2029      	movs	r0, #41	@ 0x29
 80019fa:	f000 f805 	bl	8001a08 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80019fe:	202c      	movs	r0, #44	@ 0x2c
 8001a00:	f000 f802 	bl	8001a08 <ili9341_Write_Reg>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f949 	bl	8001cac <LCD_IO_WriteReg>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f91a 	bl	8001c68 <LCD_IO_WriteData>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a40:	4819      	ldr	r0, [pc, #100]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a42:	f004 fc98 	bl	8006376 <HAL_SPI_GetState>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d12b      	bne.n	8001aa4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a4e:	4a17      	ldr	r2, [pc, #92]	@ (8001aac <SPI_Init+0x70>)
 8001a50:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a54:	2218      	movs	r2, #24
 8001a56:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001a64:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a70:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a72:	2207      	movs	r2, #7
 8001a74:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a88:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a92:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a96:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001a98:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <SPI_Init+0x6c>)
 8001a9a:	f000 f833 	bl	8001b04 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a9e:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <SPI_Init+0x6c>)
 8001aa0:	f004 fa74 	bl	8005f8c <HAL_SPI_Init>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20025a40 	.word	0x20025a40
 8001aac:	40015000 	.word	0x40015000

08001ab0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <SPI_Write+0x34>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1db9      	adds	r1, r7, #6
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <SPI_Write+0x38>)
 8001ac8:	f004 fb11 	bl	80060ee <HAL_SPI_Transmit>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001ad6:	f000 f809 	bl	8001aec <SPI_Error>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	20025a40 	.word	0x20025a40

08001aec <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001af0:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <SPI_Error+0x14>)
 8001af2:	f004 fad4 	bl	800609e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001af6:	f7ff ffa1 	bl	8001a3c <SPI_Init>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20025a40 	.word	0x20025a40

08001b04 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <SPI_MspInit+0x6c>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	4a16      	ldr	r2, [pc, #88]	@ (8001b70 <SPI_MspInit+0x6c>)
 8001b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <SPI_MspInit+0x6c>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <SPI_MspInit+0x6c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	4a0f      	ldr	r2, [pc, #60]	@ (8001b70 <SPI_MspInit+0x6c>)
 8001b32:	f043 0320 	orr.w	r3, r3, #32
 8001b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <SPI_MspInit+0x6c>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001b44:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001b52:	2301      	movs	r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001b56:	2305      	movs	r3, #5
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4804      	ldr	r0, [pc, #16]	@ (8001b74 <SPI_MspInit+0x70>)
 8001b62:	f001 fd37 	bl	80035d4 <HAL_GPIO_Init>
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40021400 	.word	0x40021400

08001b78 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <LCD_IO_Init+0xe0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d164      	bne.n	8001c50 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001b86:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <LCD_IO_Init+0xe0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a31      	ldr	r2, [pc, #196]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4827      	ldr	r0, [pc, #156]	@ (8001c60 <LCD_IO_Init+0xe8>)
 8001bc2:	f001 fd07 	bl	80035d4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001be2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4819      	ldr	r0, [pc, #100]	@ (8001c60 <LCD_IO_Init+0xe8>)
 8001bfc:	f001 fcea 	bl	80035d4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <LCD_IO_Init+0xe4>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <LCD_IO_Init+0xec>)
 8001c34:	f001 fcce 	bl	80035d4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <LCD_IO_Init+0xec>)
 8001c3e:	f001 ff81 	bl	8003b44 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001c42:	2201      	movs	r2, #1
 8001c44:	2104      	movs	r1, #4
 8001c46:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <LCD_IO_Init+0xec>)
 8001c48:	f001 ff7c 	bl	8003b44 <HAL_GPIO_WritePin>

    SPI_Init();
 8001c4c:	f7ff fef6 	bl	8001a3c <SPI_Init>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20025a98 	.word	0x20025a98
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40020800 	.word	0x40020800

08001c68 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c72:	2201      	movs	r2, #1
 8001c74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c78:	480a      	ldr	r0, [pc, #40]	@ (8001ca4 <LCD_IO_WriteData+0x3c>)
 8001c7a:	f001 ff63 	bl	8003b44 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2104      	movs	r1, #4
 8001c82:	4809      	ldr	r0, [pc, #36]	@ (8001ca8 <LCD_IO_WriteData+0x40>)
 8001c84:	f001 ff5e 	bl	8003b44 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff10 	bl	8001ab0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c90:	2201      	movs	r2, #1
 8001c92:	2104      	movs	r1, #4
 8001c94:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <LCD_IO_WriteData+0x40>)
 8001c96:	f001 ff55 	bl	8003b44 <HAL_GPIO_WritePin>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40020800 	.word	0x40020800

08001cac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cbc:	480a      	ldr	r0, [pc, #40]	@ (8001ce8 <LCD_IO_WriteReg+0x3c>)
 8001cbe:	f001 ff41 	bl	8003b44 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4809      	ldr	r0, [pc, #36]	@ (8001cec <LCD_IO_WriteReg+0x40>)
 8001cc8:	f001 ff3c 	bl	8003b44 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff feed 	bl	8001ab0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2104      	movs	r1, #4
 8001cda:	4804      	ldr	r0, [pc, #16]	@ (8001cec <LCD_IO_WriteReg+0x40>)
 8001cdc:	f001 ff32 	bl	8003b44 <HAL_GPIO_WritePin>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40020800 	.word	0x40020800

08001cf0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f001 fb03 	bl	8003304 <HAL_Delay>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8001d0e:	f005 f90d 	bl	8006f2c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d12:	f001 fa85 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d16:	f000 f891 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1a:	f000 fa81 	bl	8002220 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001d1e:	f000 f937 	bl	8001f90 <MX_LTDC_Init>
  MX_RNG_Init();
 8001d22:	f000 f9e7 	bl	80020f4 <MX_RNG_Init>
  MX_TIM2_Init();
 8001d26:	f000 fa2f 	bl	8002188 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001d2a:	f000 f9f7 	bl	800211c <MX_SPI5_Init>
  MX_I2C3_Init();
 8001d2e:	f000 f8ef 	bl	8001f10 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001d32:	f7fe fc2d 	bl	8000590 <ApplicationInit>
  // LCD_Visual_Demo();
  HAL_Delay(5000);
 8001d36:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d3a:	f001 fae3 	bl	8003304 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  // LCD_Touch_Polling_Demo(); // This function Will not return
#endif

  GAME_STATE state = MENU;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
  //State Machine Loop
  while(1){
    if(state == MENU){
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12a      	bne.n	8001d9e <main+0x96>
      printf("%d\n", state);
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4838      	ldr	r0, [pc, #224]	@ (8001e30 <main+0x128>)
 8001d4e:	f005 fa2d 	bl	80071ac <iprintf>
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 8001d52:	f7ff fd03 	bl	800175c <getScheduledEvents>
 8001d56:	60b8      	str	r0, [r7, #8]
        
        if(scheduledEvents && DISPLAY_MENU_SCREEN_EVENT){
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <main+0x60>
          Display_Menu_Screen();
 8001d5e:	f7fe fc5d 	bl	800061c <Display_Menu_Screen>
          removeSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff fce6 	bl	8001734 <removeSchedulerEvent>
        }

        if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8001d68:	4832      	ldr	r0, [pc, #200]	@ (8001e34 <main+0x12c>)
 8001d6a:	f7ff fc16 	bl	800159a <returnTouchStateAndLocation>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <main+0x4a>
            LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <main+0x12c>)
 8001d76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d7a:	f7ff fc1b 	bl	80015b4 <returnTouchQuadrant>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
            if(touchedQuadrant == BOTTOM_LEFT){
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <main+0x88>
                state = SINGLE_PLAYER;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
                break;
 8001d8e:	e04e      	b.n	8001e2e <main+0x126>
            }
            else if(touchedQuadrant == BOTTOM_RIGHT){
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d1dc      	bne.n	8001d52 <main+0x4a>
              state = TWO_PLAYER;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	75fb      	strb	r3, [r7, #23]
              break;
 8001d9c:	e047      	b.n	8001e2e <main+0x126>
            }
        }
      }
    }
    
    else if(state == SINGLE_PLAYER){
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d126      	bne.n	8001df2 <main+0xea>
      addSchedulerEvent(DISPLAY_BOARD_EVENT);
 8001da4:	2002      	movs	r0, #2
 8001da6:	f7ff fcb3 	bl	8001710 <addSchedulerEvent>
      addSchedulerEvent(SINGLE_PLAYER_EVENT);
 8001daa:	2004      	movs	r0, #4
 8001dac:	f7ff fcb0 	bl	8001710 <addSchedulerEvent>

      LCD_Clear(0, LCD_COLOR_WHITE);
 8001db0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff faf3 	bl	80013a0 <LCD_Clear>

      printf("%d\n", state);
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	481c      	ldr	r0, [pc, #112]	@ (8001e30 <main+0x128>)
 8001dc0:	f005 f9f4 	bl	80071ac <iprintf>

      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 8001dc4:	f7ff fcca 	bl	800175c <getScheduledEvents>
 8001dc8:	60f8      	str	r0, [r7, #12]
        if(scheduledEvents && DISPLAY_BOARD_EVENT){
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <main+0xd2>
            Display_Board();
 8001dd0:	f7fe fcba 	bl	8000748 <Display_Board>
            removeSchedulerEvent(DISPLAY_BOARD_EVENT);
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f7ff fcad 	bl	8001734 <removeSchedulerEvent>
        }

        if(scheduledEvents && SINGLE_PLAYER_EVENT){
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <main+0xe4>
            Single_Player(&hrng);
 8001de0:	4815      	ldr	r0, [pc, #84]	@ (8001e38 <main+0x130>)
 8001de2:	f7fe fd5d 	bl	80008a0 <Single_Player>
            removeSchedulerEvent(SINGLE_PLAYER_EVENT);
 8001de6:	2004      	movs	r0, #4
 8001de8:	f7ff fca4 	bl	8001734 <removeSchedulerEvent>
        }
        state = RESULTS;
 8001dec:	2303      	movs	r3, #3
 8001dee:	75fb      	strb	r3, [r7, #23]
        break;
 8001df0:	e01d      	b.n	8001e2e <main+0x126>
      }
    }

    else if(state == TWO_PLAYER){
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d106      	bne.n	8001e06 <main+0xfe>
      printf("%d\n", state);
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <main+0x128>)
 8001dfe:	f005 f9d5 	bl	80071ac <iprintf>
      while (1){
 8001e02:	bf00      	nop
 8001e04:	e7fd      	b.n	8001e02 <main+0xfa>
        //two player code
      }
    }

    else if(state == RESULTS){
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d19a      	bne.n	8001d42 <main+0x3a>
      printf("%d\n", state);
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <main+0x128>)
 8001e12:	f005 f9cb 	bl	80071ac <iprintf>
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 8001e16:	f7ff fca1 	bl	800175c <getScheduledEvents>
 8001e1a:	6138      	str	r0, [r7, #16]
        if(scheduledEvents && DISPLAY_RESULTS_EVENT){
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f9      	beq.n	8001e16 <main+0x10e>
          Display_Results();
 8001e22:	f7fe ffcb 	bl	8000dbc <Display_Results>
          removeSchedulerEvent(DISPLAY_RESULTS_EVENT);
 8001e26:	2020      	movs	r0, #32
 8001e28:	f7ff fc84 	bl	8001734 <removeSchedulerEvent>
      while (1){
 8001e2c:	e7f3      	b.n	8001e16 <main+0x10e>
    if(state == MENU){
 8001e2e:	e788      	b.n	8001d42 <main+0x3a>
 8001e30:	08008098 	.word	0x08008098
 8001e34:	20025a9c 	.word	0x20025a9c
 8001e38:	20025af8 	.word	0x20025af8

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	@ 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	2230      	movs	r2, #48	@ 0x30
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 faf6 	bl	800743c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <SystemClock_Config+0xcc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	4a27      	ldr	r2, [pc, #156]	@ (8001f08 <SystemClock_Config+0xcc>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <SystemClock_Config+0xcc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <SystemClock_Config+0xd0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <SystemClock_Config+0xd0>)
 8001e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <SystemClock_Config+0xd0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eac:	2308      	movs	r3, #8
 8001eae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001eb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 f99e 	bl	8005204 <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ece:	f000 fb55 	bl	800257c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ede:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	2105      	movs	r1, #5
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fbff 	bl	80056f4 <HAL_RCC_ClockConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001efc:	f000 fb3e 	bl	800257c <Error_Handler>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3750      	adds	r7, #80	@ 0x50
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <MX_I2C3_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <MX_I2C3_Init+0x7c>)
 8001f1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f26:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f4c:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f4e:	f001 fe13 	bl	8003b78 <HAL_I2C_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f58:	f000 fb10 	bl	800257c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f60:	f002 fe2e 	bl	8004bc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001f6a:	f000 fb07 	bl	800257c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <MX_I2C3_Init+0x74>)
 8001f72:	f002 fe61 	bl	8004c38 <HAL_I2CEx_ConfigDigitalFilter>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001f7c:	f000 fafe 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20025aa4 	.word	0x20025aa4
 8001f88:	40005c00 	.word	0x40005c00
 8001f8c:	000186a0 	.word	0x000186a0

08001f90 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09a      	sub	sp, #104	@ 0x68
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f9a:	2234      	movs	r2, #52	@ 0x34
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fa4c 	bl	800743c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2234      	movs	r2, #52	@ 0x34
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 fa46 	bl	800743c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80020f0 <MX_LTDC_Init+0x160>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fc8:	4b48      	ldr	r3, [pc, #288]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001fce:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001fd4:	4b45      	ldr	r3, [pc, #276]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001fda:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fdc:	220e      	movs	r2, #14
 8001fde:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001fe0:	4b42      	ldr	r3, [pc, #264]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001fe6:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001fe8:	f240 228e 	movw	r2, #654	@ 0x28e
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001fee:	4b3f      	ldr	r3, [pc, #252]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001ff0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8001ff8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8002000:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002004:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002006:	4b39      	ldr	r3, [pc, #228]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800200e:	4b37      	ldr	r3, [pc, #220]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002016:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800201e:	4833      	ldr	r0, [pc, #204]	@ (80020ec <MX_LTDC_Init+0x15c>)
 8002020:	f002 fe4a 	bl	8004cb8 <HAL_LTDC_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800202a:	f000 faa7 	bl	800257c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800203e:	2300      	movs	r3, #0
 8002040:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800204a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800204e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002050:	2305      	movs	r3, #5
 8002052:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002072:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	481c      	ldr	r0, [pc, #112]	@ (80020ec <MX_LTDC_Init+0x15c>)
 800207c:	f002 feec 	bl	8004e58 <HAL_LTDC_ConfigLayer>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002086:	f000 fa79 	bl	800257c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80020a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80020ac:	2305      	movs	r3, #5
 80020ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	2201      	movs	r2, #1
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <MX_LTDC_Init+0x15c>)
 80020d6:	f002 febf 	bl	8004e58 <HAL_LTDC_ConfigLayer>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80020e0:	f000 fa4c 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3768      	adds	r7, #104	@ 0x68
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20025b08 	.word	0x20025b08
 80020f0:	40016800 	.word	0x40016800

080020f4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_RNG_Init+0x20>)
 80020fa:	4a07      	ldr	r2, [pc, #28]	@ (8002118 <MX_RNG_Init+0x24>)
 80020fc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_RNG_Init+0x20>)
 8002100:	f003 fec4 	bl	8005e8c <HAL_RNG_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800210a:	f000 fa37 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20025af8 	.word	0x20025af8
 8002118:	50060800 	.word	0x50060800

0800211c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <MX_SPI5_Init+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002128:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800212c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800212e:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <MX_SPI5_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002140:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <MX_SPI5_Init+0x64>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002160:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <MX_SPI5_Init+0x64>)
 8002168:	220a      	movs	r2, #10
 800216a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	@ (8002180 <MX_SPI5_Init+0x64>)
 800216e:	f003 ff0d 	bl	8005f8c <HAL_SPI_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002178:	f000 fa00 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20025bb0 	.word	0x20025bb0
 8002184:	40015000 	.word	0x40015000

08002188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <MX_TIM2_Init+0x94>)
 80021a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <MX_TIM2_Init+0x94>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <MX_TIM2_Init+0x94>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <MX_TIM2_Init+0x94>)
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <MX_TIM2_Init+0x94>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <MX_TIM2_Init+0x94>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021cc:	4813      	ldr	r0, [pc, #76]	@ (800221c <MX_TIM2_Init+0x94>)
 80021ce:	f004 f9bd 	bl	800654c <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021d8:	f000 f9d0 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4619      	mov	r1, r3
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <MX_TIM2_Init+0x94>)
 80021ea:	f004 f9fe 	bl	80065ea <HAL_TIM_ConfigClockSource>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021f4:	f000 f9c2 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002200:	463b      	mov	r3, r7
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	@ (800221c <MX_TIM2_Init+0x94>)
 8002206:	f004 fbfd 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002210:	f000 f9b4 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20025c08 	.word	0x20025c08

08002220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08e      	sub	sp, #56	@ 0x38
 8002224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	4bb2      	ldr	r3, [pc, #712]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4ab1      	ldr	r2, [pc, #708]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4baf      	ldr	r3, [pc, #700]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	4bab      	ldr	r3, [pc, #684]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4aaa      	ldr	r2, [pc, #680]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4ba8      	ldr	r3, [pc, #672]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	4ba4      	ldr	r3, [pc, #656]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4aa3      	ldr	r2, [pc, #652]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4ba1      	ldr	r3, [pc, #644]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	4b9d      	ldr	r3, [pc, #628]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a9c      	ldr	r2, [pc, #624]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b9a      	ldr	r3, [pc, #616]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b96      	ldr	r3, [pc, #600]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a95      	ldr	r2, [pc, #596]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b93      	ldr	r3, [pc, #588]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a8e      	ldr	r2, [pc, #568]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a87      	ldr	r2, [pc, #540]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022e8:	f043 0310 	orr.w	r3, r3, #16
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b85      	ldr	r3, [pc, #532]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b81      	ldr	r3, [pc, #516]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a80      	ldr	r2, [pc, #512]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b7e      	ldr	r3, [pc, #504]	@ (8002504 <MX_GPIO_Init+0x2e4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	2116      	movs	r1, #22
 800231a:	487b      	ldr	r0, [pc, #492]	@ (8002508 <MX_GPIO_Init+0x2e8>)
 800231c:	f001 fc12 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	4879      	ldr	r0, [pc, #484]	@ (800250c <MX_GPIO_Init+0x2ec>)
 8002326:	f001 fc0d 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002330:	4877      	ldr	r0, [pc, #476]	@ (8002510 <MX_GPIO_Init+0x2f0>)
 8002332:	f001 fc07 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800233c:	4875      	ldr	r0, [pc, #468]	@ (8002514 <MX_GPIO_Init+0x2f4>)
 800233e:	f001 fc01 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002342:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002354:	230c      	movs	r3, #12
 8002356:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	486e      	ldr	r0, [pc, #440]	@ (8002518 <MX_GPIO_Init+0x2f8>)
 8002360:	f001 f938 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002364:	2301      	movs	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002374:	230c      	movs	r3, #12
 8002376:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	4862      	ldr	r0, [pc, #392]	@ (8002508 <MX_GPIO_Init+0x2e8>)
 8002380:	f001 f928 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002384:	2316      	movs	r3, #22
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002388:	2301      	movs	r3, #1
 800238a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	485b      	ldr	r0, [pc, #364]	@ (8002508 <MX_GPIO_Init+0x2e8>)
 800239c:	f001 f91a 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80023a0:	f248 0307 	movw	r3, #32775	@ 0x8007
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b4:	4619      	mov	r1, r3
 80023b6:	4855      	ldr	r0, [pc, #340]	@ (800250c <MX_GPIO_Init+0x2ec>)
 80023b8:	f001 f90c 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c0:	2301      	movs	r3, #1
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	4619      	mov	r1, r3
 80023d2:	484e      	ldr	r0, [pc, #312]	@ (800250c <MX_GPIO_Init+0x2ec>)
 80023d4:	f001 f8fe 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80023d8:	2320      	movs	r3, #32
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ea:	4619      	mov	r1, r3
 80023ec:	4846      	ldr	r0, [pc, #280]	@ (8002508 <MX_GPIO_Init+0x2e8>)
 80023ee:	f001 f8f1 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80023f2:	2304      	movs	r3, #4
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002402:	4619      	mov	r1, r3
 8002404:	4845      	ldr	r0, [pc, #276]	@ (800251c <MX_GPIO_Init+0x2fc>)
 8002406:	f001 f8e5 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800240a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800241c:	230c      	movs	r3, #12
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002424:	4619      	mov	r1, r3
 8002426:	483b      	ldr	r0, [pc, #236]	@ (8002514 <MX_GPIO_Init+0x2f4>)
 8002428:	f001 f8d4 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800242c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800243e:	230c      	movs	r3, #12
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002446:	4619      	mov	r1, r3
 8002448:	4835      	ldr	r0, [pc, #212]	@ (8002520 <MX_GPIO_Init+0x300>)
 800244a:	f001 f8c3 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800244e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002460:	230c      	movs	r3, #12
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	482c      	ldr	r0, [pc, #176]	@ (800251c <MX_GPIO_Init+0x2fc>)
 800246c:	f001 f8b2 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002470:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	4825      	ldr	r0, [pc, #148]	@ (800251c <MX_GPIO_Init+0x2fc>)
 8002486:	f001 f8a5 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800248a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800249c:	230c      	movs	r3, #12
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a4:	4619      	mov	r1, r3
 80024a6:	481a      	ldr	r0, [pc, #104]	@ (8002510 <MX_GPIO_Init+0x2f0>)
 80024a8:	f001 f894 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80024ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024be:	4619      	mov	r1, r3
 80024c0:	4813      	ldr	r0, [pc, #76]	@ (8002510 <MX_GPIO_Init+0x2f0>)
 80024c2:	f001 f887 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80024c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	480c      	ldr	r0, [pc, #48]	@ (8002510 <MX_GPIO_Init+0x2f0>)
 80024e0:	f001 f878 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f6:	2307      	movs	r3, #7
 80024f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	e010      	b.n	8002524 <MX_GPIO_Init+0x304>
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40020800 	.word	0x40020800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021800 	.word	0x40021800
 8002518:	40021400 	.word	0x40021400
 800251c:	40020400 	.word	0x40020400
 8002520:	40021000 	.word	0x40021000
 8002524:	4812      	ldr	r0, [pc, #72]	@ (8002570 <MX_GPIO_Init+0x350>)
 8002526:	f001 f855 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800252a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002530:	2301      	movs	r3, #1
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800253c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002540:	4619      	mov	r1, r3
 8002542:	480c      	ldr	r0, [pc, #48]	@ (8002574 <MX_GPIO_Init+0x354>)
 8002544:	f001 f846 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002548:	2360      	movs	r3, #96	@ 0x60
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002558:	230c      	movs	r3, #12
 800255a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	4805      	ldr	r0, [pc, #20]	@ (8002578 <MX_GPIO_Init+0x358>)
 8002564:	f001 f836 	bl	80035d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002568:	bf00      	nop
 800256a:	3738      	adds	r7, #56	@ 0x38
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40020000 	.word	0x40020000
 8002574:	40021800 	.word	0x40021800
 8002578:	40020400 	.word	0x40020400

0800257c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002580:	b672      	cpsid	i
}
 8002582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <Error_Handler+0x8>

08002588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a0f      	ldr	r2, [pc, #60]	@ (80025d4 <HAL_MspInit+0x4c>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025c6:	2007      	movs	r0, #7
 80025c8:	f000 ffb4 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a29      	ldr	r2, [pc, #164]	@ (800269c <HAL_I2C_MspInit+0xc4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d14b      	bne.n	8002692 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a27      	ldr	r2, [pc, #156]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002638:	2312      	movs	r3, #18
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002644:	2304      	movs	r3, #4
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	4815      	ldr	r0, [pc, #84]	@ (80026a4 <HAL_I2C_MspInit+0xcc>)
 8002650:	f000 ffc0 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800265a:	2312      	movs	r3, #18
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002666:	2304      	movs	r3, #4
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	480d      	ldr	r0, [pc, #52]	@ (80026a8 <HAL_I2C_MspInit+0xd0>)
 8002672:	f000 ffaf 	bl	80035d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 8002680:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002684:	6413      	str	r3, [r2, #64]	@ 0x40
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_I2C_MspInit+0xc8>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40005c00 	.word	0x40005c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b09a      	sub	sp, #104	@ 0x68
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c8:	2230      	movs	r2, #48	@ 0x30
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 feb5 	bl	800743c <memset>
  if(hltdc->Instance==LTDC)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a81      	ldr	r2, [pc, #516]	@ (80028dc <HAL_LTDC_MspInit+0x230>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 80fb 	bne.w	80028d4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026de:	2308      	movs	r3, #8
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80026e2:	23c8      	movs	r3, #200	@ 0xc8
 80026e4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80026e6:	2302      	movs	r3, #2
 80026e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80026ea:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80026ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fa09 	bl	8005b0c <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002700:	f7ff ff3c 	bl	800257c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	4b75      	ldr	r3, [pc, #468]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	4a74      	ldr	r2, [pc, #464]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800270e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002712:	6453      	str	r3, [r2, #68]	@ 0x44
 8002714:	4b72      	ldr	r3, [pc, #456]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002718:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	4b6e      	ldr	r3, [pc, #440]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4a6d      	ldr	r2, [pc, #436]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800272a:	f043 0320 	orr.w	r3, r3, #32
 800272e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002730:	4b6b      	ldr	r3, [pc, #428]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	4b67      	ldr	r3, [pc, #412]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	4a66      	ldr	r2, [pc, #408]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6313      	str	r3, [r2, #48]	@ 0x30
 800274c:	4b64      	ldr	r3, [pc, #400]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	4b60      	ldr	r3, [pc, #384]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	4a5f      	ldr	r2, [pc, #380]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	6313      	str	r3, [r2, #48]	@ 0x30
 8002768:	4b5d      	ldr	r3, [pc, #372]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	4b59      	ldr	r3, [pc, #356]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	4a58      	ldr	r2, [pc, #352]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800277e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002782:	6313      	str	r3, [r2, #48]	@ 0x30
 8002784:	4b56      	ldr	r3, [pc, #344]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4b52      	ldr	r3, [pc, #328]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4a51      	ldr	r2, [pc, #324]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a0:	4b4f      	ldr	r3, [pc, #316]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	4b4b      	ldr	r3, [pc, #300]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	4a4a      	ldr	r2, [pc, #296]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80027bc:	4b48      	ldr	r3, [pc, #288]	@ (80028e0 <HAL_LTDC_MspInit+0x234>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80027c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027da:	230e      	movs	r3, #14
 80027dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027e2:	4619      	mov	r1, r3
 80027e4:	483f      	ldr	r0, [pc, #252]	@ (80028e4 <HAL_LTDC_MspInit+0x238>)
 80027e6:	f000 fef5 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80027ea:	f641 0358 	movw	r3, #6232	@ 0x1858
 80027ee:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027fc:	230e      	movs	r3, #14
 80027fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002804:	4619      	mov	r1, r3
 8002806:	4838      	ldr	r0, [pc, #224]	@ (80028e8 <HAL_LTDC_MspInit+0x23c>)
 8002808:	f000 fee4 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800280c:	2303      	movs	r3, #3
 800280e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800281c:	2309      	movs	r3, #9
 800281e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002824:	4619      	mov	r1, r3
 8002826:	4831      	ldr	r0, [pc, #196]	@ (80028ec <HAL_LTDC_MspInit+0x240>)
 8002828:	f000 fed4 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800282c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002830:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800283e:	230e      	movs	r3, #14
 8002840:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002846:	4619      	mov	r1, r3
 8002848:	4828      	ldr	r0, [pc, #160]	@ (80028ec <HAL_LTDC_MspInit+0x240>)
 800284a:	f000 fec3 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800284e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002852:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002860:	230e      	movs	r3, #14
 8002862:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002864:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002868:	4619      	mov	r1, r3
 800286a:	4821      	ldr	r0, [pc, #132]	@ (80028f0 <HAL_LTDC_MspInit+0x244>)
 800286c:	f000 feb2 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002870:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002874:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002882:	230e      	movs	r3, #14
 8002884:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800288a:	4619      	mov	r1, r3
 800288c:	4819      	ldr	r0, [pc, #100]	@ (80028f4 <HAL_LTDC_MspInit+0x248>)
 800288e:	f000 fea1 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002892:	2348      	movs	r3, #72	@ 0x48
 8002894:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028a2:	230e      	movs	r3, #14
 80028a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028aa:	4619      	mov	r1, r3
 80028ac:	4812      	ldr	r0, [pc, #72]	@ (80028f8 <HAL_LTDC_MspInit+0x24c>)
 80028ae:	f000 fe91 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80028b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028c4:	2309      	movs	r3, #9
 80028c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028cc:	4619      	mov	r1, r3
 80028ce:	4808      	ldr	r0, [pc, #32]	@ (80028f0 <HAL_LTDC_MspInit+0x244>)
 80028d0:	f000 fe80 	bl	80035d4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80028d4:	bf00      	nop
 80028d6:	3768      	adds	r7, #104	@ 0x68
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40016800 	.word	0x40016800
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40021800 	.word	0x40021800
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00

080028fc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0b      	ldr	r2, [pc, #44]	@ (8002938 <HAL_RNG_MspInit+0x3c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10d      	bne.n	800292a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <HAL_RNG_MspInit+0x40>)
 8002914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002916:	4a09      	ldr	r2, [pc, #36]	@ (800293c <HAL_RNG_MspInit+0x40>)
 8002918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800291c:	6353      	str	r3, [r2, #52]	@ 0x34
 800291e:	4b07      	ldr	r3, [pc, #28]	@ (800293c <HAL_RNG_MspInit+0x40>)
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	50060800 	.word	0x50060800
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <HAL_SPI_MspInit+0x84>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12c      	bne.n	80029bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <HAL_SPI_MspInit+0x88>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <HAL_SPI_MspInit+0x88>)
 800296c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002970:	6453      	str	r3, [r2, #68]	@ 0x44
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <HAL_SPI_MspInit+0x88>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_SPI_MspInit+0x88>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a10      	ldr	r2, [pc, #64]	@ (80029c8 <HAL_SPI_MspInit+0x88>)
 8002988:	f043 0320 	orr.w	r3, r3, #32
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_SPI_MspInit+0x88>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800299a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029ac:	2305      	movs	r3, #5
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4805      	ldr	r0, [pc, #20]	@ (80029cc <HAL_SPI_MspInit+0x8c>)
 80029b8:	f000 fe0c 	bl	80035d4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80029bc:	bf00      	nop
 80029be:	3728      	adds	r7, #40	@ 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40015000 	.word	0x40015000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40021400 	.word	0x40021400

080029d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a08      	ldr	r2, [pc, #32]	@ (8002a00 <HAL_SPI_MspDeInit+0x30>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10a      	bne.n	80029f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80029e2:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_SPI_MspDeInit+0x34>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_SPI_MspDeInit+0x34>)
 80029e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80029ec:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80029ee:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80029f2:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <HAL_SPI_MspDeInit+0x38>)
 80029f4:	f000 ff9a 	bl	800392c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40015000 	.word	0x40015000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40021400 	.word	0x40021400

08002a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1c:	d10d      	bne.n	8002a3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_TIM_Base_MspInit+0x3c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <HAL_TIM_Base_MspInit+0x3c>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_TIM_Base_MspInit+0x3c>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <NMI_Handler+0x4>

08002a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <HardFault_Handler+0x4>

08002a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <MemManage_Handler+0x4>

08002a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <BusFault_Handler+0x4>

08002a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <UsageFault_Handler+0x4>

08002a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa2:	f000 fc0f 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002ab0:	f000 f9ce 	bl	8002e50 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002ab4:	f000 f98e 	bl	8002dd4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002ab8:	2202      	movs	r2, #2
 8002aba:	2103      	movs	r1, #3
 8002abc:	2082      	movs	r0, #130	@ 0x82
 8002abe:	f000 fa1b 	bl	8002ef8 <I2C3_Write>
    HAL_Delay(5);
 8002ac2:	2005      	movs	r0, #5
 8002ac4:	f000 fc1e 	bl	8003304 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2103      	movs	r1, #3
 8002acc:	2082      	movs	r0, #130	@ 0x82
 8002ace:	f000 fa13 	bl	8002ef8 <I2C3_Write>
    HAL_Delay(2);
 8002ad2:	2002      	movs	r0, #2
 8002ad4:	f000 fc16 	bl	8003304 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002ad8:	1cba      	adds	r2, r7, #2
 8002ada:	2302      	movs	r3, #2
 8002adc:	2100      	movs	r1, #0
 8002ade:	2082      	movs	r0, #130	@ 0x82
 8002ae0:	f000 fa5a 	bl	8002f98 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	f640 0211 	movw	r2, #2065	@ 0x811
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d001      	beq.n	8002b04 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e075      	b.n	8002bf0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002b04:	2202      	movs	r2, #2
 8002b06:	2103      	movs	r1, #3
 8002b08:	2082      	movs	r0, #130	@ 0x82
 8002b0a:	f000 f9f5 	bl	8002ef8 <I2C3_Write>
    HAL_Delay(5);
 8002b0e:	2005      	movs	r0, #5
 8002b10:	f000 fbf8 	bl	8003304 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2103      	movs	r1, #3
 8002b18:	2082      	movs	r0, #130	@ 0x82
 8002b1a:	f000 f9ed 	bl	8002ef8 <I2C3_Write>
    HAL_Delay(2);
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f000 fbf0 	bl	8003304 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002b24:	2004      	movs	r0, #4
 8002b26:	f000 f867 	bl	8002bf8 <STMPE811_Read>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002b2e:	797b      	ldrb	r3, [r7, #5]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002b36:	797b      	ldrb	r3, [r7, #5]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	2082      	movs	r0, #130	@ 0x82
 8002b3e:	f000 f9db 	bl	8002ef8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002b42:	2004      	movs	r0, #4
 8002b44:	f000 f858 	bl	8002bf8 <STMPE811_Read>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002b4c:	797b      	ldrb	r3, [r7, #5]
 8002b4e:	f023 0302 	bic.w	r3, r3, #2
 8002b52:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002b54:	797b      	ldrb	r3, [r7, #5]
 8002b56:	461a      	mov	r2, r3
 8002b58:	2104      	movs	r1, #4
 8002b5a:	2082      	movs	r0, #130	@ 0x82
 8002b5c:	f000 f9cc 	bl	8002ef8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002b60:	2249      	movs	r2, #73	@ 0x49
 8002b62:	2120      	movs	r1, #32
 8002b64:	2082      	movs	r0, #130	@ 0x82
 8002b66:	f000 f9c7 	bl	8002ef8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f000 fbca 	bl	8003304 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002b70:	2201      	movs	r2, #1
 8002b72:	2121      	movs	r1, #33	@ 0x21
 8002b74:	2082      	movs	r0, #130	@ 0x82
 8002b76:	f000 f9bf 	bl	8002ef8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002b7a:	2017      	movs	r0, #23
 8002b7c:	f000 f83c 	bl	8002bf8 <STMPE811_Read>
 8002b80:	4603      	mov	r3, r0
 8002b82:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002b84:	797b      	ldrb	r3, [r7, #5]
 8002b86:	f043 031e 	orr.w	r3, r3, #30
 8002b8a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002b8c:	797b      	ldrb	r3, [r7, #5]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2117      	movs	r1, #23
 8002b92:	2082      	movs	r0, #130	@ 0x82
 8002b94:	f000 f9b0 	bl	8002ef8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002b98:	229a      	movs	r2, #154	@ 0x9a
 8002b9a:	2141      	movs	r1, #65	@ 0x41
 8002b9c:	2082      	movs	r0, #130	@ 0x82
 8002b9e:	f000 f9ab 	bl	8002ef8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	214a      	movs	r1, #74	@ 0x4a
 8002ba6:	2082      	movs	r0, #130	@ 0x82
 8002ba8:	f000 f9a6 	bl	8002ef8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bac:	2201      	movs	r2, #1
 8002bae:	214b      	movs	r1, #75	@ 0x4b
 8002bb0:	2082      	movs	r0, #130	@ 0x82
 8002bb2:	f000 f9a1 	bl	8002ef8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	214b      	movs	r1, #75	@ 0x4b
 8002bba:	2082      	movs	r0, #130	@ 0x82
 8002bbc:	f000 f99c 	bl	8002ef8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2156      	movs	r1, #86	@ 0x56
 8002bc4:	2082      	movs	r0, #130	@ 0x82
 8002bc6:	f000 f997 	bl	8002ef8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2158      	movs	r1, #88	@ 0x58
 8002bce:	2082      	movs	r0, #130	@ 0x82
 8002bd0:	f000 f992 	bl	8002ef8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	2140      	movs	r1, #64	@ 0x40
 8002bd8:	2082      	movs	r0, #130	@ 0x82
 8002bda:	f000 f98d 	bl	8002ef8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002bde:	22ff      	movs	r2, #255	@ 0xff
 8002be0:	210b      	movs	r1, #11
 8002be2:	2082      	movs	r0, #130	@ 0x82
 8002be4:	f000 f988 	bl	8002ef8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002be8:	20c8      	movs	r0, #200	@ 0xc8
 8002bea:	f000 fb8b 	bl	8003304 <HAL_Delay>

    return STMPE811_State_Ok;
 8002bee:	2302      	movs	r3, #2

}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002c02:	f107 020f 	add.w	r2, r7, #15
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	2082      	movs	r0, #130	@ 0x82
 8002c0c:	f000 f99e 	bl	8002f4c <I2C3_Read>

    return readData;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	791a      	ldrb	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002c2a:	2040      	movs	r0, #64	@ 0x40
 8002c2c:	f7ff ffe4 	bl	8002bf8 <STMPE811_Read>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0e      	blt.n	8002c5a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002c42:	2201      	movs	r2, #1
 8002c44:	214b      	movs	r1, #75	@ 0x4b
 8002c46:	2082      	movs	r0, #130	@ 0x82
 8002c48:	f000 f956 	bl	8002ef8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	214b      	movs	r1, #75	@ 0x4b
 8002c50:	2082      	movs	r0, #130	@ 0x82
 8002c52:	f000 f951 	bl	8002ef8 <I2C3_Write>

        return STMPE811_State_Released;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0a7      	b.n	8002daa <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	799b      	ldrb	r3, [r3, #6]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d117      	bne.n	8002c92 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f9b8 	bl	8002fdc <TM_STMPE811_ReadX>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	885b      	ldrh	r3, [r3, #2]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fa0b 	bl	8003098 <TM_STMPE811_ReadY>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	805a      	strh	r2, [r3, #2]
 8002c90:	e048      	b.n	8002d24 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	799b      	ldrb	r3, [r3, #6]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d112      	bne.n	8002cc0 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f99c 	bl	8002fdc <TM_STMPE811_ReadX>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	885b      	ldrh	r3, [r3, #2]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f9f1 	bl	8003098 <TM_STMPE811_ReadY>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	805a      	strh	r2, [r3, #2]
 8002cbe:	e031      	b.n	8002d24 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	799b      	ldrb	r3, [r3, #6]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d115      	bne.n	8002cf4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	885b      	ldrh	r3, [r3, #2]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f985 	bl	8002fdc <TM_STMPE811_ReadX>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f9da 	bl	8003098 <TM_STMPE811_ReadY>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002cea:	3301      	adds	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	e017      	b.n	8002d24 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d113      	bne.n	8002d24 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f96b 	bl	8002fdc <TM_STMPE811_ReadX>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f9be 	bl	8003098 <TM_STMPE811_ReadY>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002d24:	2201      	movs	r2, #1
 8002d26:	214b      	movs	r1, #75	@ 0x4b
 8002d28:	2082      	movs	r0, #130	@ 0x82
 8002d2a:	f000 f8e5 	bl	8002ef8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	214b      	movs	r1, #75	@ 0x4b
 8002d32:	2082      	movs	r0, #130	@ 0x82
 8002d34:	f000 f8e0 	bl	8002ef8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	799b      	ldrb	r3, [r3, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <STMPE811_ReadTouch+0x12e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	799b      	ldrb	r3, [r3, #6]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d115      	bne.n	8002d74 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d027      	beq.n	8002da0 <STMPE811_ReadTouch+0x186>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	2bee      	cmp	r3, #238	@ 0xee
 8002d56:	d823      	bhi.n	8002da0 <STMPE811_ReadTouch+0x186>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	885b      	ldrh	r3, [r3, #2]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01f      	beq.n	8002da0 <STMPE811_ReadTouch+0x186>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	885b      	ldrh	r3, [r3, #2]
 8002d64:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002d68:	d81a      	bhi.n	8002da0 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e01a      	b.n	8002daa <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <STMPE811_ReadTouch+0x188>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002d84:	d80d      	bhi.n	8002da2 <STMPE811_ReadTouch+0x188>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	885b      	ldrh	r3, [r3, #2]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <STMPE811_ReadTouch+0x188>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	885b      	ldrh	r3, [r3, #2]
 8002d92:	2bee      	cmp	r3, #238	@ 0xee
 8002d94:	d805      	bhi.n	8002da2 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e004      	b.n	8002daa <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002da0:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20025ca4 	.word	0x20025ca4

08002dd4 <I2C3_Init>:

static void I2C3_Init()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <I2C3_Init+0x6c>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	4a17      	ldr	r2, [pc, #92]	@ (8002e40 <I2C3_Init+0x6c>)
 8002de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <I2C3_Init+0x6c>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <I2C3_Init+0x70>)
 8002df8:	4a13      	ldr	r2, [pc, #76]	@ (8002e48 <I2C3_Init+0x74>)
 8002dfa:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <I2C3_Init+0x70>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <I2C3_Init+0x78>)
 8002e00:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <I2C3_Init+0x70>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002e08:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <I2C3_Init+0x70>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <I2C3_Init+0x70>)
 8002e10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e14:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <I2C3_Init+0x70>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <I2C3_Init+0x70>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002e22:	4808      	ldr	r0, [pc, #32]	@ (8002e44 <I2C3_Init+0x70>)
 8002e24:	f000 fea8 	bl	8003b78 <HAL_I2C_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002e32:	bf00      	nop
 8002e34:	e7fd      	b.n	8002e32 <I2C3_Init+0x5e>
    }
    return;
 8002e36:	bf00      	nop
}
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	20025c50 	.word	0x20025c50
 8002e48:	40005c00 	.word	0x40005c00
 8002e4c:	000186a0 	.word	0x000186a0

08002e50 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <I2C3_MspInit+0x9c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002eec <I2C3_MspInit+0x9c>)
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <I2C3_MspInit+0x9c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <I2C3_MspInit+0x9c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <I2C3_MspInit+0x9c>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e92:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <I2C3_MspInit+0x9c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea4:	2312      	movs	r3, #18
 8002ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	4619      	mov	r1, r3
 8002eba:	480d      	ldr	r0, [pc, #52]	@ (8002ef0 <I2C3_MspInit+0xa0>)
 8002ebc:	f000 fb8a 	bl	80035d4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4619      	mov	r1, r3
 8002edc:	4805      	ldr	r0, [pc, #20]	@ (8002ef4 <I2C3_MspInit+0xa4>)
 8002ede:	f000 fb79 	bl	80035d4 <HAL_GPIO_Init>
    
}
 8002ee2:	bf00      	nop
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af04      	add	r7, sp, #16
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
 8002f02:	460b      	mov	r3, r1
 8002f04:	717b      	strb	r3, [r7, #5]
 8002f06:	4613      	mov	r3, r2
 8002f08:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002f0a:	793b      	ldrb	r3, [r7, #4]
 8002f0c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002f0e:	797b      	ldrb	r3, [r7, #5]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	88f9      	ldrh	r1, [r7, #6]
 8002f14:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <I2C3_Write+0x48>)
 8002f16:	9302      	str	r3, [sp, #8]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	f107 030f 	add.w	r3, r7, #15
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2301      	movs	r3, #1
 8002f24:	4807      	ldr	r0, [pc, #28]	@ (8002f44 <I2C3_Write+0x4c>)
 8002f26:	f000 ff6b 	bl	8003e00 <HAL_I2C_Mem_Write>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <I2C3_Write+0x50>)
 8002f30:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002f32:	f7ff ff3f 	bl	8002db4 <verifyHAL_I2C_IS_OKAY>
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0003d090 	.word	0x0003d090
 8002f44:	20025c50 	.word	0x20025c50
 8002f48:	20025ca4 	.word	0x20025ca4

08002f4c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af04      	add	r7, sp, #16
 8002f52:	4603      	mov	r3, r0
 8002f54:	603a      	str	r2, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	b299      	uxth	r1, r3
 8002f60:	79bb      	ldrb	r3, [r7, #6]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <I2C3_Read+0x40>)
 8002f66:	9302      	str	r3, [sp, #8]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2301      	movs	r3, #1
 8002f72:	4807      	ldr	r0, [pc, #28]	@ (8002f90 <I2C3_Read+0x44>)
 8002f74:	f001 f83e 	bl	8003ff4 <HAL_I2C_Mem_Read>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <I2C3_Read+0x48>)
 8002f7e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002f80:	f7ff ff18 	bl	8002db4 <verifyHAL_I2C_IS_OKAY>
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	0003d090 	.word	0x0003d090
 8002f90:	20025c50 	.word	0x20025c50
 8002f94:	20025ca4 	.word	0x20025ca4

08002f98 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	603a      	str	r2, [r7, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	71bb      	strb	r3, [r7, #6]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	b299      	uxth	r1, r3
 8002fb2:	79bb      	ldrb	r3, [r7, #6]
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <I2C3_MulitByteRead+0x3c>)
 8002fb8:	9302      	str	r3, [sp, #8]
 8002fba:	88bb      	ldrh	r3, [r7, #4]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4804      	ldr	r0, [pc, #16]	@ (8002fd8 <I2C3_MulitByteRead+0x40>)
 8002fc6:	f001 f815 	bl	8003ff4 <HAL_I2C_Mem_Read>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	0003d090 	.word	0x0003d090
 8002fd8:	20025c50 	.word	0x20025c50

08002fdc <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002fe6:	204d      	movs	r0, #77	@ 0x4d
 8002fe8:	f7ff fe06 	bl	8002bf8 <STMPE811_Read>
 8002fec:	4603      	mov	r3, r0
 8002fee:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002ff0:	204e      	movs	r0, #78	@ 0x4e
 8002ff2:	f7ff fe01 	bl	8002bf8 <STMPE811_Read>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002ffa:	7a7b      	ldrb	r3, [r7, #9]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	7a3b      	ldrb	r3, [r7, #8]
 8003002:	b21b      	sxth	r3, r3
 8003004:	4313      	orrs	r3, r2
 8003006:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800300c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003010:	4293      	cmp	r3, r2
 8003012:	dc06      	bgt.n	8003022 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003014:	89fb      	ldrh	r3, [r7, #14]
 8003016:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800301a:	330c      	adds	r3, #12
 800301c:	b29b      	uxth	r3, r3
 800301e:	81fb      	strh	r3, [r7, #14]
 8003020:	e005      	b.n	800302e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003022:	89fb      	ldrh	r3, [r7, #14]
 8003024:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003028:	3308      	adds	r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800302e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003032:	4a18      	ldr	r2, [pc, #96]	@ (8003094 <TM_STMPE811_ReadX+0xb8>)
 8003034:	fb82 1203 	smull	r1, r2, r2, r3
 8003038:	441a      	add	r2, r3
 800303a:	10d2      	asrs	r2, r2, #3
 800303c:	17db      	asrs	r3, r3, #31
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003046:	2bef      	cmp	r3, #239	@ 0xef
 8003048:	dd02      	ble.n	8003050 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800304a:	23ef      	movs	r3, #239	@ 0xef
 800304c:	81fb      	strh	r3, [r7, #14]
 800304e:	e005      	b.n	800305c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003050:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da01      	bge.n	800305c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800305c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	429a      	cmp	r2, r3
 8003064:	dd05      	ble.n	8003072 <TM_STMPE811_ReadX+0x96>
 8003066:	89fa      	ldrh	r2, [r7, #14]
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	b21b      	sxth	r3, r3
 8003070:	e004      	b.n	800307c <TM_STMPE811_ReadX+0xa0>
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	b29b      	uxth	r3, r3
 800307a:	b21b      	sxth	r3, r3
 800307c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800307e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003082:	2b04      	cmp	r3, #4
 8003084:	dd01      	ble.n	800308a <TM_STMPE811_ReadX+0xae>
        return val;
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	e000      	b.n	800308c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800308a:	88fb      	ldrh	r3, [r7, #6]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	88888889 	.word	0x88888889

08003098 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80030a2:	204f      	movs	r0, #79	@ 0x4f
 80030a4:	f7ff fda8 	bl	8002bf8 <STMPE811_Read>
 80030a8:	4603      	mov	r3, r0
 80030aa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80030ac:	2050      	movs	r0, #80	@ 0x50
 80030ae:	f7ff fda3 	bl	8002bf8 <STMPE811_Read>
 80030b2:	4603      	mov	r3, r0
 80030b4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80030b6:	7a7b      	ldrb	r3, [r7, #9]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	7a3b      	ldrb	r3, [r7, #8]
 80030be:	b21b      	sxth	r3, r3
 80030c0:	4313      	orrs	r3, r2
 80030c2:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80030c4:	89fb      	ldrh	r3, [r7, #14]
 80030c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80030ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030d2:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <TM_STMPE811_ReadY+0xa0>)
 80030d4:	fb82 1203 	smull	r1, r2, r2, r3
 80030d8:	1052      	asrs	r2, r2, #1
 80030da:	17db      	asrs	r3, r3, #31
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80030e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dc02      	bgt.n	80030ee <TM_STMPE811_ReadY+0x56>
        val = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	81fb      	strh	r3, [r7, #14]
 80030ec:	e007      	b.n	80030fe <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80030ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030f6:	db02      	blt.n	80030fe <TM_STMPE811_ReadY+0x66>
        val = 319;
 80030f8:	f240 133f 	movw	r3, #319	@ 0x13f
 80030fc:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80030fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	429a      	cmp	r2, r3
 8003106:	dd05      	ble.n	8003114 <TM_STMPE811_ReadY+0x7c>
 8003108:	89fa      	ldrh	r2, [r7, #14]
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	b21b      	sxth	r3, r3
 8003112:	e004      	b.n	800311e <TM_STMPE811_ReadY+0x86>
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	b29b      	uxth	r3, r3
 800311c:	b21b      	sxth	r3, r3
 800311e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003124:	2b04      	cmp	r3, #4
 8003126:	dd01      	ble.n	800312c <TM_STMPE811_ReadY+0x94>
        return val;
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	e000      	b.n	800312e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800312c:	88fb      	ldrh	r3, [r7, #6]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2e8ba2e9 	.word	0x2e8ba2e9

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f004 f9b4 	bl	80074d8 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	@ (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20030000 	.word	0x20030000
 800319c:	00000400 	.word	0x00000400
 80031a0:	20025ca8 	.word	0x20025ca8
 80031a4:	20025ea8 	.word	0x20025ea8

080031a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <SystemInit+0x20>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <SystemInit+0x20>)
 80031b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003204 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d0:	f7ff ffea 	bl	80031a8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d4:	480c      	ldr	r0, [pc, #48]	@ (8003208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031d6:	490d      	ldr	r1, [pc, #52]	@ (800320c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f004 f973 	bl	80074e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7fe fd83 	bl	8001d08 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003204:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003210:	080092e4 	.word	0x080092e4
  ldr r2, =_sbss
 8003214:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003218:	20025ea8 	.word	0x20025ea8

0800321c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	@ (8003260 <HAL_Init+0x40>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800322e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <HAL_Init+0x40>)
 8003236:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800323a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323c:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a07      	ldr	r2, [pc, #28]	@ (8003260 <HAL_Init+0x40>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f000 f973 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f808 	bl	8003264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003254:	f7ff f998 	bl	8002588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800326c:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_InitTick+0x54>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_InitTick+0x58>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4619      	mov	r1, r3
 8003276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800327a:	fbb3 f3f1 	udiv	r3, r3, r1
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f999 	bl	80035ba <HAL_SYSTICK_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00e      	b.n	80032b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d80a      	bhi.n	80032ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003298:	2200      	movs	r2, #0
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f000 f953 	bl	800354a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a4:	4a06      	ldr	r2, [pc, #24]	@ (80032c0 <HAL_InitTick+0x5c>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000010 	.word	0x20000010
 80032bc:	20000018 	.word	0x20000018
 80032c0:	20000014 	.word	0x20000014

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000018 	.word	0x20000018
 80032e8:	20025cac 	.word	0x20025cac

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20025cac 	.word	0x20025cac

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000018 	.word	0x20000018

0800334c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003368:	4013      	ands	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800337c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337e:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003398:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <__NVIC_GetPriorityGrouping+0x18>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0307 	and.w	r3, r3, #7
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0b      	blt.n	80033da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4907      	ldr	r1, [pc, #28]	@ (80033e8 <__NVIC_EnableIRQ+0x38>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db12      	blt.n	8003424 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	490a      	ldr	r1, [pc, #40]	@ (8003430 <__NVIC_DisableIRQ+0x44>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	3320      	adds	r3, #32
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003418:	f3bf 8f4f 	dsb	sy
}
 800341c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800341e:	f3bf 8f6f 	isb	sy
}
 8003422:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	@ (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	@ 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	@ 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003500:	d301      	bcc.n	8003506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003506:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <SysTick_Config+0x40>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350e:	210f      	movs	r1, #15
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f7ff ff8e 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <SysTick_Config+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <SysTick_Config+0x40>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff05 	bl	800334c <__NVIC_SetPriorityGrouping>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800355c:	f7ff ff1a 	bl	8003394 <__NVIC_GetPriorityGrouping>
 8003560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff ff8e 	bl	8003488 <NVIC_EncodePriority>
 800356c:	4602      	mov	r2, r0
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5d 	bl	8003434 <__NVIC_SetPriority>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff0d 	bl	80033b0 <__NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff1d 	bl	80033ec <__NVIC_DisableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff94 	bl	80034f0 <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e177      	b.n	80038e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035f0:	2201      	movs	r2, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	f040 8166 	bne.w	80038da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d005      	beq.n	8003626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003622:	2b02      	cmp	r3, #2
 8003624:	d130      	bne.n	8003688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 0201 	and.w	r2, r3, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d017      	beq.n	80036c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d123      	bne.n	8003718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	08da      	lsrs	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3208      	adds	r2, #8
 80036d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0203 	and.w	r2, r3, #3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80c0 	beq.w	80038da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b66      	ldr	r3, [pc, #408]	@ (80038f8 <HAL_GPIO_Init+0x324>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	4a65      	ldr	r2, [pc, #404]	@ (80038f8 <HAL_GPIO_Init+0x324>)
 8003764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003768:	6453      	str	r3, [r2, #68]	@ 0x44
 800376a:	4b63      	ldr	r3, [pc, #396]	@ (80038f8 <HAL_GPIO_Init+0x324>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003776:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_GPIO_Init+0x328>)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	220f      	movs	r2, #15
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a58      	ldr	r2, [pc, #352]	@ (8003900 <HAL_GPIO_Init+0x32c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d037      	beq.n	8003812 <HAL_GPIO_Init+0x23e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a57      	ldr	r2, [pc, #348]	@ (8003904 <HAL_GPIO_Init+0x330>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d031      	beq.n	800380e <HAL_GPIO_Init+0x23a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a56      	ldr	r2, [pc, #344]	@ (8003908 <HAL_GPIO_Init+0x334>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02b      	beq.n	800380a <HAL_GPIO_Init+0x236>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a55      	ldr	r2, [pc, #340]	@ (800390c <HAL_GPIO_Init+0x338>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d025      	beq.n	8003806 <HAL_GPIO_Init+0x232>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a54      	ldr	r2, [pc, #336]	@ (8003910 <HAL_GPIO_Init+0x33c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <HAL_GPIO_Init+0x22e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a53      	ldr	r2, [pc, #332]	@ (8003914 <HAL_GPIO_Init+0x340>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x22a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a52      	ldr	r2, [pc, #328]	@ (8003918 <HAL_GPIO_Init+0x344>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x226>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a51      	ldr	r2, [pc, #324]	@ (800391c <HAL_GPIO_Init+0x348>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x222>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a50      	ldr	r2, [pc, #320]	@ (8003920 <HAL_GPIO_Init+0x34c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x21e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003924 <HAL_GPIO_Init+0x350>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x21a>
 80037ea:	2309      	movs	r3, #9
 80037ec:	e012      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037ee:	230a      	movs	r3, #10
 80037f0:	e010      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037f2:	2308      	movs	r3, #8
 80037f4:	e00e      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037f6:	2307      	movs	r3, #7
 80037f8:	e00c      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037fa:	2306      	movs	r3, #6
 80037fc:	e00a      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037fe:	2305      	movs	r3, #5
 8003800:	e008      	b.n	8003814 <HAL_GPIO_Init+0x240>
 8003802:	2304      	movs	r3, #4
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x240>
 8003806:	2303      	movs	r3, #3
 8003808:	e004      	b.n	8003814 <HAL_GPIO_Init+0x240>
 800380a:	2302      	movs	r3, #2
 800380c:	e002      	b.n	8003814 <HAL_GPIO_Init+0x240>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x240>
 8003812:	2300      	movs	r3, #0
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f002 0203 	and.w	r2, r2, #3
 800381a:	0092      	lsls	r2, r2, #2
 800381c:	4093      	lsls	r3, r2
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003824:	4935      	ldr	r1, [pc, #212]	@ (80038fc <HAL_GPIO_Init+0x328>)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	3302      	adds	r3, #2
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003832:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <HAL_GPIO_Init+0x354>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003856:	4a34      	ldr	r2, [pc, #208]	@ (8003928 <HAL_GPIO_Init+0x354>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800385c:	4b32      	ldr	r3, [pc, #200]	@ (8003928 <HAL_GPIO_Init+0x354>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003880:	4a29      	ldr	r2, [pc, #164]	@ (8003928 <HAL_GPIO_Init+0x354>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003886:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <HAL_GPIO_Init+0x354>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_GPIO_Init+0x354>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_GPIO_Init+0x354>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d4:	4a14      	ldr	r2, [pc, #80]	@ (8003928 <HAL_GPIO_Init+0x354>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3301      	adds	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	f67f ae84 	bls.w	80035f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	@ 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40013800 	.word	0x40013800
 8003900:	40020000 	.word	0x40020000
 8003904:	40020400 	.word	0x40020400
 8003908:	40020800 	.word	0x40020800
 800390c:	40020c00 	.word	0x40020c00
 8003910:	40021000 	.word	0x40021000
 8003914:	40021400 	.word	0x40021400
 8003918:	40021800 	.word	0x40021800
 800391c:	40021c00 	.word	0x40021c00
 8003920:	40022000 	.word	0x40022000
 8003924:	40022400 	.word	0x40022400
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e0d9      	b.n	8003afc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003948:	2201      	movs	r2, #1
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	f040 80c9 	bne.w	8003af6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003964:	4a6b      	ldr	r2, [pc, #428]	@ (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a63      	ldr	r2, [pc, #396]	@ (8003b18 <HAL_GPIO_DeInit+0x1ec>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d037      	beq.n	80039fe <HAL_GPIO_DeInit+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a62      	ldr	r2, [pc, #392]	@ (8003b1c <HAL_GPIO_DeInit+0x1f0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d031      	beq.n	80039fa <HAL_GPIO_DeInit+0xce>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a61      	ldr	r2, [pc, #388]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02b      	beq.n	80039f6 <HAL_GPIO_DeInit+0xca>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a60      	ldr	r2, [pc, #384]	@ (8003b24 <HAL_GPIO_DeInit+0x1f8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d025      	beq.n	80039f2 <HAL_GPIO_DeInit+0xc6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b28 <HAL_GPIO_DeInit+0x1fc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01f      	beq.n	80039ee <HAL_GPIO_DeInit+0xc2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b2c <HAL_GPIO_DeInit+0x200>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_DeInit+0xbe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b30 <HAL_GPIO_DeInit+0x204>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_DeInit+0xba>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b34 <HAL_GPIO_DeInit+0x208>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_DeInit+0xb6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a5b      	ldr	r2, [pc, #364]	@ (8003b38 <HAL_GPIO_DeInit+0x20c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_DeInit+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b3c <HAL_GPIO_DeInit+0x210>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_DeInit+0xae>
 80039d6:	2309      	movs	r3, #9
 80039d8:	e012      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039da:	230a      	movs	r3, #10
 80039dc:	e010      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039de:	2308      	movs	r3, #8
 80039e0:	e00e      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e00c      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039e6:	2306      	movs	r3, #6
 80039e8:	e00a      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039ea:	2305      	movs	r3, #5
 80039ec:	e008      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039ee:	2304      	movs	r3, #4
 80039f0:	e006      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039f2:	2303      	movs	r3, #3
 80039f4:	e004      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e002      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039fe:	2300      	movs	r3, #0
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	f002 0203 	and.w	r2, r2, #3
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	4093      	lsls	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d132      	bne.n	8003a76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a10:	4b4b      	ldr	r3, [pc, #300]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4949      	ldr	r1, [pc, #292]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a1e:	4b48      	ldr	r3, [pc, #288]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	4946      	ldr	r1, [pc, #280]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a2c:	4b44      	ldr	r3, [pc, #272]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	4942      	ldr	r1, [pc, #264]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a3a:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	493f      	ldr	r1, [pc, #252]	@ (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a58:	4a2e      	ldr	r2, [pc, #184]	@ (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	43da      	mvns	r2, r3
 8003a68:	482a      	ldr	r0, [pc, #168]	@ (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	400a      	ands	r2, r1
 8003a70:	3302      	adds	r3, #2
 8003a72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2103      	movs	r1, #3
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	08da      	lsrs	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3208      	adds	r2, #8
 8003a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	08d2      	lsrs	r2, r2, #3
 8003aac:	4019      	ands	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2103      	movs	r1, #3
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	2103      	movs	r1, #3
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	401a      	ands	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f af22 	bls.w	8003948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40013800 	.word	0x40013800
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40020800 	.word	0x40020800
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40021400 	.word	0x40021400
 8003b30:	40021800 	.word	0x40021800
 8003b34:	40021c00 	.word	0x40021c00
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40022400 	.word	0x40022400
 8003b40:	40013c00 	.word	0x40013c00

08003b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
 8003b50:	4613      	mov	r3, r2
 8003b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b54:	787b      	ldrb	r3, [r7, #1]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b60:	e003      	b.n	8003b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b62:	887b      	ldrh	r3, [r7, #2]
 8003b64:	041a      	lsls	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	619a      	str	r2, [r3, #24]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e12b      	b.n	8003de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fd1a 	bl	80025d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	@ 0x24
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bdc:	f001 ff82 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 8003be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a81      	ldr	r2, [pc, #516]	@ (8003dec <HAL_I2C_Init+0x274>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d807      	bhi.n	8003bfc <HAL_I2C_Init+0x84>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <HAL_I2C_Init+0x278>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf94      	ite	ls
 8003bf4:	2301      	movls	r3, #1
 8003bf6:	2300      	movhi	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e006      	b.n	8003c0a <HAL_I2C_Init+0x92>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a7d      	ldr	r2, [pc, #500]	@ (8003df4 <HAL_I2C_Init+0x27c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0e7      	b.n	8003de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a78      	ldr	r2, [pc, #480]	@ (8003df8 <HAL_I2C_Init+0x280>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0c9b      	lsrs	r3, r3, #18
 8003c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a6a      	ldr	r2, [pc, #424]	@ (8003dec <HAL_I2C_Init+0x274>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d802      	bhi.n	8003c4c <HAL_I2C_Init+0xd4>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	e009      	b.n	8003c60 <HAL_I2C_Init+0xe8>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	4a69      	ldr	r2, [pc, #420]	@ (8003dfc <HAL_I2C_Init+0x284>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	3301      	adds	r3, #1
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	495c      	ldr	r1, [pc, #368]	@ (8003dec <HAL_I2C_Init+0x274>)
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	d819      	bhi.n	8003cb4 <HAL_I2C_Init+0x13c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1e59      	subs	r1, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c94:	400b      	ands	r3, r1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_I2C_Init+0x138>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e59      	subs	r1, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cae:	e051      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e04f      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d111      	bne.n	8003ce0 <HAL_I2C_Init+0x168>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e012      	b.n	8003d06 <HAL_I2C_Init+0x18e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Init+0x196>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e022      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10e      	bne.n	8003d34 <HAL_I2C_Init+0x1bc>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e58      	subs	r0, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	440b      	add	r3, r1
 8003d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	0099      	lsls	r1, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6911      	ldr	r1, [r2, #16]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d2      	ldr	r2, [r2, #12]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	000186a0 	.word	0x000186a0
 8003df0:	001e847f 	.word	0x001e847f
 8003df4:	003d08ff 	.word	0x003d08ff
 8003df8:	431bde83 	.word	0x431bde83
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e1a:	f7ff fa67 	bl	80032ec <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	f040 80d9 	bne.w	8003fe0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	496d      	ldr	r1, [pc, #436]	@ (8003fec <HAL_I2C_Mem_Write+0x1ec>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fc8b 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e0cc      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Mem_Write+0x56>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0c5      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x1e2>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2221      	movs	r2, #33	@ 0x21
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	@ 0x40
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a3a      	ldr	r2, [r7, #32]
 8003ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a4d      	ldr	r2, [pc, #308]	@ (8003ff0 <HAL_I2C_Mem_Write+0x1f0>)
 8003ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebe:	88f8      	ldrh	r0, [r7, #6]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4603      	mov	r3, r0
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fac2 	bl	8004458 <I2C_RequestMemoryWrite>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d052      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e081      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fd50 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06b      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d11b      	bne.n	8003f80 <HAL_I2C_Mem_Write+0x180>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1aa      	bne.n	8003ede <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fd43 	bl	8004a18 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e016      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	00100002 	.word	0x00100002
 8003ff0:	ffff0000 	.word	0xffff0000

08003ff4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	@ 0x30
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	461a      	mov	r2, r3
 8004002:	4603      	mov	r3, r0
 8004004:	817b      	strh	r3, [r7, #10]
 8004006:	460b      	mov	r3, r1
 8004008:	813b      	strh	r3, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800400e:	f7ff f96d 	bl	80032ec <HAL_GetTick>
 8004012:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b20      	cmp	r3, #32
 800401e:	f040 8214 	bne.w	800444a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	2319      	movs	r3, #25
 8004028:	2201      	movs	r2, #1
 800402a:	497b      	ldr	r1, [pc, #492]	@ (8004218 <HAL_I2C_Mem_Read+0x224>)
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fb91 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
 800403a:	e207      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_I2C_Mem_Read+0x56>
 8004046:	2302      	movs	r3, #2
 8004048:	e200      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d007      	beq.n	8004070 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800407e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2222      	movs	r2, #34	@ 0x22
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2240      	movs	r2, #64	@ 0x40
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a5b      	ldr	r2, [pc, #364]	@ (800421c <HAL_I2C_Mem_Read+0x228>)
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040b2:	88f8      	ldrh	r0, [r7, #6]
 80040b4:	893a      	ldrh	r2, [r7, #8]
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	4603      	mov	r3, r0
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa5e 	bl	8004584 <I2C_RequestMemoryRead>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1bc      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d113      	bne.n	8004102 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	623b      	str	r3, [r7, #32]
 80040ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e190      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004106:	2b01      	cmp	r3, #1
 8004108:	d11b      	bne.n	8004142 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e170      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	2b02      	cmp	r3, #2
 8004148:	d11b      	bne.n	8004182 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004158:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	e150      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004198:	e144      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419e:	2b03      	cmp	r3, #3
 80041a0:	f200 80f1 	bhi.w	8004386 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d123      	bne.n	80041f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fc79 	bl	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e145      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f2:	e117      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d14e      	bne.n	800429a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004202:	2200      	movs	r2, #0
 8004204:	4906      	ldr	r1, [pc, #24]	@ (8004220 <HAL_I2C_Mem_Read+0x22c>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 faa4 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e11a      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
 8004216:	bf00      	nop
 8004218:	00100002 	.word	0x00100002
 800421c:	ffff0000 	.word	0xffff0000
 8004220:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004298:	e0c4      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2200      	movs	r2, #0
 80042a2:	496c      	ldr	r1, [pc, #432]	@ (8004454 <HAL_I2C_Mem_Read+0x460>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fa55 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0cb      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2200      	movs	r2, #0
 80042fe:	4955      	ldr	r1, [pc, #340]	@ (8004454 <HAL_I2C_Mem_Read+0x460>)
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fa27 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e09d      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004384:	e04e      	b.n	8004424 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004388:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fb8c 	bl	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e058      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d124      	bne.n	8004424 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d107      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f aeb6 	bne.w	800419a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3728      	adds	r7, #40	@ 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	00010004 	.word	0x00010004

08004458 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	461a      	mov	r2, r3
 8004466:	4603      	mov	r3, r0
 8004468:	817b      	strh	r3, [r7, #10]
 800446a:	460b      	mov	r3, r1
 800446c:	813b      	strh	r3, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2200      	movs	r2, #0
 800448a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f960 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a8:	d103      	bne.n	80044b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e05f      	b.n	8004576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	492d      	ldr	r1, [pc, #180]	@ (8004580 <I2C_RequestMemoryWrite+0x128>)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f9bb 	bl	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e04c      	b.n	8004576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f4:	6a39      	ldr	r1, [r7, #32]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fa46 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	2b04      	cmp	r3, #4
 8004508:	d107      	bne.n	800451a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e02b      	b.n	8004576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004524:	893b      	ldrh	r3, [r7, #8]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	611a      	str	r2, [r3, #16]
 800452e:	e021      	b.n	8004574 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	b29b      	uxth	r3, r3
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004540:	6a39      	ldr	r1, [r7, #32]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa20 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	2b04      	cmp	r3, #4
 8004554:	d107      	bne.n	8004566 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e005      	b.n	8004576 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800456a:	893b      	ldrh	r3, [r7, #8]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	00010002 	.word	0x00010002

08004584 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	4603      	mov	r3, r0
 8004594:	817b      	strh	r3, [r7, #10]
 8004596:	460b      	mov	r3, r1
 8004598:	813b      	strh	r3, [r7, #8]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f8c2 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e4:	d103      	bne.n	80045ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0aa      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004600:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	4952      	ldr	r1, [pc, #328]	@ (8004750 <I2C_RequestMemoryRead+0x1cc>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f91d 	bl	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e097      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	6a39      	ldr	r1, [r7, #32]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f9a8 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	2b04      	cmp	r3, #4
 8004644:	d107      	bne.n	8004656 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004654:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e076      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d105      	bne.n	800466c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	e021      	b.n	80046b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	6a39      	ldr	r1, [r7, #32]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f982 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b04      	cmp	r3, #4
 8004690:	d107      	bne.n	80046a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e050      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a6:	893b      	ldrh	r3, [r7, #8]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b2:	6a39      	ldr	r1, [r7, #32]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f967 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d107      	bne.n	80046d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e035      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f82b 	bl	8004754 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004712:	d103      	bne.n	800471c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e013      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004720:	897b      	ldrh	r3, [r7, #10]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	4906      	ldr	r1, [pc, #24]	@ (8004750 <I2C_RequestMemoryRead+0x1cc>)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f886 	bl	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	00010002 	.word	0x00010002

08004754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004764:	e048      	b.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d044      	beq.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476e:	f7fe fdbd 	bl	80032ec <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d302      	bcc.n	8004784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d139      	bne.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10d      	bne.n	80047aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	43da      	mvns	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4013      	ands	r3, r2
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	e00c      	b.n	80047c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	43da      	mvns	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d116      	bne.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e023      	b.n	8004840 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10d      	bne.n	800481e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	43da      	mvns	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	e00c      	b.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	43da      	mvns	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d093      	beq.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004856:	e071      	b.n	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004866:	d123      	bne.n	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004876:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f043 0204 	orr.w	r2, r3, #4
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e067      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d041      	beq.n	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b8:	f7fe fd18 	bl	80032ec <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d136      	bne.n	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d10c      	bne.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	43da      	mvns	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e00b      	b.n	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	43da      	mvns	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e021      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10c      	bne.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	43da      	mvns	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e00b      	b.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	43da      	mvns	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	bf14      	ite	ne
 8004972:	2301      	movne	r3, #1
 8004974:	2300      	moveq	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f af6d 	bne.w	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004994:	e034      	b.n	8004a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f8e3 	bl	8004b62 <I2C_IsAcknowledgeFailed>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e034      	b.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d028      	beq.n	8004a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe fc9d 	bl	80032ec <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11d      	bne.n	8004a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b80      	cmp	r3, #128	@ 0x80
 80049d0:	d016      	beq.n	8004a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e007      	b.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0a:	2b80      	cmp	r3, #128	@ 0x80
 8004a0c:	d1c3      	bne.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a24:	e034      	b.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f89b 	bl	8004b62 <I2C_IsAcknowledgeFailed>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e034      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d028      	beq.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3e:	f7fe fc55 	bl	80032ec <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11d      	bne.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d016      	beq.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e007      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d1c3      	bne.n	8004a26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab4:	e049      	b.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d119      	bne.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0210 	mvn.w	r2, #16
 8004acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e030      	b.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af8:	f7fe fbf8 	bl	80032ec <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d302      	bcc.n	8004b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d11d      	bne.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b40      	cmp	r3, #64	@ 0x40
 8004b1a:	d016      	beq.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e007      	b.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d1ae      	bne.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b78:	d11b      	bne.n	8004bb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d129      	bne.n	8004c2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	@ 0x24
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0210 	bic.w	r2, r2, #16
 8004bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d12a      	bne.n	8004ca8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2224      	movs	r2, #36	@ 0x24
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	f023 030f 	bic.w	r3, r3, #15
 8004c78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	89fb      	ldrh	r3, [r7, #14]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	89fa      	ldrh	r2, [r7, #14]
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0bf      	b.n	8004e4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fce4 	bl	80026ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004cfa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_LTDC_Init+0x19c>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68d9      	ldr	r1, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b3e      	ldr	r3, [pc, #248]	@ (8004e54 <HAL_LTDC_Init+0x19c>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68d9      	ldr	r1, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6919      	ldr	r1, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b33      	ldr	r3, [pc, #204]	@ (8004e54 <HAL_LTDC_Init+0x19c>)
 8004d88:	400b      	ands	r3, r1
 8004d8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6919      	ldr	r1, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6959      	ldr	r1, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_LTDC_Init+0x19c>)
 8004db6:	400b      	ands	r3, r1
 8004db8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6959      	ldr	r1, [r3, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0206 	orr.w	r2, r2, #6
 8004e26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	f000f800 	.word	0xf000f800

08004e58 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_LTDC_ConfigLayer+0x1a>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e02c      	b.n	8004ecc <HAL_LTDC_ConfigLayer+0x74>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2134      	movs	r1, #52	@ 0x34
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4614      	mov	r4, r2
 8004e96:	461d      	mov	r5, r3
 8004e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f811 	bl	8004ed4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bdb0      	pop	{r4, r5, r7, pc}

08004ed4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	@ 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef0:	4413      	add	r3, r2
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	01db      	lsls	r3, r3, #7
 8004f00:	4413      	add	r3, r2
 8004f02:	3384      	adds	r3, #132	@ 0x84
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	01d2      	lsls	r2, r2, #7
 8004f10:	440a      	add	r2, r1
 8004f12:	3284      	adds	r2, #132	@ 0x84
 8004f14:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	01db      	lsls	r3, r3, #7
 8004f38:	440b      	add	r3, r1
 8004f3a:	3384      	adds	r3, #132	@ 0x84
 8004f3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f52:	4413      	add	r3, r2
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	01db      	lsls	r3, r3, #7
 8004f62:	4413      	add	r3, r2
 8004f64:	3384      	adds	r3, #132	@ 0x84
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	01d2      	lsls	r2, r2, #7
 8004f72:	440a      	add	r2, r1
 8004f74:	3284      	adds	r2, #132	@ 0x84
 8004f76:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f8a:	4413      	add	r3, r2
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4619      	mov	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	01db      	lsls	r3, r3, #7
 8004f98:	440b      	add	r3, r1
 8004f9a:	3384      	adds	r3, #132	@ 0x84
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	01db      	lsls	r3, r3, #7
 8004fae:	4413      	add	r3, r2
 8004fb0:	3384      	adds	r3, #132	@ 0x84
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	01d2      	lsls	r2, r2, #7
 8004fbe:	440a      	add	r2, r1
 8004fc0:	3284      	adds	r2, #132	@ 0x84
 8004fc2:	f023 0307 	bic.w	r3, r3, #7
 8004fc6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	01db      	lsls	r3, r3, #7
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3384      	adds	r3, #132	@ 0x84
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	061b      	lsls	r3, r3, #24
 8004ff8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	01db      	lsls	r3, r3, #7
 8005004:	4413      	add	r3, r2
 8005006:	3384      	adds	r3, #132	@ 0x84
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	01db      	lsls	r3, r3, #7
 8005014:	4413      	add	r3, r2
 8005016:	3384      	adds	r3, #132	@ 0x84
 8005018:	461a      	mov	r2, r3
 800501a:	2300      	movs	r3, #0
 800501c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005024:	461a      	mov	r2, r3
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	431a      	orrs	r2, r3
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	01db      	lsls	r3, r3, #7
 8005038:	440b      	add	r3, r1
 800503a:	3384      	adds	r3, #132	@ 0x84
 800503c:	4619      	mov	r1, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	01db      	lsls	r3, r3, #7
 800504e:	4413      	add	r3, r2
 8005050:	3384      	adds	r3, #132	@ 0x84
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	4611      	mov	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	01d2      	lsls	r2, r2, #7
 800505e:	440a      	add	r2, r1
 8005060:	3284      	adds	r2, #132	@ 0x84
 8005062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005066:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	01db      	lsls	r3, r3, #7
 8005072:	4413      	add	r3, r2
 8005074:	3384      	adds	r3, #132	@ 0x84
 8005076:	461a      	mov	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	01db      	lsls	r3, r3, #7
 8005088:	4413      	add	r3, r2
 800508a:	3384      	adds	r3, #132	@ 0x84
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	4611      	mov	r1, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	01d2      	lsls	r2, r2, #7
 8005098:	440a      	add	r2, r1
 800509a:	3284      	adds	r2, #132	@ 0x84
 800509c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	69da      	ldr	r2, [r3, #28]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	6809      	ldr	r1, [r1, #0]
 80050b2:	4608      	mov	r0, r1
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	01c9      	lsls	r1, r1, #7
 80050b8:	4401      	add	r1, r0
 80050ba:	3184      	adds	r1, #132	@ 0x84
 80050bc:	4313      	orrs	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	01db      	lsls	r3, r3, #7
 80050ca:	4413      	add	r3, r2
 80050cc:	3384      	adds	r3, #132	@ 0x84
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	01db      	lsls	r3, r3, #7
 80050da:	4413      	add	r3, r2
 80050dc:	3384      	adds	r3, #132	@ 0x84
 80050de:	461a      	mov	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	01db      	lsls	r3, r3, #7
 80050ee:	4413      	add	r3, r2
 80050f0:	3384      	adds	r3, #132	@ 0x84
 80050f2:	461a      	mov	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005102:	2304      	movs	r3, #4
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e01b      	b.n	8005140 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d102      	bne.n	8005116 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005110:	2303      	movs	r3, #3
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	e014      	b.n	8005140 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d00b      	beq.n	8005136 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005122:	2b02      	cmp	r3, #2
 8005124:	d007      	beq.n	8005136 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800512a:	2b03      	cmp	r3, #3
 800512c:	d003      	beq.n	8005136 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005132:	2b07      	cmp	r3, #7
 8005134:	d102      	bne.n	800513c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005136:	2302      	movs	r3, #2
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e001      	b.n	8005140 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800513c:	2301      	movs	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	01db      	lsls	r3, r3, #7
 800514a:	4413      	add	r3, r2
 800514c:	3384      	adds	r3, #132	@ 0x84
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	4611      	mov	r1, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	01d2      	lsls	r2, r2, #7
 800515a:	440a      	add	r2, r1
 800515c:	3284      	adds	r2, #132	@ 0x84
 800515e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	1acb      	subs	r3, r1, r3
 800517a:	69f9      	ldr	r1, [r7, #28]
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	6809      	ldr	r1, [r1, #0]
 8005186:	4608      	mov	r0, r1
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	01c9      	lsls	r1, r1, #7
 800518c:	4401      	add	r1, r0
 800518e:	3184      	adds	r1, #132	@ 0x84
 8005190:	4313      	orrs	r3, r2
 8005192:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	01db      	lsls	r3, r3, #7
 800519e:	4413      	add	r3, r2
 80051a0:	3384      	adds	r3, #132	@ 0x84
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	4611      	mov	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	01d2      	lsls	r2, r2, #7
 80051ae:	440a      	add	r2, r1
 80051b0:	3284      	adds	r2, #132	@ 0x84
 80051b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051b6:	f023 0307 	bic.w	r3, r3, #7
 80051ba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	01db      	lsls	r3, r3, #7
 80051c6:	4413      	add	r3, r2
 80051c8:	3384      	adds	r3, #132	@ 0x84
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	4413      	add	r3, r2
 80051de:	3384      	adds	r3, #132	@ 0x84
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	4611      	mov	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	01d2      	lsls	r2, r2, #7
 80051ec:	440a      	add	r2, r1
 80051ee:	3284      	adds	r2, #132	@ 0x84
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	6013      	str	r3, [r2, #0]
}
 80051f6:	bf00      	nop
 80051f8:	3724      	adds	r7, #36	@ 0x24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e267      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d075      	beq.n	800530e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005222:	4b88      	ldr	r3, [pc, #544]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b04      	cmp	r3, #4
 800522c:	d00c      	beq.n	8005248 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4b85      	ldr	r3, [pc, #532]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005236:	2b08      	cmp	r3, #8
 8005238:	d112      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b82      	ldr	r3, [pc, #520]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	4b7e      	ldr	r3, [pc, #504]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05b      	beq.n	800530c <HAL_RCC_OscConfig+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d157      	bne.n	800530c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e242      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005268:	d106      	bne.n	8005278 <HAL_RCC_OscConfig+0x74>
 800526a:	4b76      	ldr	r3, [pc, #472]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a75      	ldr	r2, [pc, #468]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x98>
 8005282:	4b70      	ldr	r3, [pc, #448]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6f      	ldr	r2, [pc, #444]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b6d      	ldr	r3, [pc, #436]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a6c      	ldr	r2, [pc, #432]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 800529c:	4b69      	ldr	r3, [pc, #420]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a68      	ldr	r2, [pc, #416]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b66      	ldr	r3, [pc, #408]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a65      	ldr	r2, [pc, #404]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe f816 	bl	80032ec <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fe f812 	bl	80032ec <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	@ 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e207      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xc0>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fe f802 	bl	80032ec <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fd fffe 	bl	80032ec <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	@ 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e1f3      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b51      	ldr	r3, [pc, #324]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0xe8>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d063      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800531a:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b47      	ldr	r3, [pc, #284]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800532e:	2b08      	cmp	r3, #8
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b44      	ldr	r3, [pc, #272]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	4b41      	ldr	r3, [pc, #260]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1c7      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b3b      	ldr	r3, [pc, #236]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4937      	ldr	r1, [pc, #220]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	e03a      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005374:	4b34      	ldr	r3, [pc, #208]	@ (8005448 <HAL_RCC_OscConfig+0x244>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fd ffb7 	bl	80032ec <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005382:	f7fd ffb3 	bl	80032ec <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e1a8      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	4b2b      	ldr	r3, [pc, #172]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b28      	ldr	r3, [pc, #160]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4925      	ldr	r1, [pc, #148]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <HAL_RCC_OscConfig+0x244>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fd ff96 	bl	80032ec <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fd ff92 	bl	80032ec <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e187      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f6:	4b15      	ldr	r3, [pc, #84]	@ (800544c <HAL_RCC_OscConfig+0x248>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fd ff76 	bl	80032ec <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005404:	f7fd ff72 	bl	80032ec <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e167      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <HAL_RCC_OscConfig+0x240>)
 8005418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x200>
 8005422:	e01b      	b.n	800545c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005424:	4b09      	ldr	r3, [pc, #36]	@ (800544c <HAL_RCC_OscConfig+0x248>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542a:	f7fd ff5f 	bl	80032ec <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	e00e      	b.n	8005450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005432:	f7fd ff5b 	bl	80032ec <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d907      	bls.n	8005450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e150      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005444:	40023800 	.word	0x40023800
 8005448:	42470000 	.word	0x42470000
 800544c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	4b88      	ldr	r3, [pc, #544]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ea      	bne.n	8005432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8097 	beq.w	8005598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546e:	4b81      	ldr	r3, [pc, #516]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	4b7d      	ldr	r3, [pc, #500]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	4a7c      	ldr	r2, [pc, #496]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	@ 0x40
 800548a:	4b7a      	ldr	r3, [pc, #488]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b77      	ldr	r3, [pc, #476]	@ (8005678 <HAL_RCC_OscConfig+0x474>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4b74      	ldr	r3, [pc, #464]	@ (8005678 <HAL_RCC_OscConfig+0x474>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a73      	ldr	r2, [pc, #460]	@ (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7fd ff1b 	bl	80032ec <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fd ff17 	bl	80032ec <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e10c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x2ea>
 80054e0:	4b64      	ldr	r3, [pc, #400]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e4:	4a63      	ldr	r2, [pc, #396]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ec:	e01c      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0x30c>
 80054f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	6713      	str	r3, [r2, #112]	@ 0x70
 8005502:	4b5c      	ldr	r3, [pc, #368]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005506:	4a5b      	ldr	r2, [pc, #364]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6713      	str	r3, [r2, #112]	@ 0x70
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 8005510:	4b58      	ldr	r3, [pc, #352]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	4a57      	ldr	r2, [pc, #348]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6713      	str	r3, [r2, #112]	@ 0x70
 800551c:	4b55      	ldr	r3, [pc, #340]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	4a54      	ldr	r2, [pc, #336]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fd fedc 	bl	80032ec <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fd fed8 	bl	80032ec <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0cb      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	4b49      	ldr	r3, [pc, #292]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ee      	beq.n	8005538 <HAL_RCC_OscConfig+0x334>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555c:	f7fd fec6 	bl	80032ec <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fd fec2 	bl	80032ec <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e0b5      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557a:	4b3e      	ldr	r3, [pc, #248]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ee      	bne.n	8005564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b39      	ldr	r3, [pc, #228]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	4a38      	ldr	r2, [pc, #224]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a1 	beq.w	80056e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a2:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d05c      	beq.n	8005668 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d141      	bne.n	800563a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b31      	ldr	r3, [pc, #196]	@ (800567c <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fd fe96 	bl	80032ec <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fd fe92 	bl	80032ec <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e087      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b27      	ldr	r3, [pc, #156]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	3b01      	subs	r3, #1
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	491b      	ldr	r1, [pc, #108]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <HAL_RCC_OscConfig+0x478>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005612:	f7fd fe6b 	bl	80032ec <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561a:	f7fd fe67 	bl	80032ec <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e05c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	4b11      	ldr	r3, [pc, #68]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x416>
 8005638:	e054      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_RCC_OscConfig+0x478>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fd fe54 	bl	80032ec <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fd fe50 	bl	80032ec <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e045      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <HAL_RCC_OscConfig+0x470>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x444>
 8005666:	e03d      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e038      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
 800567c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005680:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <HAL_RCC_OscConfig+0x4ec>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d028      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d121      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d11a      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d111      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40023800 	.word	0x40023800

080056f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0cc      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b68      	ldr	r3, [pc, #416]	@ (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90c      	bls.n	8005730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b65      	ldr	r3, [pc, #404]	@ (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b63      	ldr	r3, [pc, #396]	@ (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0b8      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d020      	beq.n	800577e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005748:	4b59      	ldr	r3, [pc, #356]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a58      	ldr	r2, [pc, #352]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005760:	4b53      	ldr	r3, [pc, #332]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a52      	ldr	r2, [pc, #328]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800576a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576c:	4b50      	ldr	r3, [pc, #320]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	494d      	ldr	r1, [pc, #308]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d044      	beq.n	8005814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b47      	ldr	r3, [pc, #284]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d119      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b3f      	ldr	r3, [pc, #252]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c2:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e067      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d2:	4b37      	ldr	r3, [pc, #220]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0203 	bic.w	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4934      	ldr	r1, [pc, #208]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e4:	f7fd fd82 	bl	80032ec <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fd fd7e 	bl	80032ec <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	4b2b      	ldr	r3, [pc, #172]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 020c 	and.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d1eb      	bne.n	80057ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b25      	ldr	r3, [pc, #148]	@ (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d20c      	bcs.n	800583c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b22      	ldr	r3, [pc, #136]	@ (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b20      	ldr	r3, [pc, #128]	@ (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e032      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005848:	4b19      	ldr	r3, [pc, #100]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4916      	ldr	r1, [pc, #88]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005866:	4b12      	ldr	r3, [pc, #72]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	490e      	ldr	r1, [pc, #56]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800587a:	f000 f821 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 800587e:	4602      	mov	r2, r0
 8005880:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	490a      	ldr	r1, [pc, #40]	@ (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	5ccb      	ldrb	r3, [r1, r3]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a09      	ldr	r2, [pc, #36]	@ (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005896:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <HAL_RCC_ClockConfig+0x1c8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd fce2 	bl	8003264 <HAL_InitTick>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023c00 	.word	0x40023c00
 80058b0:	40023800 	.word	0x40023800
 80058b4:	0800926c 	.word	0x0800926c
 80058b8:	20000010 	.word	0x20000010
 80058bc:	20000014 	.word	0x20000014

080058c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b094      	sub	sp, #80	@ 0x50
 80058c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d8:	4b79      	ldr	r3, [pc, #484]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d00d      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x40>
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	f200 80e1 	bhi.w	8005aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_GetSysClockFreq+0x3a>
 80058f2:	e0db      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f4:	4b73      	ldr	r3, [pc, #460]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058f8:	e0db      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058fa:	4b73      	ldr	r3, [pc, #460]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80058fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058fe:	e0d8      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005900:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005908:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800590a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d063      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005916:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	099b      	lsrs	r3, r3, #6
 800591c:	2200      	movs	r2, #0
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005920:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30
 800592a:	2300      	movs	r3, #0
 800592c:	637b      	str	r3, [r7, #52]	@ 0x34
 800592e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005932:	4622      	mov	r2, r4
 8005934:	462b      	mov	r3, r5
 8005936:	f04f 0000 	mov.w	r0, #0
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	0159      	lsls	r1, r3, #5
 8005940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005944:	0150      	lsls	r0, r2, #5
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4621      	mov	r1, r4
 800594c:	1a51      	subs	r1, r2, r1
 800594e:	6139      	str	r1, [r7, #16]
 8005950:	4629      	mov	r1, r5
 8005952:	eb63 0301 	sbc.w	r3, r3, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005964:	4659      	mov	r1, fp
 8005966:	018b      	lsls	r3, r1, #6
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800596e:	4651      	mov	r1, sl
 8005970:	018a      	lsls	r2, r1, #6
 8005972:	4651      	mov	r1, sl
 8005974:	ebb2 0801 	subs.w	r8, r2, r1
 8005978:	4659      	mov	r1, fp
 800597a:	eb63 0901 	sbc.w	r9, r3, r1
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800598a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800598e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005992:	4690      	mov	r8, r2
 8005994:	4699      	mov	r9, r3
 8005996:	4623      	mov	r3, r4
 8005998:	eb18 0303 	adds.w	r3, r8, r3
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	462b      	mov	r3, r5
 80059a0:	eb49 0303 	adc.w	r3, r9, r3
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059b2:	4629      	mov	r1, r5
 80059b4:	024b      	lsls	r3, r1, #9
 80059b6:	4621      	mov	r1, r4
 80059b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059bc:	4621      	mov	r1, r4
 80059be:	024a      	lsls	r2, r1, #9
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c6:	2200      	movs	r2, #0
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059d0:	f7fa fc66 	bl	80002a0 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4613      	mov	r3, r2
 80059da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059dc:	e058      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059de:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	2200      	movs	r2, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	4611      	mov	r1, r2
 80059ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	f04f 0000 	mov.w	r0, #0
 8005a00:	f04f 0100 	mov.w	r1, #0
 8005a04:	0159      	lsls	r1, r3, #5
 8005a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0a:	0150      	lsls	r0, r2, #5
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4641      	mov	r1, r8
 8005a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a30:	ebb2 040a 	subs.w	r4, r2, sl
 8005a34:	eb63 050b 	sbc.w	r5, r3, fp
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	00eb      	lsls	r3, r5, #3
 8005a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a46:	00e2      	lsls	r2, r4, #3
 8005a48:	4614      	mov	r4, r2
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	4643      	mov	r3, r8
 8005a4e:	18e3      	adds	r3, r4, r3
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	464b      	mov	r3, r9
 8005a54:	eb45 0303 	adc.w	r3, r5, r3
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a66:	4629      	mov	r1, r5
 8005a68:	028b      	lsls	r3, r1, #10
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a70:	4621      	mov	r1, r4
 8005a72:	028a      	lsls	r2, r1, #10
 8005a74:	4610      	mov	r0, r2
 8005a76:	4619      	mov	r1, r3
 8005a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	61fa      	str	r2, [r7, #28]
 8005a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a84:	f7fa fc0c 	bl	80002a0 <__aeabi_uldivmod>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005aa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3750      	adds	r7, #80	@ 0x50
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	007a1200 	.word	0x007a1200

08005acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	@ (8005ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000010 	.word	0x20000010

08005ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ae8:	f7ff fff0 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0a9b      	lsrs	r3, r3, #10
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4903      	ldr	r1, [pc, #12]	@ (8005b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800927c 	.word	0x0800927c

08005b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d075      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b40:	4b91      	ldr	r3, [pc, #580]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b46:	f7fd fbd1 	bl	80032ec <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b4e:	f7fd fbcd 	bl	80032ec <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e189      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b60:	4b8a      	ldr	r3, [pc, #552]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	019a      	lsls	r2, r3, #6
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	071b      	lsls	r3, r3, #28
 8005b84:	4981      	ldr	r1, [pc, #516]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01f      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b98:	4b7c      	ldr	r3, [pc, #496]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b9e:	0f1b      	lsrs	r3, r3, #28
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	019a      	lsls	r2, r3, #6
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	071b      	lsls	r3, r3, #28
 8005bb8:	4974      	ldr	r1, [pc, #464]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bc0:	4b72      	ldr	r3, [pc, #456]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bc6:	f023 021f 	bic.w	r2, r3, #31
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	496e      	ldr	r1, [pc, #440]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	019a      	lsls	r2, r3, #6
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	071b      	lsls	r3, r3, #28
 8005bf8:	4964      	ldr	r1, [pc, #400]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c00:	4b61      	ldr	r3, [pc, #388]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c06:	f7fd fb71 	bl	80032ec <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c0e:	f7fd fb6d 	bl	80032ec <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e129      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c20:	4b5a      	ldr	r3, [pc, #360]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d105      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d079      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c44:	4b52      	ldr	r3, [pc, #328]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4a:	f7fd fb4f 	bl	80032ec <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c50:	e008      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c52:	f7fd fb4b 	bl	80032ec <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e107      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c64:	4b49      	ldr	r3, [pc, #292]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c70:	d0ef      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d020      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c7e:	4b43      	ldr	r3, [pc, #268]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	0f1b      	lsrs	r3, r3, #28
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	019a      	lsls	r2, r3, #6
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	071b      	lsls	r3, r3, #28
 8005c9e:	493b      	ldr	r1, [pc, #236]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ca6:	4b39      	ldr	r3, [pc, #228]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	4934      	ldr	r1, [pc, #208]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	0e1b      	lsrs	r3, r3, #24
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	019a      	lsls	r2, r3, #6
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	071b      	lsls	r3, r3, #28
 8005cec:	4927      	ldr	r1, [pc, #156]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cf4:	4b25      	ldr	r3, [pc, #148]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	4922      	ldr	r1, [pc, #136]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d0a:	4b21      	ldr	r3, [pc, #132]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d10:	f7fd faec 	bl	80032ec <HAL_GetTick>
 8005d14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d18:	f7fd fae8 	bl	80032ec <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e0a4      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d2a:	4b18      	ldr	r3, [pc, #96]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d36:	d1ef      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 808b 	beq.w	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d62:	4b0c      	ldr	r3, [pc, #48]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a0b      	ldr	r2, [pc, #44]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6e:	f7fd fabd 	bl	80032ec <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d74:	e010      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fd fab9 	bl	80032ec <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d909      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e075      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d88:	42470068 	.word	0x42470068
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	42470070 	.word	0x42470070
 8005d94:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d98:	4b38      	ldr	r3, [pc, #224]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0e8      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005da4:	4b36      	ldr	r3, [pc, #216]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02f      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d028      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dd8:	4a29      	ldr	r2, [pc, #164]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dde:	4b28      	ldr	r3, [pc, #160]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d114      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fd fa7f 	bl	80032ec <HAL_GetTick>
 8005dee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	e00a      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fd fa7b 	bl	80032ec <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e035      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ee      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e20:	d10d      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e22:	4b17      	ldr	r3, [pc, #92]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e36:	4912      	ldr	r1, [pc, #72]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]
 8005e3c:	e005      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e3e:	4b10      	ldr	r3, [pc, #64]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4a0f      	ldr	r2, [pc, #60]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e44:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e48:	6093      	str	r3, [r2, #8]
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e56:	490a      	ldr	r1, [pc, #40]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e6e:	4b06      	ldr	r3, [pc, #24]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e70:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	40007000 	.word	0x40007000
 8005e80:	40023800 	.word	0x40023800
 8005e84:	42470e40 	.word	0x42470e40
 8005e88:	424711e0 	.word	0x424711e0

08005e8c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e01c      	b.n	8005ed8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	795b      	ldrb	r3, [r3, #5]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fc fd24 	bl	80028fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0204 	orr.w	r2, r2, #4
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	791b      	ldrb	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_RNG_GenerateRandomNumber+0x1a>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e044      	b.n	8005f84 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	795b      	ldrb	r3, [r3, #5]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d133      	bne.n	8005f72 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f10:	f7fd f9ec 	bl	80032ec <HAL_GetTick>
 8005f14:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f16:	e018      	b.n	8005f4a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005f18:	f7fd f9e8 	bl	80032ec <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d911      	bls.n	8005f4a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d00a      	beq.n	8005f4a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e01c      	b.n	8005f84 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d1df      	bne.n	8005f18 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	715a      	strb	r2, [r3, #5]
 8005f70:	e004      	b.n	8005f7c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2204      	movs	r2, #4
 8005f76:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	711a      	strb	r2, [r3, #4]

  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e07b      	b.n	8006096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fae:	d009      	beq.n	8005fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	61da      	str	r2, [r3, #28]
 8005fb6:	e005      	b.n	8005fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fc fcae 	bl	8002940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006048:	ea42 0103 	orr.w	r1, r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	f003 0104 	and.w	r1, r3, #4
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	f003 0210 	and.w	r2, r3, #16
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e01a      	b.n	80060e6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7fc fc81 	bl	80029d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b088      	sub	sp, #32
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060fe:	f7fd f8f5 	bl	80032ec <HAL_GetTick>
 8006102:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d001      	beq.n	8006118 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
 8006116:	e12a      	b.n	800636e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Transmit+0x36>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e122      	b.n	800636e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_SPI_Transmit+0x48>
 8006132:	2302      	movs	r3, #2
 8006134:	e11b      	b.n	800636e <HAL_SPI_Transmit+0x280>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2203      	movs	r2, #3
 8006142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006184:	d10f      	bne.n	80061a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b40      	cmp	r3, #64	@ 0x40
 80061b2:	d007      	beq.n	80061c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061cc:	d152      	bne.n	8006274 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_Transmit+0xee>
 80061d6:	8b7b      	ldrh	r3, [r7, #26]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d145      	bne.n	8006268 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	881a      	ldrh	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006200:	e032      	b.n	8006268 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d112      	bne.n	8006236 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006214:	881a      	ldrh	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006234:	e018      	b.n	8006268 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006236:	f7fd f859 	bl	80032ec <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d803      	bhi.n	800624e <HAL_SPI_Transmit+0x160>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d102      	bne.n	8006254 <HAL_SPI_Transmit+0x166>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e082      	b.n	800636e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1c7      	bne.n	8006202 <HAL_SPI_Transmit+0x114>
 8006272:	e053      	b.n	800631c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_SPI_Transmit+0x194>
 800627c:	8b7b      	ldrh	r3, [r7, #26]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d147      	bne.n	8006312 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	7812      	ldrb	r2, [r2, #0]
 800628e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062a8:	e033      	b.n	8006312 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d113      	bne.n	80062e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062de:	e018      	b.n	8006312 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e0:	f7fd f804 	bl	80032ec <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d803      	bhi.n	80062f8 <HAL_SPI_Transmit+0x20a>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d102      	bne.n	80062fe <HAL_SPI_Transmit+0x210>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e02d      	b.n	800636e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1c6      	bne.n	80062aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f8bf 	bl	80064a4 <SPI_EndRxTxTransaction>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800636c:	2300      	movs	r3, #0
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006384:	b2db      	uxtb	r3, r3
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063a4:	f7fc ffa2 	bl	80032ec <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	4413      	add	r3, r2
 80063b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063b4:	f7fc ff9a 	bl	80032ec <HAL_GetTick>
 80063b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063ba:	4b39      	ldr	r3, [pc, #228]	@ (80064a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	015b      	lsls	r3, r3, #5
 80063c0:	0d1b      	lsrs	r3, r3, #20
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	fb02 f303 	mul.w	r3, r2, r3
 80063c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ca:	e054      	b.n	8006476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d050      	beq.n	8006476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063d4:	f7fc ff8a 	bl	80032ec <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d902      	bls.n	80063ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d13d      	bne.n	8006466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006402:	d111      	bne.n	8006428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640c:	d004      	beq.n	8006418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006416:	d107      	bne.n	8006428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006430:	d10f      	bne.n	8006452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e017      	b.n	8006496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3b01      	subs	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4013      	ands	r3, r2
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	bf0c      	ite	eq
 8006486:	2301      	moveq	r3, #1
 8006488:	2300      	movne	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	429a      	cmp	r2, r3
 8006492:	d19b      	bne.n	80063cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000010 	.word	0x20000010

080064a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2201      	movs	r2, #1
 80064b8:	2102      	movs	r1, #2
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff ff6a 	bl	8006394 <SPI_WaitFlagStateUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ca:	f043 0220 	orr.w	r2, r3, #32
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e032      	b.n	800653c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <SPI_EndRxTxTransaction+0xa0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	@ (8006548 <SPI_EndRxTxTransaction+0xa4>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	0d5b      	lsrs	r3, r3, #21
 80064e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064f4:	d112      	bne.n	800651c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	@ 0x80
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff ff47 	bl	8006394 <SPI_WaitFlagStateUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d016      	beq.n	800653a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	f043 0220 	orr.w	r2, r3, #32
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e00f      	b.n	800653c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	3b01      	subs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006532:	2b80      	cmp	r3, #128	@ 0x80
 8006534:	d0f2      	beq.n	800651c <SPI_EndRxTxTransaction+0x78>
 8006536:	e000      	b.n	800653a <SPI_EndRxTxTransaction+0x96>
        break;
 8006538:	bf00      	nop
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000010 	.word	0x20000010
 8006548:	165e9f81 	.word	0x165e9f81

0800654c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e041      	b.n	80065e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc fa4a 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f000 f8f4 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_ConfigClockSource+0x1c>
 8006602:	2302      	movs	r3, #2
 8006604:	e0b4      	b.n	8006770 <HAL_TIM_ConfigClockSource+0x186>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006624:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800662c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800663e:	d03e      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xd4>
 8006640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006644:	f200 8087 	bhi.w	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664c:	f000 8086 	beq.w	800675c <HAL_TIM_ConfigClockSource+0x172>
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006654:	d87f      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 8006656:	2b70      	cmp	r3, #112	@ 0x70
 8006658:	d01a      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0xa6>
 800665a:	2b70      	cmp	r3, #112	@ 0x70
 800665c:	d87b      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 800665e:	2b60      	cmp	r3, #96	@ 0x60
 8006660:	d050      	beq.n	8006704 <HAL_TIM_ConfigClockSource+0x11a>
 8006662:	2b60      	cmp	r3, #96	@ 0x60
 8006664:	d877      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 8006666:	2b50      	cmp	r3, #80	@ 0x50
 8006668:	d03c      	beq.n	80066e4 <HAL_TIM_ConfigClockSource+0xfa>
 800666a:	2b50      	cmp	r3, #80	@ 0x50
 800666c:	d873      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 800666e:	2b40      	cmp	r3, #64	@ 0x40
 8006670:	d058      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x13a>
 8006672:	2b40      	cmp	r3, #64	@ 0x40
 8006674:	d86f      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 8006676:	2b30      	cmp	r3, #48	@ 0x30
 8006678:	d064      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x15a>
 800667a:	2b30      	cmp	r3, #48	@ 0x30
 800667c:	d86b      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 800667e:	2b20      	cmp	r3, #32
 8006680:	d060      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x15a>
 8006682:	2b20      	cmp	r3, #32
 8006684:	d867      	bhi.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d05c      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x15a>
 800668a:	2b10      	cmp	r3, #16
 800668c:	d05a      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x15a>
 800668e:	e062      	b.n	8006756 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a0:	f000 f990 	bl	80069c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	609a      	str	r2, [r3, #8]
      break;
 80066bc:	e04f      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	f000 f979 	bl	80069c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066e0:	609a      	str	r2, [r3, #8]
      break;
 80066e2:	e03c      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f0:	461a      	mov	r2, r3
 80066f2:	f000 f8ed 	bl	80068d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2150      	movs	r1, #80	@ 0x50
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f946 	bl	800698e <TIM_ITRx_SetConfig>
      break;
 8006702:	e02c      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006710:	461a      	mov	r2, r3
 8006712:	f000 f90c 	bl	800692e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2160      	movs	r1, #96	@ 0x60
 800671c:	4618      	mov	r0, r3
 800671e:	f000 f936 	bl	800698e <TIM_ITRx_SetConfig>
      break;
 8006722:	e01c      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006730:	461a      	mov	r2, r3
 8006732:	f000 f8cd 	bl	80068d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2140      	movs	r1, #64	@ 0x40
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f926 	bl	800698e <TIM_ITRx_SetConfig>
      break;
 8006742:	e00c      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f000 f91d 	bl	800698e <TIM_ITRx_SetConfig>
      break;
 8006754:	e003      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
      break;
 800675a:	e000      	b.n	800675e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800675c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a46      	ldr	r2, [pc, #280]	@ (80068a4 <TIM_Base_SetConfig+0x12c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006796:	d00f      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a43      	ldr	r2, [pc, #268]	@ (80068a8 <TIM_Base_SetConfig+0x130>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a42      	ldr	r2, [pc, #264]	@ (80068ac <TIM_Base_SetConfig+0x134>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a41      	ldr	r2, [pc, #260]	@ (80068b0 <TIM_Base_SetConfig+0x138>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a40      	ldr	r2, [pc, #256]	@ (80068b4 <TIM_Base_SetConfig+0x13c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a35      	ldr	r2, [pc, #212]	@ (80068a4 <TIM_Base_SetConfig+0x12c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d8:	d027      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a32      	ldr	r2, [pc, #200]	@ (80068a8 <TIM_Base_SetConfig+0x130>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d023      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a31      	ldr	r2, [pc, #196]	@ (80068ac <TIM_Base_SetConfig+0x134>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a30      	ldr	r2, [pc, #192]	@ (80068b0 <TIM_Base_SetConfig+0x138>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2f      	ldr	r2, [pc, #188]	@ (80068b4 <TIM_Base_SetConfig+0x13c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d017      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2e      	ldr	r2, [pc, #184]	@ (80068b8 <TIM_Base_SetConfig+0x140>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2d      	ldr	r2, [pc, #180]	@ (80068bc <TIM_Base_SetConfig+0x144>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2c      	ldr	r2, [pc, #176]	@ (80068c0 <TIM_Base_SetConfig+0x148>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2b      	ldr	r2, [pc, #172]	@ (80068c4 <TIM_Base_SetConfig+0x14c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2a      	ldr	r2, [pc, #168]	@ (80068c8 <TIM_Base_SetConfig+0x150>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a29      	ldr	r2, [pc, #164]	@ (80068cc <TIM_Base_SetConfig+0x154>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a10      	ldr	r2, [pc, #64]	@ (80068a4 <TIM_Base_SetConfig+0x12c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a12      	ldr	r2, [pc, #72]	@ (80068b4 <TIM_Base_SetConfig+0x13c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]
  }
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800
 80068c4:	40001800 	.word	0x40001800
 80068c8:	40001c00 	.word	0x40001c00
 80068cc:	40002000 	.word	0x40002000

080068d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 030a 	bic.w	r3, r3, #10
 800690c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692e:	b480      	push	{r7}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f023 0210 	bic.w	r2, r3, #16
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	031b      	lsls	r3, r3, #12
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800696a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f043 0307 	orr.w	r3, r3, #7
 80069b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	021a      	lsls	r2, r3, #8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e05a      	b.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d022      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a68:	d01d      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1a      	ldr	r2, [pc, #104]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a17      	ldr	r2, [pc, #92]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40001800 	.word	0x40001800

08006afc <findslot>:
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <findslot+0x2c>)
 8006afe:	b510      	push	{r4, lr}
 8006b00:	4604      	mov	r4, r0
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	b118      	cbz	r0, 8006b0e <findslot+0x12>
 8006b06:	6a03      	ldr	r3, [r0, #32]
 8006b08:	b90b      	cbnz	r3, 8006b0e <findslot+0x12>
 8006b0a:	f000 fb19 	bl	8007140 <__sinit>
 8006b0e:	2c13      	cmp	r4, #19
 8006b10:	d807      	bhi.n	8006b22 <findslot+0x26>
 8006b12:	4806      	ldr	r0, [pc, #24]	@ (8006b2c <findslot+0x30>)
 8006b14:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006b18:	3201      	adds	r2, #1
 8006b1a:	d002      	beq.n	8006b22 <findslot+0x26>
 8006b1c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006b20:	bd10      	pop	{r4, pc}
 8006b22:	2000      	movs	r0, #0
 8006b24:	e7fc      	b.n	8006b20 <findslot+0x24>
 8006b26:	bf00      	nop
 8006b28:	20000030 	.word	0x20000030
 8006b2c:	20025cbc 	.word	0x20025cbc

08006b30 <error>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	4604      	mov	r4, r0
 8006b34:	f000 fcd0 	bl	80074d8 <__errno>
 8006b38:	2613      	movs	r6, #19
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	2700      	movs	r7, #0
 8006b3e:	4630      	mov	r0, r6
 8006b40:	4639      	mov	r1, r7
 8006b42:	beab      	bkpt	0x00ab
 8006b44:	4606      	mov	r6, r0
 8006b46:	602e      	str	r6, [r5, #0]
 8006b48:	4620      	mov	r0, r4
 8006b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b4c <checkerror>:
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d101      	bne.n	8006b54 <checkerror+0x8>
 8006b50:	f7ff bfee 	b.w	8006b30 <error>
 8006b54:	4770      	bx	lr

08006b56 <_swiread>:
 8006b56:	b530      	push	{r4, r5, lr}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006b5e:	9203      	str	r2, [sp, #12]
 8006b60:	2406      	movs	r4, #6
 8006b62:	ad01      	add	r5, sp, #4
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	beab      	bkpt	0x00ab
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff ffed 	bl	8006b4c <checkerror>
 8006b72:	b005      	add	sp, #20
 8006b74:	bd30      	pop	{r4, r5, pc}

08006b76 <_read>:
 8006b76:	b570      	push	{r4, r5, r6, lr}
 8006b78:	460e      	mov	r6, r1
 8006b7a:	4614      	mov	r4, r2
 8006b7c:	f7ff ffbe 	bl	8006afc <findslot>
 8006b80:	4605      	mov	r5, r0
 8006b82:	b930      	cbnz	r0, 8006b92 <_read+0x1c>
 8006b84:	f000 fca8 	bl	80074d8 <__errno>
 8006b88:	2309      	movs	r3, #9
 8006b8a:	6003      	str	r3, [r0, #0]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	4622      	mov	r2, r4
 8006b96:	4631      	mov	r1, r6
 8006b98:	f7ff ffdd 	bl	8006b56 <_swiread>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d0f5      	beq.n	8006b8c <_read+0x16>
 8006ba0:	686b      	ldr	r3, [r5, #4]
 8006ba2:	1a20      	subs	r0, r4, r0
 8006ba4:	4403      	add	r3, r0
 8006ba6:	606b      	str	r3, [r5, #4]
 8006ba8:	e7f2      	b.n	8006b90 <_read+0x1a>

08006baa <_swilseek>:
 8006baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	4616      	mov	r6, r2
 8006bb0:	f7ff ffa4 	bl	8006afc <findslot>
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	b940      	cbnz	r0, 8006bca <_swilseek+0x20>
 8006bb8:	f000 fc8e 	bl	80074d8 <__errno>
 8006bbc:	2309      	movs	r3, #9
 8006bbe:	6003      	str	r3, [r0, #0]
 8006bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	b003      	add	sp, #12
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bca:	2e02      	cmp	r6, #2
 8006bcc:	d903      	bls.n	8006bd6 <_swilseek+0x2c>
 8006bce:	f000 fc83 	bl	80074d8 <__errno>
 8006bd2:	2316      	movs	r3, #22
 8006bd4:	e7f3      	b.n	8006bbe <_swilseek+0x14>
 8006bd6:	2e01      	cmp	r6, #1
 8006bd8:	d112      	bne.n	8006c00 <_swilseek+0x56>
 8006bda:	6843      	ldr	r3, [r0, #4]
 8006bdc:	18e4      	adds	r4, r4, r3
 8006bde:	d4f6      	bmi.n	8006bce <_swilseek+0x24>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	260a      	movs	r6, #10
 8006be4:	e9cd 3400 	strd	r3, r4, [sp]
 8006be8:	466f      	mov	r7, sp
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	beab      	bkpt	0x00ab
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7ff ffaa 	bl	8006b4c <checkerror>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	dbe1      	blt.n	8006bc0 <_swilseek+0x16>
 8006bfc:	606c      	str	r4, [r5, #4]
 8006bfe:	e7e1      	b.n	8006bc4 <_swilseek+0x1a>
 8006c00:	2e02      	cmp	r6, #2
 8006c02:	6803      	ldr	r3, [r0, #0]
 8006c04:	d1ec      	bne.n	8006be0 <_swilseek+0x36>
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	260c      	movs	r6, #12
 8006c0a:	466f      	mov	r7, sp
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	4639      	mov	r1, r7
 8006c10:	beab      	bkpt	0x00ab
 8006c12:	4606      	mov	r6, r0
 8006c14:	4630      	mov	r0, r6
 8006c16:	f7ff ff99 	bl	8006b4c <checkerror>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	d0d0      	beq.n	8006bc0 <_swilseek+0x16>
 8006c1e:	4404      	add	r4, r0
 8006c20:	e7de      	b.n	8006be0 <_swilseek+0x36>

08006c22 <_lseek>:
 8006c22:	f7ff bfc2 	b.w	8006baa <_swilseek>

08006c26 <_swiwrite>:
 8006c26:	b530      	push	{r4, r5, lr}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006c2e:	9203      	str	r2, [sp, #12]
 8006c30:	2405      	movs	r4, #5
 8006c32:	ad01      	add	r5, sp, #4
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	beab      	bkpt	0x00ab
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff ff85 	bl	8006b4c <checkerror>
 8006c42:	b005      	add	sp, #20
 8006c44:	bd30      	pop	{r4, r5, pc}

08006c46 <_write>:
 8006c46:	b570      	push	{r4, r5, r6, lr}
 8006c48:	460e      	mov	r6, r1
 8006c4a:	4615      	mov	r5, r2
 8006c4c:	f7ff ff56 	bl	8006afc <findslot>
 8006c50:	4604      	mov	r4, r0
 8006c52:	b930      	cbnz	r0, 8006c62 <_write+0x1c>
 8006c54:	f000 fc40 	bl	80074d8 <__errno>
 8006c58:	2309      	movs	r3, #9
 8006c5a:	6003      	str	r3, [r0, #0]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	bd70      	pop	{r4, r5, r6, pc}
 8006c62:	6800      	ldr	r0, [r0, #0]
 8006c64:	462a      	mov	r2, r5
 8006c66:	4631      	mov	r1, r6
 8006c68:	f7ff ffdd 	bl	8006c26 <_swiwrite>
 8006c6c:	1e03      	subs	r3, r0, #0
 8006c6e:	dbf5      	blt.n	8006c5c <_write+0x16>
 8006c70:	6862      	ldr	r2, [r4, #4]
 8006c72:	1ae8      	subs	r0, r5, r3
 8006c74:	4402      	add	r2, r0
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	6062      	str	r2, [r4, #4]
 8006c7a:	d1f1      	bne.n	8006c60 <_write+0x1a>
 8006c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c80:	2000      	movs	r0, #0
 8006c82:	f7ff bf55 	b.w	8006b30 <error>

08006c86 <_swiclose>:
 8006c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c88:	2402      	movs	r4, #2
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	ad01      	add	r5, sp, #4
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	beab      	bkpt	0x00ab
 8006c94:	4604      	mov	r4, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff ff58 	bl	8006b4c <checkerror>
 8006c9c:	b003      	add	sp, #12
 8006c9e:	bd30      	pop	{r4, r5, pc}

08006ca0 <_close>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	f7ff ff2a 	bl	8006afc <findslot>
 8006ca8:	4604      	mov	r4, r0
 8006caa:	b930      	cbnz	r0, 8006cba <_close+0x1a>
 8006cac:	f000 fc14 	bl	80074d8 <__errno>
 8006cb0:	2309      	movs	r3, #9
 8006cb2:	6003      	str	r3, [r0, #0]
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	bd38      	pop	{r3, r4, r5, pc}
 8006cba:	3d01      	subs	r5, #1
 8006cbc:	2d01      	cmp	r5, #1
 8006cbe:	d809      	bhi.n	8006cd4 <_close+0x34>
 8006cc0:	4b07      	ldr	r3, [pc, #28]	@ (8006ce0 <_close+0x40>)
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d104      	bne.n	8006cd4 <_close+0x34>
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e7f1      	b.n	8006cb8 <_close+0x18>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	f7ff ffd6 	bl	8006c86 <_swiclose>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0f5      	beq.n	8006cca <_close+0x2a>
 8006cde:	e7eb      	b.n	8006cb8 <_close+0x18>
 8006ce0:	20025cbc 	.word	0x20025cbc

08006ce4 <_swistat>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f7ff ff08 	bl	8006afc <findslot>
 8006cec:	4605      	mov	r5, r0
 8006cee:	b930      	cbnz	r0, 8006cfe <_swistat+0x1a>
 8006cf0:	f000 fbf2 	bl	80074d8 <__errno>
 8006cf4:	2309      	movs	r3, #9
 8006cf6:	6003      	str	r3, [r0, #0]
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d0a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006d0c:	260c      	movs	r6, #12
 8006d0e:	4630      	mov	r0, r6
 8006d10:	4629      	mov	r1, r5
 8006d12:	beab      	bkpt	0x00ab
 8006d14:	4605      	mov	r5, r0
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7ff ff18 	bl	8006b4c <checkerror>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d0eb      	beq.n	8006cf8 <_swistat+0x14>
 8006d20:	6120      	str	r0, [r4, #16]
 8006d22:	2000      	movs	r0, #0
 8006d24:	e7ea      	b.n	8006cfc <_swistat+0x18>

08006d26 <_fstat>:
 8006d26:	460b      	mov	r3, r1
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	2258      	movs	r2, #88	@ 0x58
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb83 	bl	800743c <memset>
 8006d36:	4601      	mov	r1, r0
 8006d38:	4620      	mov	r0, r4
 8006d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d3e:	f7ff bfd1 	b.w	8006ce4 <_swistat>

08006d42 <_stat>:
 8006d42:	b538      	push	{r3, r4, r5, lr}
 8006d44:	460d      	mov	r5, r1
 8006d46:	4604      	mov	r4, r0
 8006d48:	2258      	movs	r2, #88	@ 0x58
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 fb75 	bl	800743c <memset>
 8006d52:	4620      	mov	r0, r4
 8006d54:	2100      	movs	r1, #0
 8006d56:	f000 f811 	bl	8006d7c <_swiopen>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	d00b      	beq.n	8006d78 <_stat+0x36>
 8006d60:	686b      	ldr	r3, [r5, #4]
 8006d62:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d66:	606b      	str	r3, [r5, #4]
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7ff ffbb 	bl	8006ce4 <_swistat>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff ff95 	bl	8006ca0 <_close>
 8006d76:	462c      	mov	r4, r5
 8006d78:	4620      	mov	r0, r4
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}

08006d7c <_swiopen>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	4f29      	ldr	r7, [pc, #164]	@ (8006e28 <_swiopen+0xac>)
 8006d82:	b096      	sub	sp, #88	@ 0x58
 8006d84:	4682      	mov	sl, r0
 8006d86:	460e      	mov	r6, r1
 8006d88:	2400      	movs	r4, #0
 8006d8a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006d94:	d00c      	beq.n	8006db0 <_swiopen+0x34>
 8006d96:	3401      	adds	r4, #1
 8006d98:	2c14      	cmp	r4, #20
 8006d9a:	d1f6      	bne.n	8006d8a <_swiopen+0xe>
 8006d9c:	f000 fb9c 	bl	80074d8 <__errno>
 8006da0:	2318      	movs	r3, #24
 8006da2:	6003      	str	r3, [r0, #0]
 8006da4:	f04f 34ff 	mov.w	r4, #4294967295
 8006da8:	4620      	mov	r0, r4
 8006daa:	b016      	add	sp, #88	@ 0x58
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006db4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006db8:	46e9      	mov	r9, sp
 8006dba:	d109      	bne.n	8006dd0 <_swiopen+0x54>
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4650      	mov	r0, sl
 8006dc0:	f7ff ffbf 	bl	8006d42 <_stat>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d003      	beq.n	8006dd0 <_swiopen+0x54>
 8006dc8:	f000 fb86 	bl	80074d8 <__errno>
 8006dcc:	2311      	movs	r3, #17
 8006dce:	e7e8      	b.n	8006da2 <_swiopen+0x26>
 8006dd0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006dd4:	f240 6301 	movw	r3, #1537	@ 0x601
 8006dd8:	07b2      	lsls	r2, r6, #30
 8006dda:	bf48      	it	mi
 8006ddc:	f045 0502 	orrmi.w	r5, r5, #2
 8006de0:	421e      	tst	r6, r3
 8006de2:	bf18      	it	ne
 8006de4:	f045 0504 	orrne.w	r5, r5, #4
 8006de8:	0733      	lsls	r3, r6, #28
 8006dea:	bf48      	it	mi
 8006dec:	f025 0504 	bicmi.w	r5, r5, #4
 8006df0:	4650      	mov	r0, sl
 8006df2:	bf48      	it	mi
 8006df4:	f045 0508 	orrmi.w	r5, r5, #8
 8006df8:	f8cd a000 	str.w	sl, [sp]
 8006dfc:	f7f9 f9f8 	bl	80001f0 <strlen>
 8006e00:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006e04:	2501      	movs	r5, #1
 8006e06:	4628      	mov	r0, r5
 8006e08:	4649      	mov	r1, r9
 8006e0a:	beab      	bkpt	0x00ab
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	db05      	blt.n	8006e1e <_swiopen+0xa2>
 8006e12:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006e16:	4447      	add	r7, r8
 8006e18:	2300      	movs	r3, #0
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	e7c4      	b.n	8006da8 <_swiopen+0x2c>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f7ff fe86 	bl	8006b30 <error>
 8006e24:	4604      	mov	r4, r0
 8006e26:	e7bf      	b.n	8006da8 <_swiopen+0x2c>
 8006e28:	20025cbc 	.word	0x20025cbc

08006e2c <_get_semihosting_exts>:
 8006e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	4606      	mov	r6, r0
 8006e32:	460f      	mov	r7, r1
 8006e34:	4829      	ldr	r0, [pc, #164]	@ (8006edc <_get_semihosting_exts+0xb0>)
 8006e36:	2100      	movs	r1, #0
 8006e38:	4615      	mov	r5, r2
 8006e3a:	f7ff ff9f 	bl	8006d7c <_swiopen>
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4604      	mov	r4, r0
 8006e42:	2100      	movs	r1, #0
 8006e44:	4630      	mov	r0, r6
 8006e46:	f000 faf9 	bl	800743c <memset>
 8006e4a:	1c63      	adds	r3, r4, #1
 8006e4c:	d014      	beq.n	8006e78 <_get_semihosting_exts+0x4c>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff fe54 	bl	8006afc <findslot>
 8006e54:	f04f 080c 	mov.w	r8, #12
 8006e58:	4681      	mov	r9, r0
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	beab      	bkpt	0x00ab
 8006e60:	4680      	mov	r8, r0
 8006e62:	4640      	mov	r0, r8
 8006e64:	f7ff fe72 	bl	8006b4c <checkerror>
 8006e68:	2803      	cmp	r0, #3
 8006e6a:	dd02      	ble.n	8006e72 <_get_semihosting_exts+0x46>
 8006e6c:	1ec3      	subs	r3, r0, #3
 8006e6e:	42ab      	cmp	r3, r5
 8006e70:	dc07      	bgt.n	8006e82 <_get_semihosting_exts+0x56>
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7ff ff14 	bl	8006ca0 <_close>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	b003      	add	sp, #12
 8006e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e82:	2204      	movs	r2, #4
 8006e84:	eb0d 0102 	add.w	r1, sp, r2
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7ff fe74 	bl	8006b76 <_read>
 8006e8e:	2803      	cmp	r0, #3
 8006e90:	ddef      	ble.n	8006e72 <_get_semihosting_exts+0x46>
 8006e92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e96:	2b53      	cmp	r3, #83	@ 0x53
 8006e98:	d1eb      	bne.n	8006e72 <_get_semihosting_exts+0x46>
 8006e9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006e9e:	2b48      	cmp	r3, #72	@ 0x48
 8006ea0:	d1e7      	bne.n	8006e72 <_get_semihosting_exts+0x46>
 8006ea2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ea6:	2b46      	cmp	r3, #70	@ 0x46
 8006ea8:	d1e3      	bne.n	8006e72 <_get_semihosting_exts+0x46>
 8006eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006eae:	2b42      	cmp	r3, #66	@ 0x42
 8006eb0:	d1df      	bne.n	8006e72 <_get_semihosting_exts+0x46>
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff fe77 	bl	8006baa <_swilseek>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	dbd8      	blt.n	8006e72 <_get_semihosting_exts+0x46>
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7ff fe56 	bl	8006b76 <_read>
 8006eca:	4605      	mov	r5, r0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7ff fee7 	bl	8006ca0 <_close>
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7ff fe3a 	bl	8006b4c <checkerror>
 8006ed8:	e7d0      	b.n	8006e7c <_get_semihosting_exts+0x50>
 8006eda:	bf00      	nop
 8006edc:	08009284 	.word	0x08009284

08006ee0 <initialise_semihosting_exts>:
 8006ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8006f0c <initialise_semihosting_exts+0x2c>)
 8006ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8006f10 <initialise_semihosting_exts+0x30>)
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	2201      	movs	r2, #1
 8006eea:	a801      	add	r0, sp, #4
 8006eec:	6029      	str	r1, [r5, #0]
 8006eee:	6022      	str	r2, [r4, #0]
 8006ef0:	f7ff ff9c 	bl	8006e2c <_get_semihosting_exts>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	dd07      	ble.n	8006f08 <initialise_semihosting_exts+0x28>
 8006ef8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006efc:	f003 0201 	and.w	r2, r3, #1
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	b003      	add	sp, #12
 8006f0a:	bd30      	pop	{r4, r5, pc}
 8006f0c:	20000020 	.word	0x20000020
 8006f10:	2000001c 	.word	0x2000001c

08006f14 <_has_ext_stdout_stderr>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4c04      	ldr	r4, [pc, #16]	@ (8006f28 <_has_ext_stdout_stderr+0x14>)
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	da01      	bge.n	8006f22 <_has_ext_stdout_stderr+0xe>
 8006f1e:	f7ff ffdf 	bl	8006ee0 <initialise_semihosting_exts>
 8006f22:	6820      	ldr	r0, [r4, #0]
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	bf00      	nop
 8006f28:	2000001c 	.word	0x2000001c

08006f2c <initialise_monitor_handles>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	b085      	sub	sp, #20
 8006f32:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006fe4 <initialise_monitor_handles+0xb8>
 8006f36:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	2400      	movs	r4, #0
 8006f3e:	9303      	str	r3, [sp, #12]
 8006f40:	af01      	add	r7, sp, #4
 8006f42:	9402      	str	r4, [sp, #8]
 8006f44:	2501      	movs	r5, #1
 8006f46:	4628      	mov	r0, r5
 8006f48:	4639      	mov	r1, r7
 8006f4a:	beab      	bkpt	0x00ab
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006fe8 <initialise_monitor_handles+0xbc>
 8006f52:	4623      	mov	r3, r4
 8006f54:	4c20      	ldr	r4, [pc, #128]	@ (8006fd8 <initialise_monitor_handles+0xac>)
 8006f56:	f8c8 5000 	str.w	r5, [r8]
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006f62:	3301      	adds	r3, #1
 8006f64:	2b14      	cmp	r3, #20
 8006f66:	d1fa      	bne.n	8006f5e <initialise_monitor_handles+0x32>
 8006f68:	f7ff ffd4 	bl	8006f14 <_has_ext_stdout_stderr>
 8006f6c:	4d1b      	ldr	r5, [pc, #108]	@ (8006fdc <initialise_monitor_handles+0xb0>)
 8006f6e:	b1d0      	cbz	r0, 8006fa6 <initialise_monitor_handles+0x7a>
 8006f70:	f04f 0a03 	mov.w	sl, #3
 8006f74:	2304      	movs	r3, #4
 8006f76:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f7a:	2601      	movs	r6, #1
 8006f7c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006f80:	9302      	str	r3, [sp, #8]
 8006f82:	4630      	mov	r0, r6
 8006f84:	4639      	mov	r1, r7
 8006f86:	beab      	bkpt	0x00ab
 8006f88:	4683      	mov	fp, r0
 8006f8a:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <initialise_monitor_handles+0xb4>)
 8006f8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f90:	f8c3 b000 	str.w	fp, [r3]
 8006f94:	2308      	movs	r3, #8
 8006f96:	f8cd a00c 	str.w	sl, [sp, #12]
 8006f9a:	9302      	str	r3, [sp, #8]
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	beab      	bkpt	0x00ab
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	602e      	str	r6, [r5, #0]
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	bf02      	ittt	eq
 8006fac:	4b0c      	ldreq	r3, [pc, #48]	@ (8006fe0 <initialise_monitor_handles+0xb4>)
 8006fae:	681b      	ldreq	r3, [r3, #0]
 8006fb0:	602b      	streq	r3, [r5, #0]
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	6066      	str	r6, [r4, #4]
 8006fbc:	f7ff ffaa 	bl	8006f14 <_has_ext_stdout_stderr>
 8006fc0:	b130      	cbz	r0, 8006fd0 <initialise_monitor_handles+0xa4>
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <initialise_monitor_handles+0xb4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006fd0:	b005      	add	sp, #20
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20025cbc 	.word	0x20025cbc
 8006fdc:	20025cb0 	.word	0x20025cb0
 8006fe0:	20025cb4 	.word	0x20025cb4
 8006fe4:	0800929a 	.word	0x0800929a
 8006fe8:	20025cb8 	.word	0x20025cb8

08006fec <_isatty>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	f7ff fd85 	bl	8006afc <findslot>
 8006ff2:	2409      	movs	r4, #9
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	b920      	cbnz	r0, 8007002 <_isatty+0x16>
 8006ff8:	f000 fa6e 	bl	80074d8 <__errno>
 8006ffc:	6004      	str	r4, [r0, #0]
 8006ffe:	2000      	movs	r0, #0
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	4620      	mov	r0, r4
 8007004:	4629      	mov	r1, r5
 8007006:	beab      	bkpt	0x00ab
 8007008:	4604      	mov	r4, r0
 800700a:	2c01      	cmp	r4, #1
 800700c:	4620      	mov	r0, r4
 800700e:	d0f7      	beq.n	8007000 <_isatty+0x14>
 8007010:	f000 fa62 	bl	80074d8 <__errno>
 8007014:	2513      	movs	r5, #19
 8007016:	4604      	mov	r4, r0
 8007018:	2600      	movs	r6, #0
 800701a:	4628      	mov	r0, r5
 800701c:	4631      	mov	r1, r6
 800701e:	beab      	bkpt	0x00ab
 8007020:	4605      	mov	r5, r0
 8007022:	6025      	str	r5, [r4, #0]
 8007024:	e7eb      	b.n	8006ffe <_isatty+0x12>
	...

08007028 <std>:
 8007028:	2300      	movs	r3, #0
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	e9c0 3300 	strd	r3, r3, [r0]
 8007032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007036:	6083      	str	r3, [r0, #8]
 8007038:	8181      	strh	r1, [r0, #12]
 800703a:	6643      	str	r3, [r0, #100]	@ 0x64
 800703c:	81c2      	strh	r2, [r0, #14]
 800703e:	6183      	str	r3, [r0, #24]
 8007040:	4619      	mov	r1, r3
 8007042:	2208      	movs	r2, #8
 8007044:	305c      	adds	r0, #92	@ 0x5c
 8007046:	f000 f9f9 	bl	800743c <memset>
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <std+0x58>)
 800704c:	6263      	str	r3, [r4, #36]	@ 0x24
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <std+0x5c>)
 8007050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007052:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <std+0x60>)
 8007054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <std+0x64>)
 8007058:	6323      	str	r3, [r4, #48]	@ 0x30
 800705a:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <std+0x68>)
 800705c:	6224      	str	r4, [r4, #32]
 800705e:	429c      	cmp	r4, r3
 8007060:	d006      	beq.n	8007070 <std+0x48>
 8007062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007066:	4294      	cmp	r4, r2
 8007068:	d002      	beq.n	8007070 <std+0x48>
 800706a:	33d0      	adds	r3, #208	@ 0xd0
 800706c:	429c      	cmp	r4, r3
 800706e:	d105      	bne.n	800707c <std+0x54>
 8007070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f000 ba58 	b.w	800752c <__retarget_lock_init_recursive>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	bf00      	nop
 8007080:	0800728d 	.word	0x0800728d
 8007084:	080072af 	.word	0x080072af
 8007088:	080072e7 	.word	0x080072e7
 800708c:	0800730b 	.word	0x0800730b
 8007090:	20025d5c 	.word	0x20025d5c

08007094 <stdio_exit_handler>:
 8007094:	4a02      	ldr	r2, [pc, #8]	@ (80070a0 <stdio_exit_handler+0xc>)
 8007096:	4903      	ldr	r1, [pc, #12]	@ (80070a4 <stdio_exit_handler+0x10>)
 8007098:	4803      	ldr	r0, [pc, #12]	@ (80070a8 <stdio_exit_handler+0x14>)
 800709a:	f000 b869 	b.w	8007170 <_fwalk_sglue>
 800709e:	bf00      	nop
 80070a0:	20000024 	.word	0x20000024
 80070a4:	08007dcd 	.word	0x08007dcd
 80070a8:	20000034 	.word	0x20000034

080070ac <cleanup_stdio>:
 80070ac:	6841      	ldr	r1, [r0, #4]
 80070ae:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <cleanup_stdio+0x34>)
 80070b0:	4299      	cmp	r1, r3
 80070b2:	b510      	push	{r4, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	d001      	beq.n	80070bc <cleanup_stdio+0x10>
 80070b8:	f000 fe88 	bl	8007dcc <_fflush_r>
 80070bc:	68a1      	ldr	r1, [r4, #8]
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <cleanup_stdio+0x38>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	d002      	beq.n	80070ca <cleanup_stdio+0x1e>
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fe81 	bl	8007dcc <_fflush_r>
 80070ca:	68e1      	ldr	r1, [r4, #12]
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <cleanup_stdio+0x3c>)
 80070ce:	4299      	cmp	r1, r3
 80070d0:	d004      	beq.n	80070dc <cleanup_stdio+0x30>
 80070d2:	4620      	mov	r0, r4
 80070d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d8:	f000 be78 	b.w	8007dcc <_fflush_r>
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	20025d5c 	.word	0x20025d5c
 80070e4:	20025dc4 	.word	0x20025dc4
 80070e8:	20025e2c 	.word	0x20025e2c

080070ec <global_stdio_init.part.0>:
 80070ec:	b510      	push	{r4, lr}
 80070ee:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <global_stdio_init.part.0+0x30>)
 80070f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007120 <global_stdio_init.part.0+0x34>)
 80070f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007124 <global_stdio_init.part.0+0x38>)
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	4620      	mov	r0, r4
 80070f8:	2200      	movs	r2, #0
 80070fa:	2104      	movs	r1, #4
 80070fc:	f7ff ff94 	bl	8007028 <std>
 8007100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007104:	2201      	movs	r2, #1
 8007106:	2109      	movs	r1, #9
 8007108:	f7ff ff8e 	bl	8007028 <std>
 800710c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007110:	2202      	movs	r2, #2
 8007112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007116:	2112      	movs	r1, #18
 8007118:	f7ff bf86 	b.w	8007028 <std>
 800711c:	20025e94 	.word	0x20025e94
 8007120:	20025d5c 	.word	0x20025d5c
 8007124:	08007095 	.word	0x08007095

08007128 <__sfp_lock_acquire>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__sfp_lock_acquire+0x8>)
 800712a:	f000 ba00 	b.w	800752e <__retarget_lock_acquire_recursive>
 800712e:	bf00      	nop
 8007130:	20025e9d 	.word	0x20025e9d

08007134 <__sfp_lock_release>:
 8007134:	4801      	ldr	r0, [pc, #4]	@ (800713c <__sfp_lock_release+0x8>)
 8007136:	f000 b9fb 	b.w	8007530 <__retarget_lock_release_recursive>
 800713a:	bf00      	nop
 800713c:	20025e9d 	.word	0x20025e9d

08007140 <__sinit>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	f7ff fff0 	bl	8007128 <__sfp_lock_acquire>
 8007148:	6a23      	ldr	r3, [r4, #32]
 800714a:	b11b      	cbz	r3, 8007154 <__sinit+0x14>
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f7ff bff0 	b.w	8007134 <__sfp_lock_release>
 8007154:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <__sinit+0x28>)
 8007156:	6223      	str	r3, [r4, #32]
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <__sinit+0x2c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f5      	bne.n	800714c <__sinit+0xc>
 8007160:	f7ff ffc4 	bl	80070ec <global_stdio_init.part.0>
 8007164:	e7f2      	b.n	800714c <__sinit+0xc>
 8007166:	bf00      	nop
 8007168:	080070ad 	.word	0x080070ad
 800716c:	20025e94 	.word	0x20025e94

08007170 <_fwalk_sglue>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	4607      	mov	r7, r0
 8007176:	4688      	mov	r8, r1
 8007178:	4614      	mov	r4, r2
 800717a:	2600      	movs	r6, #0
 800717c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007180:	f1b9 0901 	subs.w	r9, r9, #1
 8007184:	d505      	bpl.n	8007192 <_fwalk_sglue+0x22>
 8007186:	6824      	ldr	r4, [r4, #0]
 8007188:	2c00      	cmp	r4, #0
 800718a:	d1f7      	bne.n	800717c <_fwalk_sglue+0xc>
 800718c:	4630      	mov	r0, r6
 800718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d907      	bls.n	80071a8 <_fwalk_sglue+0x38>
 8007198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800719c:	3301      	adds	r3, #1
 800719e:	d003      	beq.n	80071a8 <_fwalk_sglue+0x38>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	4306      	orrs	r6, r0
 80071a8:	3568      	adds	r5, #104	@ 0x68
 80071aa:	e7e9      	b.n	8007180 <_fwalk_sglue+0x10>

080071ac <iprintf>:
 80071ac:	b40f      	push	{r0, r1, r2, r3}
 80071ae:	b507      	push	{r0, r1, r2, lr}
 80071b0:	4906      	ldr	r1, [pc, #24]	@ (80071cc <iprintf+0x20>)
 80071b2:	ab04      	add	r3, sp, #16
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ba:	6881      	ldr	r1, [r0, #8]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	f000 fadb 	bl	8007778 <_vfiprintf_r>
 80071c2:	b003      	add	sp, #12
 80071c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c8:	b004      	add	sp, #16
 80071ca:	4770      	bx	lr
 80071cc:	20000030 	.word	0x20000030

080071d0 <_puts_r>:
 80071d0:	6a03      	ldr	r3, [r0, #32]
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	6884      	ldr	r4, [r0, #8]
 80071d6:	4605      	mov	r5, r0
 80071d8:	460e      	mov	r6, r1
 80071da:	b90b      	cbnz	r3, 80071e0 <_puts_r+0x10>
 80071dc:	f7ff ffb0 	bl	8007140 <__sinit>
 80071e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e2:	07db      	lsls	r3, r3, #31
 80071e4:	d405      	bmi.n	80071f2 <_puts_r+0x22>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	0598      	lsls	r0, r3, #22
 80071ea:	d402      	bmi.n	80071f2 <_puts_r+0x22>
 80071ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ee:	f000 f99e 	bl	800752e <__retarget_lock_acquire_recursive>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	0719      	lsls	r1, r3, #28
 80071f6:	d502      	bpl.n	80071fe <_puts_r+0x2e>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d135      	bne.n	800726a <_puts_r+0x9a>
 80071fe:	4621      	mov	r1, r4
 8007200:	4628      	mov	r0, r5
 8007202:	f000 f8c5 	bl	8007390 <__swsetup_r>
 8007206:	b380      	cbz	r0, 800726a <_puts_r+0x9a>
 8007208:	f04f 35ff 	mov.w	r5, #4294967295
 800720c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800720e:	07da      	lsls	r2, r3, #31
 8007210:	d405      	bmi.n	800721e <_puts_r+0x4e>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	059b      	lsls	r3, r3, #22
 8007216:	d402      	bmi.n	800721e <_puts_r+0x4e>
 8007218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800721a:	f000 f989 	bl	8007530 <__retarget_lock_release_recursive>
 800721e:	4628      	mov	r0, r5
 8007220:	bd70      	pop	{r4, r5, r6, pc}
 8007222:	2b00      	cmp	r3, #0
 8007224:	da04      	bge.n	8007230 <_puts_r+0x60>
 8007226:	69a2      	ldr	r2, [r4, #24]
 8007228:	429a      	cmp	r2, r3
 800722a:	dc17      	bgt.n	800725c <_puts_r+0x8c>
 800722c:	290a      	cmp	r1, #10
 800722e:	d015      	beq.n	800725c <_puts_r+0x8c>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	7019      	strb	r1, [r3, #0]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800723e:	3b01      	subs	r3, #1
 8007240:	60a3      	str	r3, [r4, #8]
 8007242:	2900      	cmp	r1, #0
 8007244:	d1ed      	bne.n	8007222 <_puts_r+0x52>
 8007246:	2b00      	cmp	r3, #0
 8007248:	da11      	bge.n	800726e <_puts_r+0x9e>
 800724a:	4622      	mov	r2, r4
 800724c:	210a      	movs	r1, #10
 800724e:	4628      	mov	r0, r5
 8007250:	f000 f85f 	bl	8007312 <__swbuf_r>
 8007254:	3001      	adds	r0, #1
 8007256:	d0d7      	beq.n	8007208 <_puts_r+0x38>
 8007258:	250a      	movs	r5, #10
 800725a:	e7d7      	b.n	800720c <_puts_r+0x3c>
 800725c:	4622      	mov	r2, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f000 f857 	bl	8007312 <__swbuf_r>
 8007264:	3001      	adds	r0, #1
 8007266:	d1e7      	bne.n	8007238 <_puts_r+0x68>
 8007268:	e7ce      	b.n	8007208 <_puts_r+0x38>
 800726a:	3e01      	subs	r6, #1
 800726c:	e7e4      	b.n	8007238 <_puts_r+0x68>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	220a      	movs	r2, #10
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e7ee      	b.n	8007258 <_puts_r+0x88>
	...

0800727c <puts>:
 800727c:	4b02      	ldr	r3, [pc, #8]	@ (8007288 <puts+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	f7ff bfa5 	b.w	80071d0 <_puts_r>
 8007286:	bf00      	nop
 8007288:	20000030 	.word	0x20000030

0800728c <__sread>:
 800728c:	b510      	push	{r4, lr}
 800728e:	460c      	mov	r4, r1
 8007290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007294:	f000 f8fc 	bl	8007490 <_read_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	bfab      	itete	ge
 800729c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800729e:	89a3      	ldrhlt	r3, [r4, #12]
 80072a0:	181b      	addge	r3, r3, r0
 80072a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072a6:	bfac      	ite	ge
 80072a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072aa:	81a3      	strhlt	r3, [r4, #12]
 80072ac:	bd10      	pop	{r4, pc}

080072ae <__swrite>:
 80072ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	461f      	mov	r7, r3
 80072b4:	898b      	ldrh	r3, [r1, #12]
 80072b6:	05db      	lsls	r3, r3, #23
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4616      	mov	r6, r2
 80072be:	d505      	bpl.n	80072cc <__swrite+0x1e>
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	2302      	movs	r3, #2
 80072c6:	2200      	movs	r2, #0
 80072c8:	f000 f8d0 	bl	800746c <_lseek_r>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	4632      	mov	r2, r6
 80072da:	463b      	mov	r3, r7
 80072dc:	4628      	mov	r0, r5
 80072de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	f000 b8e7 	b.w	80074b4 <_write_r>

080072e6 <__sseek>:
 80072e6:	b510      	push	{r4, lr}
 80072e8:	460c      	mov	r4, r1
 80072ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ee:	f000 f8bd 	bl	800746c <_lseek_r>
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	bf15      	itete	ne
 80072f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007302:	81a3      	strheq	r3, [r4, #12]
 8007304:	bf18      	it	ne
 8007306:	81a3      	strhne	r3, [r4, #12]
 8007308:	bd10      	pop	{r4, pc}

0800730a <__sclose>:
 800730a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730e:	f000 b89d 	b.w	800744c <_close_r>

08007312 <__swbuf_r>:
 8007312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007314:	460e      	mov	r6, r1
 8007316:	4614      	mov	r4, r2
 8007318:	4605      	mov	r5, r0
 800731a:	b118      	cbz	r0, 8007324 <__swbuf_r+0x12>
 800731c:	6a03      	ldr	r3, [r0, #32]
 800731e:	b90b      	cbnz	r3, 8007324 <__swbuf_r+0x12>
 8007320:	f7ff ff0e 	bl	8007140 <__sinit>
 8007324:	69a3      	ldr	r3, [r4, #24]
 8007326:	60a3      	str	r3, [r4, #8]
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	071a      	lsls	r2, r3, #28
 800732c:	d501      	bpl.n	8007332 <__swbuf_r+0x20>
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	b943      	cbnz	r3, 8007344 <__swbuf_r+0x32>
 8007332:	4621      	mov	r1, r4
 8007334:	4628      	mov	r0, r5
 8007336:	f000 f82b 	bl	8007390 <__swsetup_r>
 800733a:	b118      	cbz	r0, 8007344 <__swbuf_r+0x32>
 800733c:	f04f 37ff 	mov.w	r7, #4294967295
 8007340:	4638      	mov	r0, r7
 8007342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	6922      	ldr	r2, [r4, #16]
 8007348:	1a98      	subs	r0, r3, r2
 800734a:	6963      	ldr	r3, [r4, #20]
 800734c:	b2f6      	uxtb	r6, r6
 800734e:	4283      	cmp	r3, r0
 8007350:	4637      	mov	r7, r6
 8007352:	dc05      	bgt.n	8007360 <__swbuf_r+0x4e>
 8007354:	4621      	mov	r1, r4
 8007356:	4628      	mov	r0, r5
 8007358:	f000 fd38 	bl	8007dcc <_fflush_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	d1ed      	bne.n	800733c <__swbuf_r+0x2a>
 8007360:	68a3      	ldr	r3, [r4, #8]
 8007362:	3b01      	subs	r3, #1
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	701e      	strb	r6, [r3, #0]
 800736e:	6962      	ldr	r2, [r4, #20]
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	429a      	cmp	r2, r3
 8007374:	d004      	beq.n	8007380 <__swbuf_r+0x6e>
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	07db      	lsls	r3, r3, #31
 800737a:	d5e1      	bpl.n	8007340 <__swbuf_r+0x2e>
 800737c:	2e0a      	cmp	r6, #10
 800737e:	d1df      	bne.n	8007340 <__swbuf_r+0x2e>
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f000 fd22 	bl	8007dcc <_fflush_r>
 8007388:	2800      	cmp	r0, #0
 800738a:	d0d9      	beq.n	8007340 <__swbuf_r+0x2e>
 800738c:	e7d6      	b.n	800733c <__swbuf_r+0x2a>
	...

08007390 <__swsetup_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4b29      	ldr	r3, [pc, #164]	@ (8007438 <__swsetup_r+0xa8>)
 8007394:	4605      	mov	r5, r0
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	460c      	mov	r4, r1
 800739a:	b118      	cbz	r0, 80073a4 <__swsetup_r+0x14>
 800739c:	6a03      	ldr	r3, [r0, #32]
 800739e:	b90b      	cbnz	r3, 80073a4 <__swsetup_r+0x14>
 80073a0:	f7ff fece 	bl	8007140 <__sinit>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	0719      	lsls	r1, r3, #28
 80073aa:	d422      	bmi.n	80073f2 <__swsetup_r+0x62>
 80073ac:	06da      	lsls	r2, r3, #27
 80073ae:	d407      	bmi.n	80073c0 <__swsetup_r+0x30>
 80073b0:	2209      	movs	r2, #9
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	e033      	b.n	8007428 <__swsetup_r+0x98>
 80073c0:	0758      	lsls	r0, r3, #29
 80073c2:	d512      	bpl.n	80073ea <__swsetup_r+0x5a>
 80073c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c6:	b141      	cbz	r1, 80073da <__swsetup_r+0x4a>
 80073c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073cc:	4299      	cmp	r1, r3
 80073ce:	d002      	beq.n	80073d6 <__swsetup_r+0x46>
 80073d0:	4628      	mov	r0, r5
 80073d2:	f000 f8af 	bl	8007534 <_free_r>
 80073d6:	2300      	movs	r3, #0
 80073d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	2300      	movs	r3, #0
 80073e4:	6063      	str	r3, [r4, #4]
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	b94b      	cbnz	r3, 800740a <__swsetup_r+0x7a>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007400:	d003      	beq.n	800740a <__swsetup_r+0x7a>
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f000 fd2f 	bl	8007e68 <__smakebuf_r>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	f013 0201 	ands.w	r2, r3, #1
 8007412:	d00a      	beq.n	800742a <__swsetup_r+0x9a>
 8007414:	2200      	movs	r2, #0
 8007416:	60a2      	str	r2, [r4, #8]
 8007418:	6962      	ldr	r2, [r4, #20]
 800741a:	4252      	negs	r2, r2
 800741c:	61a2      	str	r2, [r4, #24]
 800741e:	6922      	ldr	r2, [r4, #16]
 8007420:	b942      	cbnz	r2, 8007434 <__swsetup_r+0xa4>
 8007422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007426:	d1c5      	bne.n	80073b4 <__swsetup_r+0x24>
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	0799      	lsls	r1, r3, #30
 800742c:	bf58      	it	pl
 800742e:	6962      	ldrpl	r2, [r4, #20]
 8007430:	60a2      	str	r2, [r4, #8]
 8007432:	e7f4      	b.n	800741e <__swsetup_r+0x8e>
 8007434:	2000      	movs	r0, #0
 8007436:	e7f7      	b.n	8007428 <__swsetup_r+0x98>
 8007438:	20000030 	.word	0x20000030

0800743c <memset>:
 800743c:	4402      	add	r2, r0
 800743e:	4603      	mov	r3, r0
 8007440:	4293      	cmp	r3, r2
 8007442:	d100      	bne.n	8007446 <memset+0xa>
 8007444:	4770      	bx	lr
 8007446:	f803 1b01 	strb.w	r1, [r3], #1
 800744a:	e7f9      	b.n	8007440 <memset+0x4>

0800744c <_close_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d06      	ldr	r5, [pc, #24]	@ (8007468 <_close_r+0x1c>)
 8007450:	2300      	movs	r3, #0
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7ff fc22 	bl	8006ca0 <_close>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_close_r+0x1a>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_close_r+0x1a>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	20025e98 	.word	0x20025e98

0800746c <_lseek_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	@ (800748c <_lseek_r+0x20>)
 8007470:	4604      	mov	r4, r0
 8007472:	4608      	mov	r0, r1
 8007474:	4611      	mov	r1, r2
 8007476:	2200      	movs	r2, #0
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7ff fbd1 	bl	8006c22 <_lseek>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_lseek_r+0x1e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_lseek_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20025e98 	.word	0x20025e98

08007490 <_read_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	@ (80074b0 <_read_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7ff fb69 	bl	8006b76 <_read>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_read_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_read_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20025e98 	.word	0x20025e98

080074b4 <_write_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	@ (80074d4 <_write_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7ff fbbf 	bl	8006c46 <_write>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_write_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_write_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	20025e98 	.word	0x20025e98

080074d8 <__errno>:
 80074d8:	4b01      	ldr	r3, [pc, #4]	@ (80074e0 <__errno+0x8>)
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000030 	.word	0x20000030

080074e4 <__libc_init_array>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4d0d      	ldr	r5, [pc, #52]	@ (800751c <__libc_init_array+0x38>)
 80074e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007520 <__libc_init_array+0x3c>)
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	10a4      	asrs	r4, r4, #2
 80074ee:	2600      	movs	r6, #0
 80074f0:	42a6      	cmp	r6, r4
 80074f2:	d109      	bne.n	8007508 <__libc_init_array+0x24>
 80074f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007524 <__libc_init_array+0x40>)
 80074f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007528 <__libc_init_array+0x44>)
 80074f8:	f000 fd24 	bl	8007f44 <_init>
 80074fc:	1b64      	subs	r4, r4, r5
 80074fe:	10a4      	asrs	r4, r4, #2
 8007500:	2600      	movs	r6, #0
 8007502:	42a6      	cmp	r6, r4
 8007504:	d105      	bne.n	8007512 <__libc_init_array+0x2e>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	f855 3b04 	ldr.w	r3, [r5], #4
 800750c:	4798      	blx	r3
 800750e:	3601      	adds	r6, #1
 8007510:	e7ee      	b.n	80074f0 <__libc_init_array+0xc>
 8007512:	f855 3b04 	ldr.w	r3, [r5], #4
 8007516:	4798      	blx	r3
 8007518:	3601      	adds	r6, #1
 800751a:	e7f2      	b.n	8007502 <__libc_init_array+0x1e>
 800751c:	080092dc 	.word	0x080092dc
 8007520:	080092dc 	.word	0x080092dc
 8007524:	080092dc 	.word	0x080092dc
 8007528:	080092e0 	.word	0x080092e0

0800752c <__retarget_lock_init_recursive>:
 800752c:	4770      	bx	lr

0800752e <__retarget_lock_acquire_recursive>:
 800752e:	4770      	bx	lr

08007530 <__retarget_lock_release_recursive>:
 8007530:	4770      	bx	lr
	...

08007534 <_free_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4605      	mov	r5, r0
 8007538:	2900      	cmp	r1, #0
 800753a:	d041      	beq.n	80075c0 <_free_r+0x8c>
 800753c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007540:	1f0c      	subs	r4, r1, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	bfb8      	it	lt
 8007546:	18e4      	addlt	r4, r4, r3
 8007548:	f000 f8e0 	bl	800770c <__malloc_lock>
 800754c:	4a1d      	ldr	r2, [pc, #116]	@ (80075c4 <_free_r+0x90>)
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	b933      	cbnz	r3, 8007560 <_free_r+0x2c>
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	6014      	str	r4, [r2, #0]
 8007556:	4628      	mov	r0, r5
 8007558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755c:	f000 b8dc 	b.w	8007718 <__malloc_unlock>
 8007560:	42a3      	cmp	r3, r4
 8007562:	d908      	bls.n	8007576 <_free_r+0x42>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	1821      	adds	r1, r4, r0
 8007568:	428b      	cmp	r3, r1
 800756a:	bf01      	itttt	eq
 800756c:	6819      	ldreq	r1, [r3, #0]
 800756e:	685b      	ldreq	r3, [r3, #4]
 8007570:	1809      	addeq	r1, r1, r0
 8007572:	6021      	streq	r1, [r4, #0]
 8007574:	e7ed      	b.n	8007552 <_free_r+0x1e>
 8007576:	461a      	mov	r2, r3
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	b10b      	cbz	r3, 8007580 <_free_r+0x4c>
 800757c:	42a3      	cmp	r3, r4
 800757e:	d9fa      	bls.n	8007576 <_free_r+0x42>
 8007580:	6811      	ldr	r1, [r2, #0]
 8007582:	1850      	adds	r0, r2, r1
 8007584:	42a0      	cmp	r0, r4
 8007586:	d10b      	bne.n	80075a0 <_free_r+0x6c>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	4401      	add	r1, r0
 800758c:	1850      	adds	r0, r2, r1
 800758e:	4283      	cmp	r3, r0
 8007590:	6011      	str	r1, [r2, #0]
 8007592:	d1e0      	bne.n	8007556 <_free_r+0x22>
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	6053      	str	r3, [r2, #4]
 800759a:	4408      	add	r0, r1
 800759c:	6010      	str	r0, [r2, #0]
 800759e:	e7da      	b.n	8007556 <_free_r+0x22>
 80075a0:	d902      	bls.n	80075a8 <_free_r+0x74>
 80075a2:	230c      	movs	r3, #12
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	e7d6      	b.n	8007556 <_free_r+0x22>
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	1821      	adds	r1, r4, r0
 80075ac:	428b      	cmp	r3, r1
 80075ae:	bf04      	itt	eq
 80075b0:	6819      	ldreq	r1, [r3, #0]
 80075b2:	685b      	ldreq	r3, [r3, #4]
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	bf04      	itt	eq
 80075b8:	1809      	addeq	r1, r1, r0
 80075ba:	6021      	streq	r1, [r4, #0]
 80075bc:	6054      	str	r4, [r2, #4]
 80075be:	e7ca      	b.n	8007556 <_free_r+0x22>
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	bf00      	nop
 80075c4:	20025ea4 	.word	0x20025ea4

080075c8 <sbrk_aligned>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007608 <sbrk_aligned+0x40>)
 80075cc:	460c      	mov	r4, r1
 80075ce:	6831      	ldr	r1, [r6, #0]
 80075d0:	4605      	mov	r5, r0
 80075d2:	b911      	cbnz	r1, 80075da <sbrk_aligned+0x12>
 80075d4:	f000 fca6 	bl	8007f24 <_sbrk_r>
 80075d8:	6030      	str	r0, [r6, #0]
 80075da:	4621      	mov	r1, r4
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 fca1 	bl	8007f24 <_sbrk_r>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	d103      	bne.n	80075ee <sbrk_aligned+0x26>
 80075e6:	f04f 34ff 	mov.w	r4, #4294967295
 80075ea:	4620      	mov	r0, r4
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	1cc4      	adds	r4, r0, #3
 80075f0:	f024 0403 	bic.w	r4, r4, #3
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	d0f8      	beq.n	80075ea <sbrk_aligned+0x22>
 80075f8:	1a21      	subs	r1, r4, r0
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 fc92 	bl	8007f24 <_sbrk_r>
 8007600:	3001      	adds	r0, #1
 8007602:	d1f2      	bne.n	80075ea <sbrk_aligned+0x22>
 8007604:	e7ef      	b.n	80075e6 <sbrk_aligned+0x1e>
 8007606:	bf00      	nop
 8007608:	20025ea0 	.word	0x20025ea0

0800760c <_malloc_r>:
 800760c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007610:	1ccd      	adds	r5, r1, #3
 8007612:	f025 0503 	bic.w	r5, r5, #3
 8007616:	3508      	adds	r5, #8
 8007618:	2d0c      	cmp	r5, #12
 800761a:	bf38      	it	cc
 800761c:	250c      	movcc	r5, #12
 800761e:	2d00      	cmp	r5, #0
 8007620:	4606      	mov	r6, r0
 8007622:	db01      	blt.n	8007628 <_malloc_r+0x1c>
 8007624:	42a9      	cmp	r1, r5
 8007626:	d904      	bls.n	8007632 <_malloc_r+0x26>
 8007628:	230c      	movs	r3, #12
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	2000      	movs	r0, #0
 800762e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007708 <_malloc_r+0xfc>
 8007636:	f000 f869 	bl	800770c <__malloc_lock>
 800763a:	f8d8 3000 	ldr.w	r3, [r8]
 800763e:	461c      	mov	r4, r3
 8007640:	bb44      	cbnz	r4, 8007694 <_malloc_r+0x88>
 8007642:	4629      	mov	r1, r5
 8007644:	4630      	mov	r0, r6
 8007646:	f7ff ffbf 	bl	80075c8 <sbrk_aligned>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	4604      	mov	r4, r0
 800764e:	d158      	bne.n	8007702 <_malloc_r+0xf6>
 8007650:	f8d8 4000 	ldr.w	r4, [r8]
 8007654:	4627      	mov	r7, r4
 8007656:	2f00      	cmp	r7, #0
 8007658:	d143      	bne.n	80076e2 <_malloc_r+0xd6>
 800765a:	2c00      	cmp	r4, #0
 800765c:	d04b      	beq.n	80076f6 <_malloc_r+0xea>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	4639      	mov	r1, r7
 8007662:	4630      	mov	r0, r6
 8007664:	eb04 0903 	add.w	r9, r4, r3
 8007668:	f000 fc5c 	bl	8007f24 <_sbrk_r>
 800766c:	4581      	cmp	r9, r0
 800766e:	d142      	bne.n	80076f6 <_malloc_r+0xea>
 8007670:	6821      	ldr	r1, [r4, #0]
 8007672:	1a6d      	subs	r5, r5, r1
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff ffa6 	bl	80075c8 <sbrk_aligned>
 800767c:	3001      	adds	r0, #1
 800767e:	d03a      	beq.n	80076f6 <_malloc_r+0xea>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	442b      	add	r3, r5
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	f8d8 3000 	ldr.w	r3, [r8]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	bb62      	cbnz	r2, 80076e8 <_malloc_r+0xdc>
 800768e:	f8c8 7000 	str.w	r7, [r8]
 8007692:	e00f      	b.n	80076b4 <_malloc_r+0xa8>
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	1b52      	subs	r2, r2, r5
 8007698:	d420      	bmi.n	80076dc <_malloc_r+0xd0>
 800769a:	2a0b      	cmp	r2, #11
 800769c:	d917      	bls.n	80076ce <_malloc_r+0xc2>
 800769e:	1961      	adds	r1, r4, r5
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	6025      	str	r5, [r4, #0]
 80076a4:	bf18      	it	ne
 80076a6:	6059      	strne	r1, [r3, #4]
 80076a8:	6863      	ldr	r3, [r4, #4]
 80076aa:	bf08      	it	eq
 80076ac:	f8c8 1000 	streq.w	r1, [r8]
 80076b0:	5162      	str	r2, [r4, r5]
 80076b2:	604b      	str	r3, [r1, #4]
 80076b4:	4630      	mov	r0, r6
 80076b6:	f000 f82f 	bl	8007718 <__malloc_unlock>
 80076ba:	f104 000b 	add.w	r0, r4, #11
 80076be:	1d23      	adds	r3, r4, #4
 80076c0:	f020 0007 	bic.w	r0, r0, #7
 80076c4:	1ac2      	subs	r2, r0, r3
 80076c6:	bf1c      	itt	ne
 80076c8:	1a1b      	subne	r3, r3, r0
 80076ca:	50a3      	strne	r3, [r4, r2]
 80076cc:	e7af      	b.n	800762e <_malloc_r+0x22>
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	bf0c      	ite	eq
 80076d4:	f8c8 2000 	streq.w	r2, [r8]
 80076d8:	605a      	strne	r2, [r3, #4]
 80076da:	e7eb      	b.n	80076b4 <_malloc_r+0xa8>
 80076dc:	4623      	mov	r3, r4
 80076de:	6864      	ldr	r4, [r4, #4]
 80076e0:	e7ae      	b.n	8007640 <_malloc_r+0x34>
 80076e2:	463c      	mov	r4, r7
 80076e4:	687f      	ldr	r7, [r7, #4]
 80076e6:	e7b6      	b.n	8007656 <_malloc_r+0x4a>
 80076e8:	461a      	mov	r2, r3
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d1fb      	bne.n	80076e8 <_malloc_r+0xdc>
 80076f0:	2300      	movs	r3, #0
 80076f2:	6053      	str	r3, [r2, #4]
 80076f4:	e7de      	b.n	80076b4 <_malloc_r+0xa8>
 80076f6:	230c      	movs	r3, #12
 80076f8:	6033      	str	r3, [r6, #0]
 80076fa:	4630      	mov	r0, r6
 80076fc:	f000 f80c 	bl	8007718 <__malloc_unlock>
 8007700:	e794      	b.n	800762c <_malloc_r+0x20>
 8007702:	6005      	str	r5, [r0, #0]
 8007704:	e7d6      	b.n	80076b4 <_malloc_r+0xa8>
 8007706:	bf00      	nop
 8007708:	20025ea4 	.word	0x20025ea4

0800770c <__malloc_lock>:
 800770c:	4801      	ldr	r0, [pc, #4]	@ (8007714 <__malloc_lock+0x8>)
 800770e:	f7ff bf0e 	b.w	800752e <__retarget_lock_acquire_recursive>
 8007712:	bf00      	nop
 8007714:	20025e9c 	.word	0x20025e9c

08007718 <__malloc_unlock>:
 8007718:	4801      	ldr	r0, [pc, #4]	@ (8007720 <__malloc_unlock+0x8>)
 800771a:	f7ff bf09 	b.w	8007530 <__retarget_lock_release_recursive>
 800771e:	bf00      	nop
 8007720:	20025e9c 	.word	0x20025e9c

08007724 <__sfputc_r>:
 8007724:	6893      	ldr	r3, [r2, #8]
 8007726:	3b01      	subs	r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	b410      	push	{r4}
 800772c:	6093      	str	r3, [r2, #8]
 800772e:	da08      	bge.n	8007742 <__sfputc_r+0x1e>
 8007730:	6994      	ldr	r4, [r2, #24]
 8007732:	42a3      	cmp	r3, r4
 8007734:	db01      	blt.n	800773a <__sfputc_r+0x16>
 8007736:	290a      	cmp	r1, #10
 8007738:	d103      	bne.n	8007742 <__sfputc_r+0x1e>
 800773a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800773e:	f7ff bde8 	b.w	8007312 <__swbuf_r>
 8007742:	6813      	ldr	r3, [r2, #0]
 8007744:	1c58      	adds	r0, r3, #1
 8007746:	6010      	str	r0, [r2, #0]
 8007748:	7019      	strb	r1, [r3, #0]
 800774a:	4608      	mov	r0, r1
 800774c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007750:	4770      	bx	lr

08007752 <__sfputs_r>:
 8007752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007754:	4606      	mov	r6, r0
 8007756:	460f      	mov	r7, r1
 8007758:	4614      	mov	r4, r2
 800775a:	18d5      	adds	r5, r2, r3
 800775c:	42ac      	cmp	r4, r5
 800775e:	d101      	bne.n	8007764 <__sfputs_r+0x12>
 8007760:	2000      	movs	r0, #0
 8007762:	e007      	b.n	8007774 <__sfputs_r+0x22>
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	463a      	mov	r2, r7
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ffda 	bl	8007724 <__sfputc_r>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d1f3      	bne.n	800775c <__sfputs_r+0xa>
 8007774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007778 <_vfiprintf_r>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	460d      	mov	r5, r1
 800777e:	b09d      	sub	sp, #116	@ 0x74
 8007780:	4614      	mov	r4, r2
 8007782:	4698      	mov	r8, r3
 8007784:	4606      	mov	r6, r0
 8007786:	b118      	cbz	r0, 8007790 <_vfiprintf_r+0x18>
 8007788:	6a03      	ldr	r3, [r0, #32]
 800778a:	b90b      	cbnz	r3, 8007790 <_vfiprintf_r+0x18>
 800778c:	f7ff fcd8 	bl	8007140 <__sinit>
 8007790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007792:	07d9      	lsls	r1, r3, #31
 8007794:	d405      	bmi.n	80077a2 <_vfiprintf_r+0x2a>
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	059a      	lsls	r2, r3, #22
 800779a:	d402      	bmi.n	80077a2 <_vfiprintf_r+0x2a>
 800779c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800779e:	f7ff fec6 	bl	800752e <__retarget_lock_acquire_recursive>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	071b      	lsls	r3, r3, #28
 80077a6:	d501      	bpl.n	80077ac <_vfiprintf_r+0x34>
 80077a8:	692b      	ldr	r3, [r5, #16]
 80077aa:	b99b      	cbnz	r3, 80077d4 <_vfiprintf_r+0x5c>
 80077ac:	4629      	mov	r1, r5
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff fdee 	bl	8007390 <__swsetup_r>
 80077b4:	b170      	cbz	r0, 80077d4 <_vfiprintf_r+0x5c>
 80077b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077b8:	07dc      	lsls	r4, r3, #31
 80077ba:	d504      	bpl.n	80077c6 <_vfiprintf_r+0x4e>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	b01d      	add	sp, #116	@ 0x74
 80077c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	0598      	lsls	r0, r3, #22
 80077ca:	d4f7      	bmi.n	80077bc <_vfiprintf_r+0x44>
 80077cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077ce:	f7ff feaf 	bl	8007530 <__retarget_lock_release_recursive>
 80077d2:	e7f3      	b.n	80077bc <_vfiprintf_r+0x44>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d8:	2320      	movs	r3, #32
 80077da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077de:	f8cd 800c 	str.w	r8, [sp, #12]
 80077e2:	2330      	movs	r3, #48	@ 0x30
 80077e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007994 <_vfiprintf_r+0x21c>
 80077e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077ec:	f04f 0901 	mov.w	r9, #1
 80077f0:	4623      	mov	r3, r4
 80077f2:	469a      	mov	sl, r3
 80077f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f8:	b10a      	cbz	r2, 80077fe <_vfiprintf_r+0x86>
 80077fa:	2a25      	cmp	r2, #37	@ 0x25
 80077fc:	d1f9      	bne.n	80077f2 <_vfiprintf_r+0x7a>
 80077fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007802:	d00b      	beq.n	800781c <_vfiprintf_r+0xa4>
 8007804:	465b      	mov	r3, fp
 8007806:	4622      	mov	r2, r4
 8007808:	4629      	mov	r1, r5
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff ffa1 	bl	8007752 <__sfputs_r>
 8007810:	3001      	adds	r0, #1
 8007812:	f000 80a7 	beq.w	8007964 <_vfiprintf_r+0x1ec>
 8007816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007818:	445a      	add	r2, fp
 800781a:	9209      	str	r2, [sp, #36]	@ 0x24
 800781c:	f89a 3000 	ldrb.w	r3, [sl]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 809f 	beq.w	8007964 <_vfiprintf_r+0x1ec>
 8007826:	2300      	movs	r3, #0
 8007828:	f04f 32ff 	mov.w	r2, #4294967295
 800782c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007830:	f10a 0a01 	add.w	sl, sl, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800783c:	931a      	str	r3, [sp, #104]	@ 0x68
 800783e:	4654      	mov	r4, sl
 8007840:	2205      	movs	r2, #5
 8007842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007846:	4853      	ldr	r0, [pc, #332]	@ (8007994 <_vfiprintf_r+0x21c>)
 8007848:	f7f8 fcda 	bl	8000200 <memchr>
 800784c:	9a04      	ldr	r2, [sp, #16]
 800784e:	b9d8      	cbnz	r0, 8007888 <_vfiprintf_r+0x110>
 8007850:	06d1      	lsls	r1, r2, #27
 8007852:	bf44      	itt	mi
 8007854:	2320      	movmi	r3, #32
 8007856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800785a:	0713      	lsls	r3, r2, #28
 800785c:	bf44      	itt	mi
 800785e:	232b      	movmi	r3, #43	@ 0x2b
 8007860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007864:	f89a 3000 	ldrb.w	r3, [sl]
 8007868:	2b2a      	cmp	r3, #42	@ 0x2a
 800786a:	d015      	beq.n	8007898 <_vfiprintf_r+0x120>
 800786c:	9a07      	ldr	r2, [sp, #28]
 800786e:	4654      	mov	r4, sl
 8007870:	2000      	movs	r0, #0
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4621      	mov	r1, r4
 8007878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800787c:	3b30      	subs	r3, #48	@ 0x30
 800787e:	2b09      	cmp	r3, #9
 8007880:	d94b      	bls.n	800791a <_vfiprintf_r+0x1a2>
 8007882:	b1b0      	cbz	r0, 80078b2 <_vfiprintf_r+0x13a>
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	e014      	b.n	80078b2 <_vfiprintf_r+0x13a>
 8007888:	eba0 0308 	sub.w	r3, r0, r8
 800788c:	fa09 f303 	lsl.w	r3, r9, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	46a2      	mov	sl, r4
 8007896:	e7d2      	b.n	800783e <_vfiprintf_r+0xc6>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	1d19      	adds	r1, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfbb      	ittet	lt
 80078a4:	425b      	neglt	r3, r3
 80078a6:	f042 0202 	orrlt.w	r2, r2, #2
 80078aa:	9307      	strge	r3, [sp, #28]
 80078ac:	9307      	strlt	r3, [sp, #28]
 80078ae:	bfb8      	it	lt
 80078b0:	9204      	strlt	r2, [sp, #16]
 80078b2:	7823      	ldrb	r3, [r4, #0]
 80078b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80078b6:	d10a      	bne.n	80078ce <_vfiprintf_r+0x156>
 80078b8:	7863      	ldrb	r3, [r4, #1]
 80078ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80078bc:	d132      	bne.n	8007924 <_vfiprintf_r+0x1ac>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9203      	str	r2, [sp, #12]
 80078c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078ca:	3402      	adds	r4, #2
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80079a4 <_vfiprintf_r+0x22c>
 80078d2:	7821      	ldrb	r1, [r4, #0]
 80078d4:	2203      	movs	r2, #3
 80078d6:	4650      	mov	r0, sl
 80078d8:	f7f8 fc92 	bl	8000200 <memchr>
 80078dc:	b138      	cbz	r0, 80078ee <_vfiprintf_r+0x176>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	eba0 000a 	sub.w	r0, r0, sl
 80078e4:	2240      	movs	r2, #64	@ 0x40
 80078e6:	4082      	lsls	r2, r0
 80078e8:	4313      	orrs	r3, r2
 80078ea:	3401      	adds	r4, #1
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f2:	4829      	ldr	r0, [pc, #164]	@ (8007998 <_vfiprintf_r+0x220>)
 80078f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078f8:	2206      	movs	r2, #6
 80078fa:	f7f8 fc81 	bl	8000200 <memchr>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d03f      	beq.n	8007982 <_vfiprintf_r+0x20a>
 8007902:	4b26      	ldr	r3, [pc, #152]	@ (800799c <_vfiprintf_r+0x224>)
 8007904:	bb1b      	cbnz	r3, 800794e <_vfiprintf_r+0x1d6>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	3307      	adds	r3, #7
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	3308      	adds	r3, #8
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	443b      	add	r3, r7
 8007916:	9309      	str	r3, [sp, #36]	@ 0x24
 8007918:	e76a      	b.n	80077f0 <_vfiprintf_r+0x78>
 800791a:	fb0c 3202 	mla	r2, ip, r2, r3
 800791e:	460c      	mov	r4, r1
 8007920:	2001      	movs	r0, #1
 8007922:	e7a8      	b.n	8007876 <_vfiprintf_r+0xfe>
 8007924:	2300      	movs	r3, #0
 8007926:	3401      	adds	r4, #1
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	4619      	mov	r1, r3
 800792c:	f04f 0c0a 	mov.w	ip, #10
 8007930:	4620      	mov	r0, r4
 8007932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007936:	3a30      	subs	r2, #48	@ 0x30
 8007938:	2a09      	cmp	r2, #9
 800793a:	d903      	bls.n	8007944 <_vfiprintf_r+0x1cc>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0c6      	beq.n	80078ce <_vfiprintf_r+0x156>
 8007940:	9105      	str	r1, [sp, #20]
 8007942:	e7c4      	b.n	80078ce <_vfiprintf_r+0x156>
 8007944:	fb0c 2101 	mla	r1, ip, r1, r2
 8007948:	4604      	mov	r4, r0
 800794a:	2301      	movs	r3, #1
 800794c:	e7f0      	b.n	8007930 <_vfiprintf_r+0x1b8>
 800794e:	ab03      	add	r3, sp, #12
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	462a      	mov	r2, r5
 8007954:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <_vfiprintf_r+0x228>)
 8007956:	a904      	add	r1, sp, #16
 8007958:	4630      	mov	r0, r6
 800795a:	f3af 8000 	nop.w
 800795e:	4607      	mov	r7, r0
 8007960:	1c78      	adds	r0, r7, #1
 8007962:	d1d6      	bne.n	8007912 <_vfiprintf_r+0x19a>
 8007964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007966:	07d9      	lsls	r1, r3, #31
 8007968:	d405      	bmi.n	8007976 <_vfiprintf_r+0x1fe>
 800796a:	89ab      	ldrh	r3, [r5, #12]
 800796c:	059a      	lsls	r2, r3, #22
 800796e:	d402      	bmi.n	8007976 <_vfiprintf_r+0x1fe>
 8007970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007972:	f7ff fddd 	bl	8007530 <__retarget_lock_release_recursive>
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	065b      	lsls	r3, r3, #25
 800797a:	f53f af1f 	bmi.w	80077bc <_vfiprintf_r+0x44>
 800797e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007980:	e71e      	b.n	80077c0 <_vfiprintf_r+0x48>
 8007982:	ab03      	add	r3, sp, #12
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	462a      	mov	r2, r5
 8007988:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <_vfiprintf_r+0x228>)
 800798a:	a904      	add	r1, sp, #16
 800798c:	4630      	mov	r0, r6
 800798e:	f000 f879 	bl	8007a84 <_printf_i>
 8007992:	e7e4      	b.n	800795e <_vfiprintf_r+0x1e6>
 8007994:	0800929e 	.word	0x0800929e
 8007998:	080092a8 	.word	0x080092a8
 800799c:	00000000 	.word	0x00000000
 80079a0:	08007753 	.word	0x08007753
 80079a4:	080092a4 	.word	0x080092a4

080079a8 <_printf_common>:
 80079a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ac:	4616      	mov	r6, r2
 80079ae:	4698      	mov	r8, r3
 80079b0:	688a      	ldr	r2, [r1, #8]
 80079b2:	690b      	ldr	r3, [r1, #16]
 80079b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	bfb8      	it	lt
 80079bc:	4613      	movlt	r3, r2
 80079be:	6033      	str	r3, [r6, #0]
 80079c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079c4:	4607      	mov	r7, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b10a      	cbz	r2, 80079ce <_printf_common+0x26>
 80079ca:	3301      	adds	r3, #1
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	0699      	lsls	r1, r3, #26
 80079d2:	bf42      	ittt	mi
 80079d4:	6833      	ldrmi	r3, [r6, #0]
 80079d6:	3302      	addmi	r3, #2
 80079d8:	6033      	strmi	r3, [r6, #0]
 80079da:	6825      	ldr	r5, [r4, #0]
 80079dc:	f015 0506 	ands.w	r5, r5, #6
 80079e0:	d106      	bne.n	80079f0 <_printf_common+0x48>
 80079e2:	f104 0a19 	add.w	sl, r4, #25
 80079e6:	68e3      	ldr	r3, [r4, #12]
 80079e8:	6832      	ldr	r2, [r6, #0]
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	dc26      	bgt.n	8007a3e <_printf_common+0x96>
 80079f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079f4:	6822      	ldr	r2, [r4, #0]
 80079f6:	3b00      	subs	r3, #0
 80079f8:	bf18      	it	ne
 80079fa:	2301      	movne	r3, #1
 80079fc:	0692      	lsls	r2, r2, #26
 80079fe:	d42b      	bmi.n	8007a58 <_printf_common+0xb0>
 8007a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a04:	4641      	mov	r1, r8
 8007a06:	4638      	mov	r0, r7
 8007a08:	47c8      	blx	r9
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d01e      	beq.n	8007a4c <_printf_common+0xa4>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	6922      	ldr	r2, [r4, #16]
 8007a12:	f003 0306 	and.w	r3, r3, #6
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	bf02      	ittt	eq
 8007a1a:	68e5      	ldreq	r5, [r4, #12]
 8007a1c:	6833      	ldreq	r3, [r6, #0]
 8007a1e:	1aed      	subeq	r5, r5, r3
 8007a20:	68a3      	ldr	r3, [r4, #8]
 8007a22:	bf0c      	ite	eq
 8007a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a28:	2500      	movne	r5, #0
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	bfc4      	itt	gt
 8007a2e:	1a9b      	subgt	r3, r3, r2
 8007a30:	18ed      	addgt	r5, r5, r3
 8007a32:	2600      	movs	r6, #0
 8007a34:	341a      	adds	r4, #26
 8007a36:	42b5      	cmp	r5, r6
 8007a38:	d11a      	bne.n	8007a70 <_printf_common+0xc8>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e008      	b.n	8007a50 <_printf_common+0xa8>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4652      	mov	r2, sl
 8007a42:	4641      	mov	r1, r8
 8007a44:	4638      	mov	r0, r7
 8007a46:	47c8      	blx	r9
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d103      	bne.n	8007a54 <_printf_common+0xac>
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a54:	3501      	adds	r5, #1
 8007a56:	e7c6      	b.n	80079e6 <_printf_common+0x3e>
 8007a58:	18e1      	adds	r1, r4, r3
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	2030      	movs	r0, #48	@ 0x30
 8007a5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a62:	4422      	add	r2, r4
 8007a64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	e7c7      	b.n	8007a00 <_printf_common+0x58>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4622      	mov	r2, r4
 8007a74:	4641      	mov	r1, r8
 8007a76:	4638      	mov	r0, r7
 8007a78:	47c8      	blx	r9
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d0e6      	beq.n	8007a4c <_printf_common+0xa4>
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7d9      	b.n	8007a36 <_printf_common+0x8e>
	...

08007a84 <_printf_i>:
 8007a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a88:	7e0f      	ldrb	r7, [r1, #24]
 8007a8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a8c:	2f78      	cmp	r7, #120	@ 0x78
 8007a8e:	4691      	mov	r9, r2
 8007a90:	4680      	mov	r8, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	469a      	mov	sl, r3
 8007a96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a9a:	d807      	bhi.n	8007aac <_printf_i+0x28>
 8007a9c:	2f62      	cmp	r7, #98	@ 0x62
 8007a9e:	d80a      	bhi.n	8007ab6 <_printf_i+0x32>
 8007aa0:	2f00      	cmp	r7, #0
 8007aa2:	f000 80d2 	beq.w	8007c4a <_printf_i+0x1c6>
 8007aa6:	2f58      	cmp	r7, #88	@ 0x58
 8007aa8:	f000 80b9 	beq.w	8007c1e <_printf_i+0x19a>
 8007aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ab4:	e03a      	b.n	8007b2c <_printf_i+0xa8>
 8007ab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aba:	2b15      	cmp	r3, #21
 8007abc:	d8f6      	bhi.n	8007aac <_printf_i+0x28>
 8007abe:	a101      	add	r1, pc, #4	@ (adr r1, 8007ac4 <_printf_i+0x40>)
 8007ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ac4:	08007b1d 	.word	0x08007b1d
 8007ac8:	08007b31 	.word	0x08007b31
 8007acc:	08007aad 	.word	0x08007aad
 8007ad0:	08007aad 	.word	0x08007aad
 8007ad4:	08007aad 	.word	0x08007aad
 8007ad8:	08007aad 	.word	0x08007aad
 8007adc:	08007b31 	.word	0x08007b31
 8007ae0:	08007aad 	.word	0x08007aad
 8007ae4:	08007aad 	.word	0x08007aad
 8007ae8:	08007aad 	.word	0x08007aad
 8007aec:	08007aad 	.word	0x08007aad
 8007af0:	08007c31 	.word	0x08007c31
 8007af4:	08007b5b 	.word	0x08007b5b
 8007af8:	08007beb 	.word	0x08007beb
 8007afc:	08007aad 	.word	0x08007aad
 8007b00:	08007aad 	.word	0x08007aad
 8007b04:	08007c53 	.word	0x08007c53
 8007b08:	08007aad 	.word	0x08007aad
 8007b0c:	08007b5b 	.word	0x08007b5b
 8007b10:	08007aad 	.word	0x08007aad
 8007b14:	08007aad 	.word	0x08007aad
 8007b18:	08007bf3 	.word	0x08007bf3
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6032      	str	r2, [r6, #0]
 8007b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e09d      	b.n	8007c6c <_printf_i+0x1e8>
 8007b30:	6833      	ldr	r3, [r6, #0]
 8007b32:	6820      	ldr	r0, [r4, #0]
 8007b34:	1d19      	adds	r1, r3, #4
 8007b36:	6031      	str	r1, [r6, #0]
 8007b38:	0606      	lsls	r6, r0, #24
 8007b3a:	d501      	bpl.n	8007b40 <_printf_i+0xbc>
 8007b3c:	681d      	ldr	r5, [r3, #0]
 8007b3e:	e003      	b.n	8007b48 <_printf_i+0xc4>
 8007b40:	0645      	lsls	r5, r0, #25
 8007b42:	d5fb      	bpl.n	8007b3c <_printf_i+0xb8>
 8007b44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	da03      	bge.n	8007b54 <_printf_i+0xd0>
 8007b4c:	232d      	movs	r3, #45	@ 0x2d
 8007b4e:	426d      	negs	r5, r5
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b54:	4859      	ldr	r0, [pc, #356]	@ (8007cbc <_printf_i+0x238>)
 8007b56:	230a      	movs	r3, #10
 8007b58:	e011      	b.n	8007b7e <_printf_i+0xfa>
 8007b5a:	6821      	ldr	r1, [r4, #0]
 8007b5c:	6833      	ldr	r3, [r6, #0]
 8007b5e:	0608      	lsls	r0, r1, #24
 8007b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b64:	d402      	bmi.n	8007b6c <_printf_i+0xe8>
 8007b66:	0649      	lsls	r1, r1, #25
 8007b68:	bf48      	it	mi
 8007b6a:	b2ad      	uxthmi	r5, r5
 8007b6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b6e:	4853      	ldr	r0, [pc, #332]	@ (8007cbc <_printf_i+0x238>)
 8007b70:	6033      	str	r3, [r6, #0]
 8007b72:	bf14      	ite	ne
 8007b74:	230a      	movne	r3, #10
 8007b76:	2308      	moveq	r3, #8
 8007b78:	2100      	movs	r1, #0
 8007b7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b7e:	6866      	ldr	r6, [r4, #4]
 8007b80:	60a6      	str	r6, [r4, #8]
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	bfa2      	ittt	ge
 8007b86:	6821      	ldrge	r1, [r4, #0]
 8007b88:	f021 0104 	bicge.w	r1, r1, #4
 8007b8c:	6021      	strge	r1, [r4, #0]
 8007b8e:	b90d      	cbnz	r5, 8007b94 <_printf_i+0x110>
 8007b90:	2e00      	cmp	r6, #0
 8007b92:	d04b      	beq.n	8007c2c <_printf_i+0x1a8>
 8007b94:	4616      	mov	r6, r2
 8007b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b9e:	5dc7      	ldrb	r7, [r0, r7]
 8007ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ba4:	462f      	mov	r7, r5
 8007ba6:	42bb      	cmp	r3, r7
 8007ba8:	460d      	mov	r5, r1
 8007baa:	d9f4      	bls.n	8007b96 <_printf_i+0x112>
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d10b      	bne.n	8007bc8 <_printf_i+0x144>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	07df      	lsls	r7, r3, #31
 8007bb4:	d508      	bpl.n	8007bc8 <_printf_i+0x144>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	6861      	ldr	r1, [r4, #4]
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	bfde      	ittt	le
 8007bbe:	2330      	movle	r3, #48	@ 0x30
 8007bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bc8:	1b92      	subs	r2, r2, r6
 8007bca:	6122      	str	r2, [r4, #16]
 8007bcc:	f8cd a000 	str.w	sl, [sp]
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	aa03      	add	r2, sp, #12
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	f7ff fee6 	bl	80079a8 <_printf_common>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d14a      	bne.n	8007c76 <_printf_i+0x1f2>
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	b004      	add	sp, #16
 8007be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f043 0320 	orr.w	r3, r3, #32
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	4833      	ldr	r0, [pc, #204]	@ (8007cc0 <_printf_i+0x23c>)
 8007bf4:	2778      	movs	r7, #120	@ 0x78
 8007bf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	6831      	ldr	r1, [r6, #0]
 8007bfe:	061f      	lsls	r7, r3, #24
 8007c00:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c04:	d402      	bmi.n	8007c0c <_printf_i+0x188>
 8007c06:	065f      	lsls	r7, r3, #25
 8007c08:	bf48      	it	mi
 8007c0a:	b2ad      	uxthmi	r5, r5
 8007c0c:	6031      	str	r1, [r6, #0]
 8007c0e:	07d9      	lsls	r1, r3, #31
 8007c10:	bf44      	itt	mi
 8007c12:	f043 0320 	orrmi.w	r3, r3, #32
 8007c16:	6023      	strmi	r3, [r4, #0]
 8007c18:	b11d      	cbz	r5, 8007c22 <_printf_i+0x19e>
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	e7ac      	b.n	8007b78 <_printf_i+0xf4>
 8007c1e:	4827      	ldr	r0, [pc, #156]	@ (8007cbc <_printf_i+0x238>)
 8007c20:	e7e9      	b.n	8007bf6 <_printf_i+0x172>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f023 0320 	bic.w	r3, r3, #32
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	e7f6      	b.n	8007c1a <_printf_i+0x196>
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	e7bd      	b.n	8007bac <_printf_i+0x128>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	6825      	ldr	r5, [r4, #0]
 8007c34:	6961      	ldr	r1, [r4, #20]
 8007c36:	1d18      	adds	r0, r3, #4
 8007c38:	6030      	str	r0, [r6, #0]
 8007c3a:	062e      	lsls	r6, r5, #24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	d501      	bpl.n	8007c44 <_printf_i+0x1c0>
 8007c40:	6019      	str	r1, [r3, #0]
 8007c42:	e002      	b.n	8007c4a <_printf_i+0x1c6>
 8007c44:	0668      	lsls	r0, r5, #25
 8007c46:	d5fb      	bpl.n	8007c40 <_printf_i+0x1bc>
 8007c48:	8019      	strh	r1, [r3, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	4616      	mov	r6, r2
 8007c50:	e7bc      	b.n	8007bcc <_printf_i+0x148>
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	6032      	str	r2, [r6, #0]
 8007c58:	681e      	ldr	r6, [r3, #0]
 8007c5a:	6862      	ldr	r2, [r4, #4]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7f8 face 	bl	8000200 <memchr>
 8007c64:	b108      	cbz	r0, 8007c6a <_printf_i+0x1e6>
 8007c66:	1b80      	subs	r0, r0, r6
 8007c68:	6060      	str	r0, [r4, #4]
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c74:	e7aa      	b.n	8007bcc <_printf_i+0x148>
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	47d0      	blx	sl
 8007c80:	3001      	adds	r0, #1
 8007c82:	d0ad      	beq.n	8007be0 <_printf_i+0x15c>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	079b      	lsls	r3, r3, #30
 8007c88:	d413      	bmi.n	8007cb2 <_printf_i+0x22e>
 8007c8a:	68e0      	ldr	r0, [r4, #12]
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	4298      	cmp	r0, r3
 8007c90:	bfb8      	it	lt
 8007c92:	4618      	movlt	r0, r3
 8007c94:	e7a6      	b.n	8007be4 <_printf_i+0x160>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4632      	mov	r2, r6
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	47d0      	blx	sl
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d09d      	beq.n	8007be0 <_printf_i+0x15c>
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	9903      	ldr	r1, [sp, #12]
 8007caa:	1a5b      	subs	r3, r3, r1
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	dcf2      	bgt.n	8007c96 <_printf_i+0x212>
 8007cb0:	e7eb      	b.n	8007c8a <_printf_i+0x206>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	f104 0619 	add.w	r6, r4, #25
 8007cb8:	e7f5      	b.n	8007ca6 <_printf_i+0x222>
 8007cba:	bf00      	nop
 8007cbc:	080092af 	.word	0x080092af
 8007cc0:	080092c0 	.word	0x080092c0

08007cc4 <__sflush_r>:
 8007cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ccc:	0716      	lsls	r6, r2, #28
 8007cce:	4605      	mov	r5, r0
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	d454      	bmi.n	8007d7e <__sflush_r+0xba>
 8007cd4:	684b      	ldr	r3, [r1, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	dc02      	bgt.n	8007ce0 <__sflush_r+0x1c>
 8007cda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dd48      	ble.n	8007d72 <__sflush_r+0xae>
 8007ce0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	d045      	beq.n	8007d72 <__sflush_r+0xae>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cec:	682f      	ldr	r7, [r5, #0]
 8007cee:	6a21      	ldr	r1, [r4, #32]
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	d030      	beq.n	8007d56 <__sflush_r+0x92>
 8007cf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	0759      	lsls	r1, r3, #29
 8007cfa:	d505      	bpl.n	8007d08 <__sflush_r+0x44>
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d02:	b10b      	cbz	r3, 8007d08 <__sflush_r+0x44>
 8007d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b0      	blx	r6
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	d106      	bne.n	8007d26 <__sflush_r+0x62>
 8007d18:	6829      	ldr	r1, [r5, #0]
 8007d1a:	291d      	cmp	r1, #29
 8007d1c:	d82b      	bhi.n	8007d76 <__sflush_r+0xb2>
 8007d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc8 <__sflush_r+0x104>)
 8007d20:	410a      	asrs	r2, r1
 8007d22:	07d6      	lsls	r6, r2, #31
 8007d24:	d427      	bmi.n	8007d76 <__sflush_r+0xb2>
 8007d26:	2200      	movs	r2, #0
 8007d28:	6062      	str	r2, [r4, #4]
 8007d2a:	04d9      	lsls	r1, r3, #19
 8007d2c:	6922      	ldr	r2, [r4, #16]
 8007d2e:	6022      	str	r2, [r4, #0]
 8007d30:	d504      	bpl.n	8007d3c <__sflush_r+0x78>
 8007d32:	1c42      	adds	r2, r0, #1
 8007d34:	d101      	bne.n	8007d3a <__sflush_r+0x76>
 8007d36:	682b      	ldr	r3, [r5, #0]
 8007d38:	b903      	cbnz	r3, 8007d3c <__sflush_r+0x78>
 8007d3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d3e:	602f      	str	r7, [r5, #0]
 8007d40:	b1b9      	cbz	r1, 8007d72 <__sflush_r+0xae>
 8007d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d46:	4299      	cmp	r1, r3
 8007d48:	d002      	beq.n	8007d50 <__sflush_r+0x8c>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f7ff fbf2 	bl	8007534 <_free_r>
 8007d50:	2300      	movs	r3, #0
 8007d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d54:	e00d      	b.n	8007d72 <__sflush_r+0xae>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b0      	blx	r6
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	1c50      	adds	r0, r2, #1
 8007d60:	d1c9      	bne.n	8007cf6 <__sflush_r+0x32>
 8007d62:	682b      	ldr	r3, [r5, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0c6      	beq.n	8007cf6 <__sflush_r+0x32>
 8007d68:	2b1d      	cmp	r3, #29
 8007d6a:	d001      	beq.n	8007d70 <__sflush_r+0xac>
 8007d6c:	2b16      	cmp	r3, #22
 8007d6e:	d11e      	bne.n	8007dae <__sflush_r+0xea>
 8007d70:	602f      	str	r7, [r5, #0]
 8007d72:	2000      	movs	r0, #0
 8007d74:	e022      	b.n	8007dbc <__sflush_r+0xf8>
 8007d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d7a:	b21b      	sxth	r3, r3
 8007d7c:	e01b      	b.n	8007db6 <__sflush_r+0xf2>
 8007d7e:	690f      	ldr	r7, [r1, #16]
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	d0f6      	beq.n	8007d72 <__sflush_r+0xae>
 8007d84:	0793      	lsls	r3, r2, #30
 8007d86:	680e      	ldr	r6, [r1, #0]
 8007d88:	bf08      	it	eq
 8007d8a:	694b      	ldreq	r3, [r1, #20]
 8007d8c:	600f      	str	r7, [r1, #0]
 8007d8e:	bf18      	it	ne
 8007d90:	2300      	movne	r3, #0
 8007d92:	eba6 0807 	sub.w	r8, r6, r7
 8007d96:	608b      	str	r3, [r1, #8]
 8007d98:	f1b8 0f00 	cmp.w	r8, #0
 8007d9c:	dde9      	ble.n	8007d72 <__sflush_r+0xae>
 8007d9e:	6a21      	ldr	r1, [r4, #32]
 8007da0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007da2:	4643      	mov	r3, r8
 8007da4:	463a      	mov	r2, r7
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b0      	blx	r6
 8007daa:	2800      	cmp	r0, #0
 8007dac:	dc08      	bgt.n	8007dc0 <__sflush_r+0xfc>
 8007dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc0:	4407      	add	r7, r0
 8007dc2:	eba8 0800 	sub.w	r8, r8, r0
 8007dc6:	e7e7      	b.n	8007d98 <__sflush_r+0xd4>
 8007dc8:	dfbffffe 	.word	0xdfbffffe

08007dcc <_fflush_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	690b      	ldr	r3, [r1, #16]
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	b913      	cbnz	r3, 8007ddc <_fflush_r+0x10>
 8007dd6:	2500      	movs	r5, #0
 8007dd8:	4628      	mov	r0, r5
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	b118      	cbz	r0, 8007de6 <_fflush_r+0x1a>
 8007dde:	6a03      	ldr	r3, [r0, #32]
 8007de0:	b90b      	cbnz	r3, 8007de6 <_fflush_r+0x1a>
 8007de2:	f7ff f9ad 	bl	8007140 <__sinit>
 8007de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f3      	beq.n	8007dd6 <_fflush_r+0xa>
 8007dee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007df0:	07d0      	lsls	r0, r2, #31
 8007df2:	d404      	bmi.n	8007dfe <_fflush_r+0x32>
 8007df4:	0599      	lsls	r1, r3, #22
 8007df6:	d402      	bmi.n	8007dfe <_fflush_r+0x32>
 8007df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dfa:	f7ff fb98 	bl	800752e <__retarget_lock_acquire_recursive>
 8007dfe:	4628      	mov	r0, r5
 8007e00:	4621      	mov	r1, r4
 8007e02:	f7ff ff5f 	bl	8007cc4 <__sflush_r>
 8007e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e08:	07da      	lsls	r2, r3, #31
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	d4e4      	bmi.n	8007dd8 <_fflush_r+0xc>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	059b      	lsls	r3, r3, #22
 8007e12:	d4e1      	bmi.n	8007dd8 <_fflush_r+0xc>
 8007e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e16:	f7ff fb8b 	bl	8007530 <__retarget_lock_release_recursive>
 8007e1a:	e7dd      	b.n	8007dd8 <_fflush_r+0xc>

08007e1c <__swhatbuf_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	460c      	mov	r4, r1
 8007e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	b096      	sub	sp, #88	@ 0x58
 8007e28:	4615      	mov	r5, r2
 8007e2a:	461e      	mov	r6, r3
 8007e2c:	da0d      	bge.n	8007e4a <__swhatbuf_r+0x2e>
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e34:	f04f 0100 	mov.w	r1, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2340      	movne	r3, #64	@ 0x40
 8007e3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e40:	2000      	movs	r0, #0
 8007e42:	6031      	str	r1, [r6, #0]
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	b016      	add	sp, #88	@ 0x58
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	466a      	mov	r2, sp
 8007e4c:	f000 f848 	bl	8007ee0 <_fstat_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dbec      	blt.n	8007e2e <__swhatbuf_r+0x12>
 8007e54:	9901      	ldr	r1, [sp, #4]
 8007e56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e5e:	4259      	negs	r1, r3
 8007e60:	4159      	adcs	r1, r3
 8007e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e66:	e7eb      	b.n	8007e40 <__swhatbuf_r+0x24>

08007e68 <__smakebuf_r>:
 8007e68:	898b      	ldrh	r3, [r1, #12]
 8007e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e6c:	079d      	lsls	r5, r3, #30
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460c      	mov	r4, r1
 8007e72:	d507      	bpl.n	8007e84 <__smakebuf_r+0x1c>
 8007e74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	6123      	str	r3, [r4, #16]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	6163      	str	r3, [r4, #20]
 8007e80:	b003      	add	sp, #12
 8007e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e84:	ab01      	add	r3, sp, #4
 8007e86:	466a      	mov	r2, sp
 8007e88:	f7ff ffc8 	bl	8007e1c <__swhatbuf_r>
 8007e8c:	9f00      	ldr	r7, [sp, #0]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	4639      	mov	r1, r7
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff fbba 	bl	800760c <_malloc_r>
 8007e98:	b948      	cbnz	r0, 8007eae <__smakebuf_r+0x46>
 8007e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9e:	059a      	lsls	r2, r3, #22
 8007ea0:	d4ee      	bmi.n	8007e80 <__smakebuf_r+0x18>
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	e7e2      	b.n	8007e74 <__smakebuf_r+0xc>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	6020      	str	r0, [r4, #0]
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ebe:	b15b      	cbz	r3, 8007ed8 <__smakebuf_r+0x70>
 8007ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 f81d 	bl	8007f04 <_isatty_r>
 8007eca:	b128      	cbz	r0, 8007ed8 <__smakebuf_r+0x70>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	431d      	orrs	r5, r3
 8007edc:	81a5      	strh	r5, [r4, #12]
 8007ede:	e7cf      	b.n	8007e80 <__smakebuf_r+0x18>

08007ee0 <_fstat_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	@ (8007f00 <_fstat_r+0x20>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f7fe ff1a 	bl	8006d26 <_fstat>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d102      	bne.n	8007efc <_fstat_r+0x1c>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b103      	cbz	r3, 8007efc <_fstat_r+0x1c>
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	20025e98 	.word	0x20025e98

08007f04 <_isatty_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d06      	ldr	r5, [pc, #24]	@ (8007f20 <_isatty_r+0x1c>)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7ff f86c 	bl	8006fec <_isatty>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_isatty_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_isatty_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20025e98 	.word	0x20025e98

08007f24 <_sbrk_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	@ (8007f40 <_sbrk_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7fb f904 	bl	800313c <_sbrk>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_sbrk_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_sbrk_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20025e98 	.word	0x20025e98

08007f44 <_init>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr

08007f50 <_fini>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr
