
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  08009180  08009180  0000a180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c0  0800a5c0  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c0  0800a5c0  0000b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c8  0800a5c8  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c8  0800a5c8  0000b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5cc  0800a5cc  0000b5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a5d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00025e30  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025eb0  20025eb0  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eb8  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034b5  00000000  00000000  00020f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00024420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdd  00000000  00000000  00025898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e53  00000000  00000000  00026875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a81d  00000000  00000000  0004d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1548  00000000  00000000  00067ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014942d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f24  00000000  00000000  00149470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0014f394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009168 	.word	0x08009168

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08009168 	.word	0x08009168

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
extern void initialise_monitor_handles(void); 

static bool Drop_Coin = 0;

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f007 feee 	bl	8008374 <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f001 ffa8 	bl	80024ec <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f001 ff65 	bl	800246c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a6:	2000      	movs	r0, #0
 80005a8:	f002 f8be 	bl	8002728 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ac:	f002 f9ae 	bl	800290c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <ApplicationInit+0x44>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
	
	greenLEDInit();
 80005b6:	f000 f815 	bl	80005e4 <greenLEDInit>
	turnOffGreenLED();
 80005ba:	f000 f821 	bl	8000600 <turnOffGreenLED>
	redLEDInit();
 80005be:	f000 f818 	bl	80005f2 <redLEDInit>
	turnOffRedLED();
 80005c2:	f000 f824 	bl	800060e <turnOffRedLED>
	ButtonInit();
 80005c6:	f000 f807 	bl	80005d8 <ButtonInit>
	addSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f002 fa58 	bl	8002a80 <addSchedulerEvent>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <ButtonInit>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void ButtonInit(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	Button_Init();
 80005dc:	f001 fe28 	bl	8002230 <Button_Init>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <greenLEDInit>:

void greenLEDInit(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	LED_Init(GREEN_LED);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f002 f9ef 	bl	80029cc <LED_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <redLEDInit>:

void redLEDInit(){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	LED_Init(RED_LED);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f002 f9e8 	bl	80029cc <LED_Init>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <turnOffGreenLED>:

void turnOnRedLED(){
	TurnOnLED(RED_LED);
}

void turnOffGreenLED(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	TurnOffLED(GREEN_LED);
 8000604:	2001      	movs	r0, #1
 8000606:	f002 fa1b 	bl	8002a40 <TurnOffLED>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}

0800060e <turnOffRedLED>:

void turnOffRedLED(){
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	TurnOffLED(RED_LED);
 8000612:	2000      	movs	r0, #0
 8000614:	f002 fa14 	bl	8002a40 <TurnOffLED>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <Display_Menu_Screen>:

void TimerInit(){

}

void Display_Menu_Screen(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000620:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000624:	2000      	movs	r0, #0
 8000626:	f002 f87f 	bl	8002728 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800062a:	2000      	movs	r0, #0
 800062c:	f002 f89e 	bl	800276c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000630:	4836      	ldr	r0, [pc, #216]	@ (800070c <Display_Menu_Screen+0xf0>)
 8000632:	f002 f8ab 	bl	800278c <LCD_SetFont>

	LCD_DisplayChar(80,10,"W");
 8000636:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <Display_Menu_Screen+0xf4>)
 8000638:	210a      	movs	r1, #10
 800063a:	2050      	movs	r0, #80	@ 0x50
 800063c:	f002 f924 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(92,10,"e");
 8000640:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <Display_Menu_Screen+0xf8>)
 8000642:	210a      	movs	r1, #10
 8000644:	205c      	movs	r0, #92	@ 0x5c
 8000646:	f002 f91f 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(100,10,"l");
 800064a:	4a33      	ldr	r2, [pc, #204]	@ (8000718 <Display_Menu_Screen+0xfc>)
 800064c:	210a      	movs	r1, #10
 800064e:	2064      	movs	r0, #100	@ 0x64
 8000650:	f002 f91a 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(107,10,"c");
 8000654:	4a31      	ldr	r2, [pc, #196]	@ (800071c <Display_Menu_Screen+0x100>)
 8000656:	210a      	movs	r1, #10
 8000658:	206b      	movs	r0, #107	@ 0x6b
 800065a:	f002 f915 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(117,10,"o");
 800065e:	4a30      	ldr	r2, [pc, #192]	@ (8000720 <Display_Menu_Screen+0x104>)
 8000660:	210a      	movs	r1, #10
 8000662:	2075      	movs	r0, #117	@ 0x75
 8000664:	f002 f910 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(133,10,"m");
 8000668:	4a2e      	ldr	r2, [pc, #184]	@ (8000724 <Display_Menu_Screen+0x108>)
 800066a:	210a      	movs	r1, #10
 800066c:	2085      	movs	r0, #133	@ 0x85
 800066e:	f002 f90b 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(148,10,"e");
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <Display_Menu_Screen+0xf8>)
 8000674:	210a      	movs	r1, #10
 8000676:	2094      	movs	r0, #148	@ 0x94
 8000678:	f002 f906 	bl	8002888 <LCD_DisplayChar>
	

	LCD_DisplayChar(45,30,"t");
 800067c:	4a2a      	ldr	r2, [pc, #168]	@ (8000728 <Display_Menu_Screen+0x10c>)
 800067e:	211e      	movs	r1, #30
 8000680:	202d      	movs	r0, #45	@ 0x2d
 8000682:	f002 f901 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(55,30,"o");
 8000686:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <Display_Menu_Screen+0x104>)
 8000688:	211e      	movs	r1, #30
 800068a:	2037      	movs	r0, #55	@ 0x37
 800068c:	f002 f8fc 	bl	8002888 <LCD_DisplayChar>
	
	LCD_DisplayChar(85,30,"C");
 8000690:	4a26      	ldr	r2, [pc, #152]	@ (800072c <Display_Menu_Screen+0x110>)
 8000692:	211e      	movs	r1, #30
 8000694:	2055      	movs	r0, #85	@ 0x55
 8000696:	f002 f8f7 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(100,30,"o");
 800069a:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <Display_Menu_Screen+0x104>)
 800069c:	211e      	movs	r1, #30
 800069e:	2064      	movs	r0, #100	@ 0x64
 80006a0:	f002 f8f2 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(113,30,"n");
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <Display_Menu_Screen+0x114>)
 80006a6:	211e      	movs	r1, #30
 80006a8:	2071      	movs	r0, #113	@ 0x71
 80006aa:	f002 f8ed 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(126,30,"n");
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <Display_Menu_Screen+0x114>)
 80006b0:	211e      	movs	r1, #30
 80006b2:	207e      	movs	r0, #126	@ 0x7e
 80006b4:	f002 f8e8 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(139,30,"e");
 80006b8:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <Display_Menu_Screen+0xf8>)
 80006ba:	211e      	movs	r1, #30
 80006bc:	208b      	movs	r0, #139	@ 0x8b
 80006be:	f002 f8e3 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(151,30,"c");
 80006c2:	4a16      	ldr	r2, [pc, #88]	@ (800071c <Display_Menu_Screen+0x100>)
 80006c4:	211e      	movs	r1, #30
 80006c6:	2097      	movs	r0, #151	@ 0x97
 80006c8:	f002 f8de 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(161,30,"t");
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <Display_Menu_Screen+0x10c>)
 80006ce:	211e      	movs	r1, #30
 80006d0:	20a1      	movs	r0, #161	@ 0xa1
 80006d2:	f002 f8d9 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(181,30,"4");
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <Display_Menu_Screen+0x118>)
 80006d8:	211e      	movs	r1, #30
 80006da:	20b5      	movs	r0, #181	@ 0xb5
 80006dc:	f002 f8d4 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(190,30,"!");
 80006e0:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <Display_Menu_Screen+0x11c>)
 80006e2:	211e      	movs	r1, #30
 80006e4:	20be      	movs	r0, #190	@ 0xbe
 80006e6:	f002 f8cf 	bl	8002888 <LCD_DisplayChar>

	LCD_DisplayChar(60,70,"Select Mode:");
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <Display_Menu_Screen+0x120>)
 80006ec:	2146      	movs	r1, #70	@ 0x46
 80006ee:	203c      	movs	r0, #60	@ 0x3c
 80006f0:	f002 f8ca 	bl	8002888 <LCD_DisplayChar>

	LCD_DisplayChar(15,180,"1-player");
 80006f4:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <Display_Menu_Screen+0x124>)
 80006f6:	21b4      	movs	r1, #180	@ 0xb4
 80006f8:	200f      	movs	r0, #15
 80006fa:	f002 f8c5 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(150,180,"2-player");
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <Display_Menu_Screen+0x128>)
 8000700:	21b4      	movs	r1, #180	@ 0xb4
 8000702:	2096      	movs	r0, #150	@ 0x96
 8000704:	f002 f8c0 	bl	8002888 <LCD_DisplayChar>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000004 	.word	0x20000004
 8000710:	080091a4 	.word	0x080091a4
 8000714:	080091a8 	.word	0x080091a8
 8000718:	080091ac 	.word	0x080091ac
 800071c:	080091b0 	.word	0x080091b0
 8000720:	080091b4 	.word	0x080091b4
 8000724:	080091b8 	.word	0x080091b8
 8000728:	080091bc 	.word	0x080091bc
 800072c:	080091c0 	.word	0x080091c0
 8000730:	080091c4 	.word	0x080091c4
 8000734:	080091c8 	.word	0x080091c8
 8000738:	080091cc 	.word	0x080091cc
 800073c:	080091d0 	.word	0x080091d0
 8000740:	080091e0 	.word	0x080091e0
 8000744:	080091ec 	.word	0x080091ec

08000748 <Display_Board>:

void Display_Board(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	for(int i = 0; i <= NUM_COLS; i++){
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e010      	b.n	8000776 <Display_Board+0x2e>
		LCD_Draw_Vertical_Line(15+30*i, 80, 181, LCD_COLOR_BLACK);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	b29b      	uxth	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	b29b      	uxth	r3, r3
 8000762:	330f      	adds	r3, #15
 8000764:	b298      	uxth	r0, r3
 8000766:	2300      	movs	r3, #0
 8000768:	22b5      	movs	r2, #181	@ 0xb5
 800076a:	2150      	movs	r1, #80	@ 0x50
 800076c:	f001 ff8d 	bl	800268a <LCD_Draw_Vertical_Line>
	for(int i = 0; i <= NUM_COLS; i++){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b07      	cmp	r3, #7
 800077a:	ddeb      	ble.n	8000754 <Display_Board+0xc>
	}

	for(int i = 0; i <= NUM_ROWS; i++){
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	e010      	b.n	80007a4 <Display_Board+0x5c>
		LCD_Draw_Horizontal_Line(15, 80+30*i, 210, LCD_COLOR_BLACK);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b29b      	uxth	r3, r3
 8000790:	3350      	adds	r3, #80	@ 0x50
 8000792:	b299      	uxth	r1, r3
 8000794:	2300      	movs	r3, #0
 8000796:	22d2      	movs	r2, #210	@ 0xd2
 8000798:	200f      	movs	r0, #15
 800079a:	f001 ff9d 	bl	80026d8 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i <= NUM_ROWS; i++){
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	ddeb      	ble.n	8000782 <Display_Board+0x3a>
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Update_Board>:

void Update_Board(int row, int col, int value){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	board[row][col] = value;
 80007c0:	4907      	ldr	r1, [pc, #28]	@ (80007e0 <Update_Board+0x2c>)
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4613      	mov	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	200000a4 	.word	0x200000a4

080007e4 <Display_Coins>:

void Display_Coins(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++){
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e04d      	b.n	800088c <Display_Coins+0xa8>
		for(int j = 0; j < NUM_COLS; j++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e044      	b.n	8000880 <Display_Coins+0x9c>
			if(board[i][j] == 1){
 80007f6:	4929      	ldr	r1, [pc, #164]	@ (800089c <Display_Coins+0xb8>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	4413      	add	r3, r2
 8000804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d115      	bne.n	8000838 <Display_Coins+0x54>
				LCD_Draw_Circle_Fill(30+30*j, 95+30*i, 8, LCD_COLOR_BLUE);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	b298      	uxth	r0, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b29b      	uxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	335f      	adds	r3, #95	@ 0x5f
 800082c:	b299      	uxth	r1, r3
 800082e:	231f      	movs	r3, #31
 8000830:	2208      	movs	r2, #8
 8000832:	f001 fed7 	bl	80025e4 <LCD_Draw_Circle_Fill>
 8000836:	e020      	b.n	800087a <Display_Coins+0x96>
			}

			else if(board[i][j] == 2){
 8000838:	4918      	ldr	r1, [pc, #96]	@ (800089c <Display_Coins+0xb8>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d115      	bne.n	800087a <Display_Coins+0x96>
				LCD_Draw_Circle_Fill(30+30*j, 95+30*i, 8, LCD_COLOR_RED);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b298      	uxth	r0, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	335f      	adds	r3, #95	@ 0x5f
 800086e:	b299      	uxth	r1, r3
 8000870:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000874:	2208      	movs	r2, #8
 8000876:	f001 feb5 	bl	80025e4 <LCD_Draw_Circle_Fill>
		for(int j = 0; j < NUM_COLS; j++){
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b06      	cmp	r3, #6
 8000884:	ddb7      	ble.n	80007f6 <Display_Coins+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b05      	cmp	r3, #5
 8000890:	ddae      	ble.n	80007f0 <Display_Coins+0xc>
			}
		}
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000a4 	.word	0x200000a4

080008a0 <Single_Player>:

void Single_Player(RNG_HandleTypeDef* hrng){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	turns = 0;
 80008a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <Single_Player+0x184>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	Drop_Coin = 0;
 80008ae:	4b5e      	ldr	r3, [pc, #376]	@ (8000a28 <Single_Player+0x188>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
	while(Game_Status() == ONGOING){
 80008b4:	e0a8      	b.n	8000a08 <Single_Player+0x168>
		//User Turn
		if(turns % 2 == 0){
 80008b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <Single_Player+0x184>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d177      	bne.n	80009b2 <Single_Player+0x112>
			int position = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
			LCD_Clear(0, LCD_COLOR_WHITE);
 80008c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008ca:	2000      	movs	r0, #0
 80008cc:	f001 ff2c 	bl	8002728 <LCD_Clear>
			Display_Board();
 80008d0:	f7ff ff3a 	bl	8000748 <Display_Board>
			Display_Coins();
 80008d4:	f7ff ff86 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_BLUE);
 80008d8:	231f      	movs	r3, #31
 80008da:	2208      	movs	r2, #8
 80008dc:	2141      	movs	r1, #65	@ 0x41
 80008de:	201e      	movs	r0, #30
 80008e0:	f001 fe80 	bl	80025e4 <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	72fb      	strb	r3, [r7, #11]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 80008e8:	4850      	ldr	r0, [pc, #320]	@ (8000a2c <Single_Player+0x18c>)
 80008ea:	f002 f81a 	bl	8002922 <returnTouchStateAndLocation>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d12d      	bne.n	8000950 <Single_Player+0xb0>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80008f4:	4b4d      	ldr	r3, [pc, #308]	@ (8000a2c <Single_Player+0x18c>)
 80008f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008fa:	f002 f81e 	bl	800293a <returnTouchQuadrant>
 80008fe:	4603      	mov	r3, r0
 8000900:	72bb      	strb	r3, [r7, #10]
					if(touchedQuadrant == BOTTOM_RIGHT || touchedQuadrant == TOP_RIGHT){
 8000902:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d003      	beq.n	8000912 <Single_Player+0x72>
 800090a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d10b      	bne.n	800092a <Single_Player+0x8a>
						if(position <= 0) position = 6;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dc02      	bgt.n	800091e <Single_Player+0x7e>
 8000918:	2306      	movs	r3, #6
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e002      	b.n	8000924 <Single_Player+0x84>
						else position--;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3b01      	subs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]

						touched = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	e012      	b.n	8000950 <Single_Player+0xb0>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT || touchedQuadrant == TOP_LEFT){
 800092a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <Single_Player+0x9a>
 8000932:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d10a      	bne.n	8000950 <Single_Player+0xb0>
						if(position >= 6) position = 0;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b05      	cmp	r3, #5
 800093e:	dd02      	ble.n	8000946 <Single_Player+0xa6>
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e002      	b.n	800094c <Single_Player+0xac>
						else position++;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]

						touched = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	72fb      	strb	r3, [r7, #11]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 8000950:	7afb      	ldrb	r3, [r7, #11]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d018      	beq.n	8000988 <Single_Player+0xe8>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8000956:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800095a:	2000      	movs	r0, #0
 800095c:	f001 fee4 	bl	8002728 <LCD_Clear>
					Display_Board();
 8000960:	f7ff fef2 	bl	8000748 <Display_Board>
					Display_Coins();
 8000964:	f7ff ff3e 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_BLUE2);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	b298      	uxth	r0, r3
 8000978:	f240 531f 	movw	r3, #1311	@ 0x51f
 800097c:	2208      	movs	r2, #8
 800097e:	2141      	movs	r1, #65	@ 0x41
 8000980:	f001 fe30 	bl	80025e4 <LCD_Draw_Circle_Fill>

					touched = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	72fb      	strb	r3, [r7, #11]
				}

				if(Drop_Coin){
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <Single_Player+0x188>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0a9      	beq.n	80008e4 <Single_Player+0x44>
					Drop_Coin = 0;
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <Single_Player+0x188>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
					break;
 8000996:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, BLUE_PLAYER);
 8000998:	2101      	movs	r1, #1
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f000 feaa 	bl	80016f4 <Place_Coin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	727b      	strb	r3, [r7, #9]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 80009a4:	7a7b      	ldrb	r3, [r7, #9]
 80009a6:	f083 0301 	eor.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d026      	beq.n	80009fe <Single_Player+0x15e>
 80009b0:	e02a      	b.n	8000a08 <Single_Player+0x168>
		}

		//ai turn
		else{
			LCD_DisplayChar(30, 35, "Generating Move.");
 80009b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <Single_Player+0x190>)
 80009b4:	2123      	movs	r1, #35	@ 0x23
 80009b6:	201e      	movs	r0, #30
 80009b8:	f001 ff66 	bl	8002888 <LCD_DisplayChar>
			HAL_Delay(750);
 80009bc:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80009c0:	f003 fed2 	bl	8004768 <HAL_Delay>
			LCD_DisplayChar(30, 35, "Generating Move..");
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <Single_Player+0x194>)
 80009c6:	2123      	movs	r1, #35	@ 0x23
 80009c8:	201e      	movs	r0, #30
 80009ca:	f001 ff5d 	bl	8002888 <LCD_DisplayChar>
			HAL_Delay(750);
 80009ce:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80009d2:	f003 fec9 	bl	8004768 <HAL_Delay>
			LCD_DisplayChar(30, 35, "Generating Move...");
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <Single_Player+0x198>)
 80009d8:	2123      	movs	r1, #35	@ 0x23
 80009da:	201e      	movs	r0, #30
 80009dc:	f001 ff54 	bl	8002888 <LCD_DisplayChar>

			#if USE_AI_FOR_SINGLE_PLAYER == 0
			while(!Place_Coin(Generate_Random_Move(hrng), RED_PLAYER)); //generate random moves until one is valid
			#else
			while(!Place_Coin(Generate_AI_Move(hrng), RED_PLAYER));
 80009e0:	bf00      	nop
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f84a 	bl	8000a7c <Generate_AI_Move>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2102      	movs	r1, #2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fe81 	bl	80016f4 <Place_Coin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f1      	bne.n	80009e2 <Single_Player+0x142>
			#endif

		}
		turns++;
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <Single_Player+0x184>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <Single_Player+0x184>)
 8000a06:	6013      	str	r3, [r2, #0]
	while(Game_Status() == ONGOING){
 8000a08:	f000 ffc4 	bl	8001994 <Game_Status>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f43f af51 	beq.w	80008b6 <Single_Player+0x16>
	}
	addSchedulerEvent(DISPLAY_RESULTS_EVENT);
 8000a14:	2020      	movs	r0, #32
 8000a16:	f002 f833 	bl	8002a80 <addSchedulerEvent>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000158 	.word	0x20000158
 8000a28:	2000015c 	.word	0x2000015c
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	080091f8 	.word	0x080091f8
 8000a34:	0800920c 	.word	0x0800920c
 8000a38:	08009220 	.word	0x08009220

08000a3c <Generate_Random_Move>:

int Generate_Random_Move(RNG_HandleTypeDef* hrng){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	uint32_t randNum = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
	HAL_RNG_GenerateRandomNumber(hrng, &randNum);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f006 fc78 	bl	8007344 <HAL_RNG_GenerateRandomNumber>

	return randNum % 7;
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <Generate_Random_Move+0x3c>)
 8000a58:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5c:	1ad1      	subs	r1, r2, r3
 8000a5e:	0849      	lsrs	r1, r1, #1
 8000a60:	440b      	add	r3, r1
 8000a62:	0899      	lsrs	r1, r3, #2
 8000a64:	460b      	mov	r3, r1
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	1ad1      	subs	r1, r2, r3
 8000a6c:	460b      	mov	r3, r1
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24924925 	.word	0x24924925

08000a7c <Generate_AI_Move>:

int Generate_AI_Move(RNG_HandleTypeDef* hrng){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0c8      	sub	sp, #288	@ 0x120
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000a8a:	6018      	str	r0, [r3, #0]
	int defense[7] = {0, 0, 0, 0, 0, 0, 0};
 8000a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]

	for(int j = 0; j < NUM_COLS; j++){
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000aa6:	e2e8      	b.n	800107a <Generate_AI_Move+0x5fe>
		for(int i = NUM_ROWS-1; i >= 0; i--){
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000aae:	e2d8      	b.n	8001062 <Generate_AI_Move+0x5e6>
			if(board[i][j] == 0){
 8000ab0:	49d4      	ldr	r1, [pc, #848]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000ab2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000ac0:	4413      	add	r3, r2
 8000ac2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 82c6 	bne.w	8001058 <Generate_AI_Move+0x5dc>
				//check this position for how many blue coins it would interrupt
				//check below

				int sequence_length = 0; //var to track length of current sequence
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				int potential_sequence = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
				int available_slots = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
				
				for(int a = i+1; a < NUM_ROWS; a++){
 8000adc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000ae6:	e016      	b.n	8000b16 <Generate_AI_Move+0x9a>
					if(board[a][j] == 1) sequence_length++; //if a blue coin is detected below, increment the sequence
 8000ae8:	49c6      	ldr	r1, [pc, #792]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000aea:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000aee:	4613      	mov	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000af8:	4413      	add	r3, r2
 8000afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d10e      	bne.n	8000b20 <Generate_AI_Move+0xa4>
 8000b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b06:	3301      	adds	r3, #1
 8000b08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				for(int a = i+1; a < NUM_ROWS; a++){
 8000b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	dde4      	ble.n	8000ae8 <Generate_AI_Move+0x6c>
 8000b1e:	e000      	b.n	8000b22 <Generate_AI_Move+0xa6>
					else break;
 8000b20:	bf00      	nop
				}

				//if potential sequence >= 4, keep it. If not, make it zero
				for(int a = i; a >= 0; a--){
 8000b22:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000b2a:	e016      	b.n	8000b5a <Generate_AI_Move+0xde>
					if(board[a][j] == 0) available_slots++;
 8000b2c:	49b5      	ldr	r1, [pc, #724]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000b2e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000b32:	4613      	mov	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10e      	bne.n	8000b64 <Generate_AI_Move+0xe8>
 8000b46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
				for(int a = i; a >= 0; a--){
 8000b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b54:	3b01      	subs	r3, #1
 8000b56:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000b5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	dae4      	bge.n	8000b2c <Generate_AI_Move+0xb0>
 8000b62:	e000      	b.n	8000b66 <Generate_AI_Move+0xea>
					else break;
 8000b64:	bf00      	nop
				}

				potential_sequence = sequence_length + available_slots + 1;
 8000b66:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000b6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000b6e:	4413      	add	r3, r2
 8000b70:	3301      	adds	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	@ 0x44

				if(potential_sequence < 4) sequence_length = 0;
 8000b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	dc02      	bgt.n	8000b80 <Generate_AI_Move+0x104>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				//if the current sequence being checked is greater than the biggest sequence stored, update it
				if(sequence_length > defense[j]) defense[j] = sequence_length;
 8000b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000b8a:	443b      	add	r3, r7
 8000b8c:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8000b90:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dd09      	ble.n	8000bac <Generate_AI_Move+0x130>
 8000b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000ba2:	443b      	add	r3, r7
 8000ba4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000ba8:	f843 2cf8 	str.w	r2, [r3, #-248]

				sequence_length = 0; //reset length to use for next checks
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				potential_sequence = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	647b      	str	r3, [r7, #68]	@ 0x44
				available_slots = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
				//check right+left
				//Have to consider sequences that are not continuous (e.g., (5,0), (5,1), and (5,3) -> placing a coin at (5,2) would avoid a win )
				//Is there a blue coin immediately to the left? 
					//If not, no need to check left
					//If yes, how many?
				int left = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
				for(int b = j-1; b >= 0; b--){
 8000bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000bcc:	e016      	b.n	8000bfc <Generate_AI_Move+0x180>
					if(board[i][b] == 1) left++;
 8000bce:	498d      	ldr	r1, [pc, #564]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000bd0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000bde:	4413      	add	r3, r2
 8000be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d10e      	bne.n	8000c06 <Generate_AI_Move+0x18a>
 8000be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000bec:	3301      	adds	r3, #1
 8000bee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
				for(int b = j-1; b >= 0; b--){
 8000bf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dae4      	bge.n	8000bce <Generate_AI_Move+0x152>
 8000c04:	e000      	b.n	8000c08 <Generate_AI_Move+0x18c>
					else break;
 8000c06:	bf00      	nop
				}

				//Is there a blue coin immediately to the right? 
					//If not, no need to check right
					//If yes, how many?
				int right = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				for(int b = j+1; b < NUM_COLS; b++){
 8000c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c12:	3301      	adds	r3, #1
 8000c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000c18:	e016      	b.n	8000c48 <Generate_AI_Move+0x1cc>
					if(board[i][b] == 1) right++;
 8000c1a:	497a      	ldr	r1, [pc, #488]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000c1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8000c2a:	4413      	add	r3, r2
 8000c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d10e      	bne.n	8000c52 <Generate_AI_Move+0x1d6>
 8000c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000c38:	3301      	adds	r3, #1
 8000c3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				for(int b = j+1; b < NUM_COLS; b++){
 8000c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000c42:	3301      	adds	r3, #1
 8000c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	dde4      	ble.n	8000c1a <Generate_AI_Move+0x19e>
 8000c50:	e000      	b.n	8000c54 <Generate_AI_Move+0x1d8>
					else break;
 8000c52:	bf00      	nop
				}

				//Sum left and right sequences
				sequence_length = left+right;
 8000c54:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				//Check left+right potential lengths to avoid stupid placements (don't try to block a sequence that cannot reach 4 coins)
				int available_left = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				for(int b = j-1; b >= 0; b--){
 8000c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000c72:	e016      	b.n	8000ca2 <Generate_AI_Move+0x226>
					if(board[i][b] == 0) available_left++;
 8000c74:	4963      	ldr	r1, [pc, #396]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000c76:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000c84:	4413      	add	r3, r2
 8000c86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10e      	bne.n	8000cac <Generate_AI_Move+0x230>
 8000c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000c92:	3301      	adds	r3, #1
 8000c94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				for(int b = j-1; b >= 0; b--){
 8000c98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000ca2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	dae4      	bge.n	8000c74 <Generate_AI_Move+0x1f8>
 8000caa:	e000      	b.n	8000cae <Generate_AI_Move+0x232>
					else break;
 8000cac:	bf00      	nop
				}

				int available_right = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				for(int b = j+1; b < NUM_COLS; b++){
 8000cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000cbe:	e016      	b.n	8000cee <Generate_AI_Move+0x272>
					if(board[i][b] == 0) available_right++;
 8000cc0:	4950      	ldr	r1, [pc, #320]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000cc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000cd0:	4413      	add	r3, r2
 8000cd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10e      	bne.n	8000cf8 <Generate_AI_Move+0x27c>
 8000cda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				for(int b = j+1; b < NUM_COLS; b++){
 8000ce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000cee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	dde4      	ble.n	8000cc0 <Generate_AI_Move+0x244>
 8000cf6:	e000      	b.n	8000cfa <Generate_AI_Move+0x27e>
					else break;
 8000cf8:	bf00      	nop
				}

				available_slots = available_left + available_right + 1; //add one to account for current slot
 8000cfa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000cfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000d02:	4413      	add	r3, r2
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

				potential_sequence = sequence_length + available_slots;
 8000d0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d12:	4413      	add	r3, r2
 8000d14:	647b      	str	r3, [r7, #68]	@ 0x44

				if(potential_sequence < 4) sequence_length = 0;
 8000d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	dc02      	bgt.n	8000d22 <Generate_AI_Move+0x2a6>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				if(sequence_length > defense[j]) defense[j] = sequence_length;
 8000d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000d2c:	443b      	add	r3, r7
 8000d2e:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8000d32:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dd09      	ble.n	8000d4e <Generate_AI_Move+0x2d2>
 8000d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000d44:	443b      	add	r3, r7
 8000d46:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d4a:	f843 2cf8 	str.w	r2, [r3, #-248]
				//check diagonals (all diagonals+both directions)
				//Apply same logic used for left+right

				//Check top-left/bottom-right diagonal
				//Check top-left
				int a = i-1;
 8000d4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				int b = j-1;
 8000d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				int top_left = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				int available_top_left = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				while(a >= 0 && b >= 0){
 8000d6e:	e02e      	b.n	8000dce <Generate_AI_Move+0x352>
					if(board[a][b] == 1) top_left++;
 8000d70:	4924      	ldr	r1, [pc, #144]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000d72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000d80:	4413      	add	r3, r2
 8000d82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d105      	bne.n	8000d96 <Generate_AI_Move+0x31a>
 8000d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000d94:	e011      	b.n	8000dba <Generate_AI_Move+0x33e>
					else if(board[a][b] == 0) available_top_left++;
 8000d96:	491b      	ldr	r1, [pc, #108]	@ (8000e04 <Generate_AI_Move+0x388>)
 8000d98:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000da6:	4413      	add	r3, r2
 8000da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d117      	bne.n	8000de0 <Generate_AI_Move+0x364>
 8000db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000db4:	3301      	adds	r3, #1
 8000db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
					else break;
					a--;	
 8000dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					b--;
 8000dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				while(a >= 0 && b >= 0){
 8000dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db05      	blt.n	8000de2 <Generate_AI_Move+0x366>
 8000dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	dac8      	bge.n	8000d70 <Generate_AI_Move+0x2f4>
 8000dde:	e000      	b.n	8000de2 <Generate_AI_Move+0x366>
					else break;
 8000de0:	bf00      	nop
				}

				//Check bottom-right
				a = i+1;
 8000de2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000de6:	3301      	adds	r3, #1
 8000de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				b = j+1;
 8000dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000df0:	3301      	adds	r3, #1
 8000df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				int bottom_right = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				int available_bottom_right = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				while(a < NUM_ROWS && b < NUM_COLS){
 8000e02:	e030      	b.n	8000e66 <Generate_AI_Move+0x3ea>
 8000e04:	200000a4 	.word	0x200000a4
					if(board[a][b] == 1) bottom_right++;
 8000e08:	49ca      	ldr	r1, [pc, #808]	@ (8001134 <Generate_AI_Move+0x6b8>)
 8000e0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000e18:	4413      	add	r3, r2
 8000e1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <Generate_AI_Move+0x3b2>
 8000e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e26:	3301      	adds	r3, #1
 8000e28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e2c:	e011      	b.n	8000e52 <Generate_AI_Move+0x3d6>
					else if(board[a][b] == 0) available_bottom_right++;
 8000e2e:	49c1      	ldr	r1, [pc, #772]	@ (8001134 <Generate_AI_Move+0x6b8>)
 8000e30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e34:	4613      	mov	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000e3e:	4413      	add	r3, r2
 8000e40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d117      	bne.n	8000e78 <Generate_AI_Move+0x3fc>
 8000e48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					else break;
					a++;
 8000e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000e56:	3301      	adds	r3, #1
 8000e58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					b++;
 8000e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000e60:	3301      	adds	r3, #1
 8000e62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				while(a < NUM_ROWS && b < NUM_COLS){
 8000e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000e6a:	2b05      	cmp	r3, #5
 8000e6c:	dc05      	bgt.n	8000e7a <Generate_AI_Move+0x3fe>
 8000e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	ddc8      	ble.n	8000e08 <Generate_AI_Move+0x38c>
 8000e76:	e000      	b.n	8000e7a <Generate_AI_Move+0x3fe>
					else break;
 8000e78:	bf00      	nop
				}

				//Sum top-left and bottom-right sequences
				sequence_length = top_left+bottom_right;
 8000e7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e82:	4413      	add	r3, r2
 8000e84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				//Check top-left+bottom-right potential lengths to avoid stupid placements (don't try to block a sequence that cannot reach 4 coins)
				potential_sequence = sequence_length + available_bottom_right+available_top_left + 1; //add 1 to account for current slot
 8000e88:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000e90:	441a      	add	r2, r3
 8000e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000e96:	4413      	add	r3, r2
 8000e98:	3301      	adds	r3, #1
 8000e9a:	647b      	str	r3, [r7, #68]	@ 0x44

				if(potential_sequence < 4) sequence_length = 0;
 8000e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	dc02      	bgt.n	8000ea8 <Generate_AI_Move+0x42c>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				if(sequence_length > defense[j]) defense[j] = sequence_length;
 8000ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000eb2:	443b      	add	r3, r7
 8000eb4:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8000eb8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dd09      	ble.n	8000ed4 <Generate_AI_Move+0x458>
 8000ec0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000eca:	443b      	add	r3, r7
 8000ecc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000ed0:	f843 2cf8 	str.w	r2, [r3, #-248]
				
				//Check top-right/bottom-left diagonal
				//Check top-right
				a = i-1;
 8000ed4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				b = j+1;
 8000ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				int top_right = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				int available_top_right = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				while(a >= 0 && b < NUM_COLS){
 8000ef4:	e02e      	b.n	8000f54 <Generate_AI_Move+0x4d8>
					if(board[a][b] == 1) top_right++;
 8000ef6:	498f      	ldr	r1, [pc, #572]	@ (8001134 <Generate_AI_Move+0x6b8>)
 8000ef8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000efc:	4613      	mov	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000f06:	4413      	add	r3, r2
 8000f08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <Generate_AI_Move+0x4a0>
 8000f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000f1a:	e011      	b.n	8000f40 <Generate_AI_Move+0x4c4>
					else if(board[a][b] == 0) available_top_right++;
 8000f1c:	4985      	ldr	r1, [pc, #532]	@ (8001134 <Generate_AI_Move+0x6b8>)
 8000f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d117      	bne.n	8000f66 <Generate_AI_Move+0x4ea>
 8000f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					else break;
					a--;
 8000f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					b++;
 8000f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				while(a >= 0 && b < NUM_COLS){
 8000f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db05      	blt.n	8000f68 <Generate_AI_Move+0x4ec>
 8000f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	ddc8      	ble.n	8000ef6 <Generate_AI_Move+0x47a>
 8000f64:	e000      	b.n	8000f68 <Generate_AI_Move+0x4ec>
					else break;
 8000f66:	bf00      	nop
				}

				//Check bottom-left
				a = i+1;
 8000f68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				b = j-1;
 8000f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				int bottom_left = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
				int available_bottom_left = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				while(a < NUM_ROWS && b >= 0){
 8000f88:	e02e      	b.n	8000fe8 <Generate_AI_Move+0x56c>
					if(board[a][b] == 1) bottom_left++;
 8000f8a:	496a      	ldr	r1, [pc, #424]	@ (8001134 <Generate_AI_Move+0x6b8>)
 8000f8c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <Generate_AI_Move+0x534>
 8000fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000fae:	e011      	b.n	8000fd4 <Generate_AI_Move+0x558>
					else if(board[a][b] == 0) available_bottom_left++;
 8000fb0:	4960      	ldr	r1, [pc, #384]	@ (8001134 <Generate_AI_Move+0x6b8>)
 8000fb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d117      	bne.n	8000ffa <Generate_AI_Move+0x57e>
 8000fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
					else break;
					a++;
 8000fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					b--;
 8000fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				while(a < NUM_ROWS && b >= 0){
 8000fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	dc05      	bgt.n	8000ffc <Generate_AI_Move+0x580>
 8000ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dac8      	bge.n	8000f8a <Generate_AI_Move+0x50e>
 8000ff8:	e000      	b.n	8000ffc <Generate_AI_Move+0x580>
					else break;
 8000ffa:	bf00      	nop
				}

				//Sum top-right and bottom-left sequences
				sequence_length = top_right+bottom_left;
 8000ffc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001004:	4413      	add	r3, r2
 8001006:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				//Check top-left+bottom-right potential lengths to avoid stupid placements (don't try to block a sequence that cannot reach 4 coins)
				potential_sequence = sequence_length + available_bottom_left+available_top_right + 1; //add 1 to account for current slot
 800100a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800100e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001012:	441a      	add	r2, r3
 8001014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001018:	4413      	add	r3, r2
 800101a:	3301      	adds	r3, #1
 800101c:	647b      	str	r3, [r7, #68]	@ 0x44

				if(potential_sequence < 4) sequence_length = 0;
 800101e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001020:	2b03      	cmp	r3, #3
 8001022:	dc02      	bgt.n	800102a <Generate_AI_Move+0x5ae>
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				if(sequence_length > defense[j]) defense[j] = sequence_length;
 800102a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001034:	443b      	add	r3, r7
 8001036:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 800103a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800103e:	429a      	cmp	r2, r3
 8001040:	dd15      	ble.n	800106e <Generate_AI_Move+0x5f2>
 8001042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800104c:	443b      	add	r3, r7
 800104e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001052:	f843 2cf8 	str.w	r2, [r3, #-248]
				break;
 8001056:	e00a      	b.n	800106e <Generate_AI_Move+0x5f2>
		for(int i = NUM_ROWS-1; i >= 0; i--){
 8001058:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800105c:	3b01      	subs	r3, #1
 800105e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001062:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001066:	2b00      	cmp	r3, #0
 8001068:	f6bf ad22 	bge.w	8000ab0 <Generate_AI_Move+0x34>
 800106c:	e000      	b.n	8001070 <Generate_AI_Move+0x5f4>
				break;
 800106e:	bf00      	nop
	for(int j = 0; j < NUM_COLS; j++){
 8001070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001074:	3301      	adds	r3, #1
 8001076:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800107a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800107e:	2b06      	cmp	r3, #6
 8001080:	f77f ad12 	ble.w	8000aa8 <Generate_AI_Move+0x2c>
			}
		}
	}

	//Determine best position
	int best_defense = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	for(int j = 0; j < NUM_COLS; j++){
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001090:	e01a      	b.n	80010c8 <Generate_AI_Move+0x64c>
		if(defense[j] > defense[best_defense]) best_defense = j;
 8001092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800109c:	443b      	add	r3, r7
 800109e:	f853 2cf8 	ldr.w	r2, [r3, #-248]
 80010a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80010ac:	443b      	add	r3, r7
 80010ae:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dd03      	ble.n	80010be <Generate_AI_Move+0x642>
 80010b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	for(int j = 0; j < NUM_COLS; j++){
 80010be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010c2:	3301      	adds	r3, #1
 80010c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80010c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	dde0      	ble.n	8001092 <Generate_AI_Move+0x616>
	}

	//Apply exact same logic to determine best attack, only switching blue coins for red coins
	int attack[7] = {0, 0, 0, 0, 0, 0, 0};
 80010d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010d8:	461a      	mov	r2, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	6093      	str	r3, [r2, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
 80010e4:	6113      	str	r3, [r2, #16]
 80010e6:	6153      	str	r3, [r2, #20]
 80010e8:	6193      	str	r3, [r2, #24]

	for(int j = 0; j < NUM_COLS; j++){
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80010f0:	e296      	b.n	8001620 <Generate_AI_Move+0xba4>
		for(int i = NUM_ROWS-1; i >= 0; i--){
 80010f2:	2305      	movs	r3, #5
 80010f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80010f8:	e286      	b.n	8001608 <Generate_AI_Move+0xb8c>
			if(board[i][j] == 0){
 80010fa:	490e      	ldr	r1, [pc, #56]	@ (8001134 <Generate_AI_Move+0x6b8>)
 80010fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800110a:	4413      	add	r3, r2
 800110c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f040 8274 	bne.w	80015fe <Generate_AI_Move+0xb82>
				//check this position for how many blue coins it would interrupt
				//check below

				int sequence_length = 0; //var to track length of current sequence
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				int potential_sequence = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	64bb      	str	r3, [r7, #72]	@ 0x48
				int available_slots = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

				for(int a = i+1; a < NUM_ROWS; a++){
 8001126:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001130:	e019      	b.n	8001166 <Generate_AI_Move+0x6ea>
 8001132:	bf00      	nop
 8001134:	200000a4 	.word	0x200000a4
					if(board[a][j] == 2) sequence_length++; //if a red coin is detected below, increment the sequence
 8001138:	49c0      	ldr	r1, [pc, #768]	@ (800143c <Generate_AI_Move+0x9c0>)
 800113a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001148:	4413      	add	r3, r2
 800114a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d10e      	bne.n	8001170 <Generate_AI_Move+0x6f4>
 8001152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001156:	3301      	adds	r3, #1
 8001158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				for(int a = i+1; a < NUM_ROWS; a++){
 800115c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800116a:	2b05      	cmp	r3, #5
 800116c:	dde4      	ble.n	8001138 <Generate_AI_Move+0x6bc>
 800116e:	e000      	b.n	8001172 <Generate_AI_Move+0x6f6>
					else break;
 8001170:	bf00      	nop
				}
				
				//if potential sequence >= 4, keep it. If not, make it zero
				for(int a = i; a >= 0; a--){
 8001172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800117a:	e016      	b.n	80011aa <Generate_AI_Move+0x72e>
					if(board[a][j] == 0) available_slots++;
 800117c:	49af      	ldr	r1, [pc, #700]	@ (800143c <Generate_AI_Move+0x9c0>)
 800117e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800118c:	4413      	add	r3, r2
 800118e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10e      	bne.n	80011b4 <Generate_AI_Move+0x738>
 8001196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800119a:	3301      	adds	r3, #1
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				for(int a = i; a >= 0; a--){
 80011a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011a4:	3b01      	subs	r3, #1
 80011a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80011aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	dae4      	bge.n	800117c <Generate_AI_Move+0x700>
 80011b2:	e000      	b.n	80011b6 <Generate_AI_Move+0x73a>
					else break;
 80011b4:	bf00      	nop
				}

				potential_sequence = sequence_length + available_slots;
 80011b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80011ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011be:	4413      	add	r3, r2
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48

				if(potential_sequence < 4) sequence_length = 0;
 80011c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	dc02      	bgt.n	80011ce <Generate_AI_Move+0x752>
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				//if the current sequence being checked is greater than the biggest sequence stored for this position, update it
				if(sequence_length > attack[j]) attack[j] = sequence_length;
 80011ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80011d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80011da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dd09      	ble.n	80011fa <Generate_AI_Move+0x77e>
 80011e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80011ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80011f2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80011f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				sequence_length = 0; //reset length to use for next checks
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				//check right+left
				//Have to consider sequences that are not continuous (e.g., (5,0), (5,1), and (5,3) -> placing a coin at (5,2) would yield a win )
				//Is there a red coin immediately to the left? 
					//If not, no need to check left
					//If yes, how many?
				int left = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				for(int b = j-1; b >= 0; b--){
 8001206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800120a:	3b01      	subs	r3, #1
 800120c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001210:	e016      	b.n	8001240 <Generate_AI_Move+0x7c4>
					if(board[i][b] == 2) left++;
 8001212:	498a      	ldr	r1, [pc, #552]	@ (800143c <Generate_AI_Move+0x9c0>)
 8001214:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	1a9b      	subs	r3, r3, r2
 800121e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001222:	4413      	add	r3, r2
 8001224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d10e      	bne.n	800124a <Generate_AI_Move+0x7ce>
 800122c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				for(int b = j-1; b >= 0; b--){
 8001236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800123a:	3b01      	subs	r3, #1
 800123c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001244:	2b00      	cmp	r3, #0
 8001246:	dae4      	bge.n	8001212 <Generate_AI_Move+0x796>
 8001248:	e000      	b.n	800124c <Generate_AI_Move+0x7d0>
					else break;
 800124a:	bf00      	nop
				}

				//Is there a red coin immediately to the right? 
					//If not, no need to check right
					//If yes, how many?
				int right = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				for(int b = j+1; b < NUM_COLS; b++){
 8001252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800125c:	e016      	b.n	800128c <Generate_AI_Move+0x810>
					if(board[i][b] == 2) right++;
 800125e:	4977      	ldr	r1, [pc, #476]	@ (800143c <Generate_AI_Move+0x9c0>)
 8001260:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800126e:	4413      	add	r3, r2
 8001270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d10e      	bne.n	8001296 <Generate_AI_Move+0x81a>
 8001278:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800127c:	3301      	adds	r3, #1
 800127e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				for(int b = j+1; b < NUM_COLS; b++){
 8001282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001286:	3301      	adds	r3, #1
 8001288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800128c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001290:	2b06      	cmp	r3, #6
 8001292:	dde4      	ble.n	800125e <Generate_AI_Move+0x7e2>
 8001294:	e000      	b.n	8001298 <Generate_AI_Move+0x81c>
					else break;
 8001296:	bf00      	nop
				}

				//Sum left and right sequences
				sequence_length = left+right;
 8001298:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800129c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012a0:	4413      	add	r3, r2
 80012a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				//Check left+right potential lengths to avoid stupid placements (don't try to complete a sequence that cannot reach 4 coins)
				int available_left = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				for(int b = j-1; b >= 0; b--){
 80012ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012b0:	3b01      	subs	r3, #1
 80012b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012b6:	e016      	b.n	80012e6 <Generate_AI_Move+0x86a>
					if(board[i][b] == 0) available_left++;
 80012b8:	4960      	ldr	r1, [pc, #384]	@ (800143c <Generate_AI_Move+0x9c0>)
 80012ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80012c8:	4413      	add	r3, r2
 80012ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <Generate_AI_Move+0x874>
 80012d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012d6:	3301      	adds	r3, #1
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				for(int b = j-1; b >= 0; b--){
 80012dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012e0:	3b01      	subs	r3, #1
 80012e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dae4      	bge.n	80012b8 <Generate_AI_Move+0x83c>
 80012ee:	e000      	b.n	80012f2 <Generate_AI_Move+0x876>
					else break;
 80012f0:	bf00      	nop
				}

				int available_right = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				for(int b = j+1; b < NUM_COLS; b++){
 80012f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012fc:	3301      	adds	r3, #1
 80012fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001302:	e016      	b.n	8001332 <Generate_AI_Move+0x8b6>
					if(board[i][b] == 0) available_right++;
 8001304:	494d      	ldr	r1, [pc, #308]	@ (800143c <Generate_AI_Move+0x9c0>)
 8001306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001314:	4413      	add	r3, r2
 8001316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10e      	bne.n	800133c <Generate_AI_Move+0x8c0>
 800131e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001322:	3301      	adds	r3, #1
 8001324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				for(int b = j+1; b < NUM_COLS; b++){
 8001328:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001332:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001336:	2b06      	cmp	r3, #6
 8001338:	dde4      	ble.n	8001304 <Generate_AI_Move+0x888>
 800133a:	e000      	b.n	800133e <Generate_AI_Move+0x8c2>
					else break;
 800133c:	bf00      	nop
				}

				available_slots = available_left + available_right + 1; //add one to account for current slot
 800133e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001346:	4413      	add	r3, r2
 8001348:	3301      	adds	r3, #1
 800134a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				
				potential_sequence = sequence_length + available_slots;
 800134e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001356:	4413      	add	r3, r2
 8001358:	64bb      	str	r3, [r7, #72]	@ 0x48

				if(potential_sequence < 4) sequence_length = 0;
 800135a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800135c:	2b03      	cmp	r3, #3
 800135e:	dc02      	bgt.n	8001366 <Generate_AI_Move+0x8ea>
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				if(sequence_length > attack[j]) attack[j] = sequence_length;
 8001366:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800136a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800136e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800137a:	429a      	cmp	r2, r3
 800137c:	dd09      	ble.n	8001392 <Generate_AI_Move+0x916>
 800137e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001382:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800138a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800138e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				//check diagonals (all diagonals+both directions)
				//Apply same logic used for left+right

				//Check top-left/bottom-right diagonal
				//Check top-left
				int a = i-1;
 8001392:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001396:	3b01      	subs	r3, #1
 8001398:	67fb      	str	r3, [r7, #124]	@ 0x7c
				int b = j-1;
 800139a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800139e:	3b01      	subs	r3, #1
 80013a0:	67bb      	str	r3, [r7, #120]	@ 0x78
				int top_left = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	677b      	str	r3, [r7, #116]	@ 0x74
				int available_top_left = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	673b      	str	r3, [r7, #112]	@ 0x70
				while(a >= 0 && b >= 0){
 80013aa:	e022      	b.n	80013f2 <Generate_AI_Move+0x976>
					if(board[a][b] == 2) top_left++;
 80013ac:	4923      	ldr	r1, [pc, #140]	@ (800143c <Generate_AI_Move+0x9c0>)
 80013ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80013b8:	4413      	add	r3, r2
 80013ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d103      	bne.n	80013ca <Generate_AI_Move+0x94e>
 80013c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013c4:	3301      	adds	r3, #1
 80013c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80013c8:	e00d      	b.n	80013e6 <Generate_AI_Move+0x96a>
					else if(board[a][b] == 0) available_top_left++;
 80013ca:	491c      	ldr	r1, [pc, #112]	@ (800143c <Generate_AI_Move+0x9c0>)
 80013cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80013d6:	4413      	add	r3, r2
 80013d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10f      	bne.n	8001400 <Generate_AI_Move+0x984>
 80013e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013e2:	3301      	adds	r3, #1
 80013e4:	673b      	str	r3, [r7, #112]	@ 0x70
					else break;
					a--;
 80013e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013e8:	3b01      	subs	r3, #1
 80013ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
					b--;
 80013ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013ee:	3b01      	subs	r3, #1
 80013f0:	67bb      	str	r3, [r7, #120]	@ 0x78
				while(a >= 0 && b >= 0){
 80013f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db04      	blt.n	8001402 <Generate_AI_Move+0x986>
 80013f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dad6      	bge.n	80013ac <Generate_AI_Move+0x930>
 80013fe:	e000      	b.n	8001402 <Generate_AI_Move+0x986>
					else break;
 8001400:	bf00      	nop
				}

				//Check bottom-right
				a = i+1;
 8001402:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001406:	3301      	adds	r3, #1
 8001408:	67fb      	str	r3, [r7, #124]	@ 0x7c
				b = j+1;
 800140a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800140e:	3301      	adds	r3, #1
 8001410:	67bb      	str	r3, [r7, #120]	@ 0x78
				int bottom_right = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	66fb      	str	r3, [r7, #108]	@ 0x6c
				int available_bottom_right = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	66bb      	str	r3, [r7, #104]	@ 0x68
				while(a < NUM_ROWS && b < NUM_COLS){
 800141a:	e025      	b.n	8001468 <Generate_AI_Move+0x9ec>
					if(board[a][b] == 2) bottom_right++;
 800141c:	4907      	ldr	r1, [pc, #28]	@ (800143c <Generate_AI_Move+0x9c0>)
 800141e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001428:	4413      	add	r3, r2
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d106      	bne.n	8001440 <Generate_AI_Move+0x9c4>
 8001432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001434:	3301      	adds	r3, #1
 8001436:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001438:	e010      	b.n	800145c <Generate_AI_Move+0x9e0>
 800143a:	bf00      	nop
 800143c:	200000a4 	.word	0x200000a4
					else if(board[a][b] == 0) available_bottom_right++;
 8001440:	49ab      	ldr	r1, [pc, #684]	@ (80016f0 <Generate_AI_Move+0xc74>)
 8001442:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800144c:	4413      	add	r3, r2
 800144e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <Generate_AI_Move+0x9fa>
 8001456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001458:	3301      	adds	r3, #1
 800145a:	66bb      	str	r3, [r7, #104]	@ 0x68
					else break;
					a++;
 800145c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800145e:	3301      	adds	r3, #1
 8001460:	67fb      	str	r3, [r7, #124]	@ 0x7c
					b++;
 8001462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001464:	3301      	adds	r3, #1
 8001466:	67bb      	str	r3, [r7, #120]	@ 0x78
				while(a < NUM_ROWS && b < NUM_COLS){
 8001468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800146a:	2b05      	cmp	r3, #5
 800146c:	dc04      	bgt.n	8001478 <Generate_AI_Move+0x9fc>
 800146e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001470:	2b06      	cmp	r3, #6
 8001472:	ddd3      	ble.n	800141c <Generate_AI_Move+0x9a0>
 8001474:	e000      	b.n	8001478 <Generate_AI_Move+0x9fc>
					else break;
 8001476:	bf00      	nop
				}

				//Sum top-left and bottom-right sequences
				sequence_length = top_left+bottom_right;
 8001478:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800147a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800147c:	4413      	add	r3, r2
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				//Check top-left+bottom-right potential lengths to avoid stupid placements (don't try to block a sequence that cannot reach 4 coins)
				potential_sequence = sequence_length + available_bottom_right+available_top_left + 1; //add 1 to account for current slot
 8001482:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001486:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001488:	441a      	add	r2, r3
 800148a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800148c:	4413      	add	r3, r2
 800148e:	3301      	adds	r3, #1
 8001490:	64bb      	str	r3, [r7, #72]	@ 0x48

				if(potential_sequence < 4) sequence_length = 0;
 8001492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001494:	2b03      	cmp	r3, #3
 8001496:	dc02      	bgt.n	800149e <Generate_AI_Move+0xa22>
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				if(sequence_length > attack[j]) attack[j] = sequence_length;
 800149e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dd09      	ble.n	80014ca <Generate_AI_Move+0xa4e>
 80014b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014c2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				
				//Check top-right/bottom-left diagonal
				//Check top-right
				a = i-1;
 80014ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014ce:	3b01      	subs	r3, #1
 80014d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
				b = j+1;
 80014d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014d6:	3301      	adds	r3, #1
 80014d8:	67bb      	str	r3, [r7, #120]	@ 0x78
				int top_right = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	667b      	str	r3, [r7, #100]	@ 0x64
				int available_top_right = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	663b      	str	r3, [r7, #96]	@ 0x60
				while(a >= 0 && b < NUM_COLS){
 80014e2:	e022      	b.n	800152a <Generate_AI_Move+0xaae>
					if(board[a][b] == 2) top_right++;
 80014e4:	4982      	ldr	r1, [pc, #520]	@ (80016f0 <Generate_AI_Move+0xc74>)
 80014e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014f0:	4413      	add	r3, r2
 80014f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d103      	bne.n	8001502 <Generate_AI_Move+0xa86>
 80014fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014fc:	3301      	adds	r3, #1
 80014fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001500:	e00d      	b.n	800151e <Generate_AI_Move+0xaa2>
					else if(board[a][b] == 0) available_top_right++;
 8001502:	497b      	ldr	r1, [pc, #492]	@ (80016f0 <Generate_AI_Move+0xc74>)
 8001504:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800150e:	4413      	add	r3, r2
 8001510:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10f      	bne.n	8001538 <Generate_AI_Move+0xabc>
 8001518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800151a:	3301      	adds	r3, #1
 800151c:	663b      	str	r3, [r7, #96]	@ 0x60
					else break;
					a--;
 800151e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001520:	3b01      	subs	r3, #1
 8001522:	67fb      	str	r3, [r7, #124]	@ 0x7c
					b++;
 8001524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001526:	3301      	adds	r3, #1
 8001528:	67bb      	str	r3, [r7, #120]	@ 0x78
				while(a >= 0 && b < NUM_COLS){
 800152a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800152c:	2b00      	cmp	r3, #0
 800152e:	db04      	blt.n	800153a <Generate_AI_Move+0xabe>
 8001530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001532:	2b06      	cmp	r3, #6
 8001534:	ddd6      	ble.n	80014e4 <Generate_AI_Move+0xa68>
 8001536:	e000      	b.n	800153a <Generate_AI_Move+0xabe>
					else break;
 8001538:	bf00      	nop
				}

				//Check bottom-left
				a = i+1;
 800153a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800153e:	3301      	adds	r3, #1
 8001540:	67fb      	str	r3, [r7, #124]	@ 0x7c
				b = j-1;
 8001542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001546:	3b01      	subs	r3, #1
 8001548:	67bb      	str	r3, [r7, #120]	@ 0x78
				int bottom_left = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				int available_bottom_left = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	65bb      	str	r3, [r7, #88]	@ 0x58
				while(a < NUM_ROWS && b >= 0){
 8001552:	e022      	b.n	800159a <Generate_AI_Move+0xb1e>
					if(board[a][b] == 2) bottom_left++;
 8001554:	4966      	ldr	r1, [pc, #408]	@ (80016f0 <Generate_AI_Move+0xc74>)
 8001556:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001560:	4413      	add	r3, r2
 8001562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d103      	bne.n	8001572 <Generate_AI_Move+0xaf6>
 800156a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800156c:	3301      	adds	r3, #1
 800156e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001570:	e00d      	b.n	800158e <Generate_AI_Move+0xb12>
					else if(board[a][b] == 0) available_bottom_left++;
 8001572:	495f      	ldr	r1, [pc, #380]	@ (80016f0 <Generate_AI_Move+0xc74>)
 8001574:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800157e:	4413      	add	r3, r2
 8001580:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <Generate_AI_Move+0xb2c>
 8001588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800158a:	3301      	adds	r3, #1
 800158c:	65bb      	str	r3, [r7, #88]	@ 0x58
					else break;
					a++;
 800158e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001590:	3301      	adds	r3, #1
 8001592:	67fb      	str	r3, [r7, #124]	@ 0x7c
					b--;
 8001594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001596:	3b01      	subs	r3, #1
 8001598:	67bb      	str	r3, [r7, #120]	@ 0x78
				while(a < NUM_ROWS && b >= 0){
 800159a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800159c:	2b05      	cmp	r3, #5
 800159e:	dc04      	bgt.n	80015aa <Generate_AI_Move+0xb2e>
 80015a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dad6      	bge.n	8001554 <Generate_AI_Move+0xad8>
 80015a6:	e000      	b.n	80015aa <Generate_AI_Move+0xb2e>
					else break;
 80015a8:	bf00      	nop
				}

				//Sum top-right and bottom-left sequences
				sequence_length = top_right+bottom_left;
 80015aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ae:	4413      	add	r3, r2
 80015b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				//Check bottom-left+top-right potential lengths to avoid stupid placements (don't try to complete a sequence that cannot reach 4 coins)
				potential_sequence = sequence_length + available_bottom_left+available_top_right + 1; //add 1 to account for current slot
 80015b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80015b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015ba:	441a      	add	r2, r3
 80015bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015be:	4413      	add	r3, r2
 80015c0:	3301      	adds	r3, #1
 80015c2:	64bb      	str	r3, [r7, #72]	@ 0x48

				if(potential_sequence < 4) sequence_length = 0;
 80015c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	dc02      	bgt.n	80015d0 <Generate_AI_Move+0xb54>
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				if(sequence_length > attack[j]) attack[j] = sequence_length;
 80015d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dd15      	ble.n	8001614 <Generate_AI_Move+0xb98>
 80015e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015f4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				
				break;
 80015fc:	e00a      	b.n	8001614 <Generate_AI_Move+0xb98>
		for(int i = NUM_ROWS-1; i >= 0; i--){
 80015fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001602:	3b01      	subs	r3, #1
 8001604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800160c:	2b00      	cmp	r3, #0
 800160e:	f6bf ad74 	bge.w	80010fa <Generate_AI_Move+0x67e>
 8001612:	e000      	b.n	8001616 <Generate_AI_Move+0xb9a>
				break;
 8001614:	bf00      	nop
	for(int j = 0; j < NUM_COLS; j++){
 8001616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800161a:	3301      	adds	r3, #1
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001624:	2b06      	cmp	r3, #6
 8001626:	f77f ad64 	ble.w	80010f2 <Generate_AI_Move+0x676>
			}
		}
	}

	//Determine best position
	int best_attack = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	657b      	str	r3, [r7, #84]	@ 0x54
	for(int j = 0; j < NUM_COLS; j++){
 800162e:	2300      	movs	r3, #0
 8001630:	653b      	str	r3, [r7, #80]	@ 0x50
 8001632:	e014      	b.n	800165e <Generate_AI_Move+0xbe2>
		if(attack[j] > attack[best_attack]) best_attack = j;
 8001634:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001638:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800163c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800163e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001642:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001646:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800164a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800164c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001650:	429a      	cmp	r2, r3
 8001652:	dd01      	ble.n	8001658 <Generate_AI_Move+0xbdc>
 8001654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001656:	657b      	str	r3, [r7, #84]	@ 0x54
	for(int j = 0; j < NUM_COLS; j++){
 8001658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800165a:	3301      	adds	r3, #1
 800165c:	653b      	str	r3, [r7, #80]	@ 0x50
 800165e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001660:	2b06      	cmp	r3, #6
 8001662:	dde7      	ble.n	8001634 <Generate_AI_Move+0xbb8>
	}

	if(defense[best_defense] > attack[best_attack] && defense[best_defense] > 2) return best_defense;
 8001664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800166e:	443b      	add	r3, r7
 8001670:	f853 2cf8 	ldr.w	r2, [r3, #-248]
 8001674:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001678:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800167c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800167e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001682:	429a      	cmp	r2, r3
 8001684:	dd0c      	ble.n	80016a0 <Generate_AI_Move+0xc24>
 8001686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001690:	443b      	add	r3, r7
 8001692:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8001696:	2b02      	cmp	r3, #2
 8001698:	dd02      	ble.n	80016a0 <Generate_AI_Move+0xc24>
 800169a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800169e:	e021      	b.n	80016e4 <Generate_AI_Move+0xc68>

	if(attack[best_attack] == 0){
 80016a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80016aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d117      	bne.n	80016e2 <Generate_AI_Move+0xc66>
		int move = Generate_Random_Move(hrng);
 80016b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f7ff f9be 	bl	8000a3c <Generate_Random_Move>
 80016c0:	64f8      	str	r0, [r7, #76]	@ 0x4c
		while(move == best_defense){
 80016c2:	e007      	b.n	80016d4 <Generate_AI_Move+0xc58>
			move = Generate_Random_Move(hrng);
 80016c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	f7ff f9b5 	bl	8000a3c <Generate_Random_Move>
 80016d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		while(move == best_defense){
 80016d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016da:	429a      	cmp	r2, r3
 80016dc:	d0f2      	beq.n	80016c4 <Generate_AI_Move+0xc48>
		}
		return move;
 80016de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016e0:	e000      	b.n	80016e4 <Generate_AI_Move+0xc68>
	}

	return best_attack;
 80016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000a4 	.word	0x200000a4

080016f4 <Place_Coin>:

bool Place_Coin(int position, int player){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	if(position > 6 || position < 0) return false;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b06      	cmp	r3, #6
 8001702:	dc02      	bgt.n	800170a <Place_Coin+0x16>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da01      	bge.n	800170e <Place_Coin+0x1a>
 800170a:	2300      	movs	r3, #0
 800170c:	e024      	b.n	8001758 <Place_Coin+0x64>

	for(int i = NUM_ROWS-1; i >= 0; i--){
 800170e:	2305      	movs	r3, #5
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e01d      	b.n	8001750 <Place_Coin+0x5c>
		if(board[i][position] == 0){
 8001714:	4912      	ldr	r1, [pc, #72]	@ (8001760 <Place_Coin+0x6c>)
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <Place_Coin+0x56>
			Update_Board(i, position, player);
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff f840 	bl	80007b4 <Update_Board>
			LCD_Clear(0, LCD_COLOR_WHITE);
 8001734:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001738:	2000      	movs	r0, #0
 800173a:	f000 fff5 	bl	8002728 <LCD_Clear>
			Display_Board();
 800173e:	f7ff f803 	bl	8000748 <Display_Board>
			Display_Coins();
 8001742:	f7ff f84f 	bl	80007e4 <Display_Coins>
			return true;
 8001746:	2301      	movs	r3, #1
 8001748:	e006      	b.n	8001758 <Place_Coin+0x64>
	for(int i = NUM_ROWS-1; i >= 0; i--){
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dade      	bge.n	8001714 <Place_Coin+0x20>
		}
	}

	return false;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200000a4 	.word	0x200000a4

08001764 <Two_Player>:

void Two_Player(){
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
	turns = 0;
 800176a:	4b87      	ldr	r3, [pc, #540]	@ (8001988 <Two_Player+0x224>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
	Drop_Coin = 0;
 8001770:	4b86      	ldr	r3, [pc, #536]	@ (800198c <Two_Player+0x228>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

	while(Game_Status() == ONGOING){
 8001776:	e0fa      	b.n	800196e <Two_Player+0x20a>
		//Blue's Turn
		if(turns % 2 == 0){
 8001778:	4b83      	ldr	r3, [pc, #524]	@ (8001988 <Two_Player+0x224>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d176      	bne.n	8001872 <Two_Player+0x10e>
			int position = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
			LCD_Clear(0, LCD_COLOR_WHITE);
 8001788:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800178c:	2000      	movs	r0, #0
 800178e:	f000 ffcb 	bl	8002728 <LCD_Clear>
			Display_Board();
 8001792:	f7fe ffd9 	bl	8000748 <Display_Board>
			Display_Coins();
 8001796:	f7ff f825 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_BLUE);
 800179a:	231f      	movs	r3, #31
 800179c:	2208      	movs	r2, #8
 800179e:	2141      	movs	r1, #65	@ 0x41
 80017a0:	201e      	movs	r0, #30
 80017a2:	f000 ff1f 	bl	80025e4 <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	74fb      	strb	r3, [r7, #19]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 80017aa:	4879      	ldr	r0, [pc, #484]	@ (8001990 <Two_Player+0x22c>)
 80017ac:	f001 f8b9 	bl	8002922 <returnTouchStateAndLocation>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d12d      	bne.n	8001812 <Two_Player+0xae>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80017b6:	4b76      	ldr	r3, [pc, #472]	@ (8001990 <Two_Player+0x22c>)
 80017b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017bc:	f001 f8bd 	bl	800293a <returnTouchQuadrant>
 80017c0:	4603      	mov	r3, r0
 80017c2:	723b      	strb	r3, [r7, #8]
					if(touchedQuadrant == BOTTOM_RIGHT || touchedQuadrant == TOP_RIGHT){
 80017c4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d003      	beq.n	80017d4 <Two_Player+0x70>
 80017cc:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d10b      	bne.n	80017ec <Two_Player+0x88>
						if(position <= 0) position = 6;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dc02      	bgt.n	80017e0 <Two_Player+0x7c>
 80017da:	2306      	movs	r3, #6
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e002      	b.n	80017e6 <Two_Player+0x82>
						else position--;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]

						touched = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	74fb      	strb	r3, [r7, #19]
 80017ea:	e012      	b.n	8001812 <Two_Player+0xae>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT || touchedQuadrant == TOP_LEFT){
 80017ec:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <Two_Player+0x98>
 80017f4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d10a      	bne.n	8001812 <Two_Player+0xae>
						if(position >= 6) position = 0;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	dd02      	ble.n	8001808 <Two_Player+0xa4>
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e002      	b.n	800180e <Two_Player+0xaa>
						else position++;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]

						touched = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	74fb      	strb	r3, [r7, #19]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <Two_Player+0xe4>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8001818:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800181c:	2000      	movs	r0, #0
 800181e:	f000 ff83 	bl	8002728 <LCD_Clear>
					Display_Board();
 8001822:	f7fe ff91 	bl	8000748 <Display_Board>
					Display_Coins();
 8001826:	f7fe ffdd 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_BLUE);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b298      	uxth	r0, r3
 800183a:	231f      	movs	r3, #31
 800183c:	2208      	movs	r2, #8
 800183e:	2141      	movs	r1, #65	@ 0x41
 8001840:	f000 fed0 	bl	80025e4 <LCD_Draw_Circle_Fill>

					touched = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	74fb      	strb	r3, [r7, #19]
				}

				if(Drop_Coin){
 8001848:	4b50      	ldr	r3, [pc, #320]	@ (800198c <Two_Player+0x228>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0aa      	beq.n	80017a6 <Two_Player+0x42>
					Drop_Coin = 0;
 8001850:	4b4e      	ldr	r3, [pc, #312]	@ (800198c <Two_Player+0x228>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
					break;
 8001856:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, BLUE_PLAYER);
 8001858:	2101      	movs	r1, #1
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff4a 	bl	80016f4 <Place_Coin>
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d079      	beq.n	8001964 <Two_Player+0x200>
 8001870:	e07d      	b.n	800196e <Two_Player+0x20a>
		}

		//Red's Turn
		else{
			int position = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
			LCD_Clear(0, LCD_COLOR_WHITE);
 8001876:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800187a:	2000      	movs	r0, #0
 800187c:	f000 ff54 	bl	8002728 <LCD_Clear>
			Display_Board();
 8001880:	f7fe ff62 	bl	8000748 <Display_Board>
			Display_Coins();
 8001884:	f7fe ffae 	bl	80007e4 <Display_Coins>
			LCD_Draw_Circle_Fill(30, 65, 8, LCD_COLOR_RED);
 8001888:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800188c:	2208      	movs	r2, #8
 800188e:	2141      	movs	r1, #65	@ 0x41
 8001890:	201e      	movs	r0, #30
 8001892:	f000 fea7 	bl	80025e4 <LCD_Draw_Circle_Fill>

			//Choosing Coin Placement Routine
			while(1){
				bool touched = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	72fb      	strb	r3, [r7, #11]
				if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 800189a:	483d      	ldr	r0, [pc, #244]	@ (8001990 <Two_Player+0x22c>)
 800189c:	f001 f841 	bl	8002922 <returnTouchStateAndLocation>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d12d      	bne.n	8001902 <Two_Player+0x19e>
					LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80018a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <Two_Player+0x22c>)
 80018a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ac:	f001 f845 	bl	800293a <returnTouchQuadrant>
 80018b0:	4603      	mov	r3, r0
 80018b2:	72bb      	strb	r3, [r7, #10]
					if(touchedQuadrant == BOTTOM_RIGHT || touchedQuadrant == TOP_RIGHT){
 80018b4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d003      	beq.n	80018c4 <Two_Player+0x160>
 80018bc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d10b      	bne.n	80018dc <Two_Player+0x178>
						if(position <= 0) position = 6;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dc02      	bgt.n	80018d0 <Two_Player+0x16c>
 80018ca:	2306      	movs	r3, #6
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e002      	b.n	80018d6 <Two_Player+0x172>
						else position--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]

						touched = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	72fb      	strb	r3, [r7, #11]
 80018da:	e012      	b.n	8001902 <Two_Player+0x19e>
					}
	
					else if(touchedQuadrant == BOTTOM_LEFT || touchedQuadrant == TOP_LEFT){
 80018dc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <Two_Player+0x188>
 80018e4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d10a      	bne.n	8001902 <Two_Player+0x19e>
						if(position >= 6) position = 0;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	dd02      	ble.n	80018f8 <Two_Player+0x194>
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e002      	b.n	80018fe <Two_Player+0x19a>
						else position++;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]

						touched = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	72fb      	strb	r3, [r7, #11]
					}
				}
				
				//If user touched left or right, update coin position accordingly
				if(touched){
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d018      	beq.n	800193a <Two_Player+0x1d6>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8001908:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800190c:	2000      	movs	r0, #0
 800190e:	f000 ff0b 	bl	8002728 <LCD_Clear>
					Display_Board();
 8001912:	f7fe ff19 	bl	8000748 <Display_Board>
					Display_Coins();
 8001916:	f7fe ff65 	bl	80007e4 <Display_Coins>
					LCD_Draw_Circle_Fill(30+30*position, 65, 8, LCD_COLOR_RED);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	b298      	uxth	r0, r3
 800192a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800192e:	2208      	movs	r2, #8
 8001930:	2141      	movs	r1, #65	@ 0x41
 8001932:	f000 fe57 	bl	80025e4 <LCD_Draw_Circle_Fill>

					touched = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	72fb      	strb	r3, [r7, #11]
				}

				if(Drop_Coin){
 800193a:	4b14      	ldr	r3, [pc, #80]	@ (800198c <Two_Player+0x228>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0a9      	beq.n	8001896 <Two_Player+0x132>
					Drop_Coin = 0;
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <Two_Player+0x228>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
					break;
 8001948:	bf00      	nop
				}
			}
			
			//Place Coin Routine
			bool valid = Place_Coin(position, RED_PLAYER);
 800194a:	2102      	movs	r1, #2
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fed1 	bl	80016f4 <Place_Coin>
 8001952:	4603      	mov	r3, r0
 8001954:	727b      	strb	r3, [r7, #9]
			
			//If move is not valid, continue on user's turn
			if(!valid) continue;
 8001956:	7a7b      	ldrb	r3, [r7, #9]
 8001958:	f083 0301 	eor.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d000      	beq.n	8001964 <Two_Player+0x200>
 8001962:	e004      	b.n	800196e <Two_Player+0x20a>
		}
		turns++;
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <Two_Player+0x224>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <Two_Player+0x224>)
 800196c:	6013      	str	r3, [r2, #0]
	while(Game_Status() == ONGOING){
 800196e:	f000 f811 	bl	8001994 <Game_Status>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f43f aeff 	beq.w	8001778 <Two_Player+0x14>
	}
	addSchedulerEvent(DISPLAY_RESULTS_EVENT);
 800197a:	2020      	movs	r0, #32
 800197c:	f001 f880 	bl	8002a80 <addSchedulerEvent>
}
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000158 	.word	0x20000158
 800198c:	2000015c 	.word	0x2000015c
 8001990:	2000009c 	.word	0x2000009c

08001994 <Game_Status>:

GAME_RESULT Game_Status(){
 8001994:	b490      	push	{r4, r7}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
	//Check for wins in each position
	for(int i = 0; i < NUM_ROWS; i++){
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e22d      	b.n	8001dfc <Game_Status+0x468>
		for(int j = 0; j < NUM_COLS; j++){
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	e223      	b.n	8001dee <Game_Status+0x45a>
			//If curr position is 0, don't check it
			if(board[i][j] != 0){
 80019a6:	49b4      	ldr	r1, [pc, #720]	@ (8001c78 <Game_Status+0x2e4>)
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8215 	beq.w	8001de8 <Game_Status+0x454>
				//Horizomtal win (only check if it won't exceed dimensions)
				if(j+3 < NUM_COLS){
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	dc4f      	bgt.n	8001a64 <Game_Status+0xd0>
					if(board[i][j] == board[i][j+1] && board[i][j+1] == board[i][j+2] && board[i][j+2] == board[i][j+3]){
 80019c4:	49ac      	ldr	r1, [pc, #688]	@ (8001c78 <Game_Status+0x2e4>)
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1c58      	adds	r0, r3, #1
 80019da:	4ca7      	ldr	r4, [pc, #668]	@ (8001c78 <Game_Status+0x2e4>)
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	4403      	add	r3, r0
 80019e6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80019ea:	4299      	cmp	r1, r3
 80019ec:	d13a      	bne.n	8001a64 <Game_Status+0xd0>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c59      	adds	r1, r3, #1
 80019f2:	48a1      	ldr	r0, [pc, #644]	@ (8001c78 <Game_Status+0x2e4>)
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c98      	adds	r0, r3, #2
 8001a06:	4c9c      	ldr	r4, [pc, #624]	@ (8001c78 <Game_Status+0x2e4>)
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	4403      	add	r3, r0
 8001a12:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001a16:	4299      	cmp	r1, r3
 8001a18:	d124      	bne.n	8001a64 <Game_Status+0xd0>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1c99      	adds	r1, r3, #2
 8001a1e:	4896      	ldr	r0, [pc, #600]	@ (8001c78 <Game_Status+0x2e4>)
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1cd8      	adds	r0, r3, #3
 8001a32:	4c91      	ldr	r4, [pc, #580]	@ (8001c78 <Game_Status+0x2e4>)
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	4403      	add	r3, r0
 8001a3e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001a42:	4299      	cmp	r1, r3
 8001a44:	d10e      	bne.n	8001a64 <Game_Status+0xd0>
						if(board[i][j] == 1) return BLUE_WINS;
 8001a46:	498c      	ldr	r1, [pc, #560]	@ (8001c78 <Game_Status+0x2e4>)
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <Game_Status+0xcc>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e1f1      	b.n	8001e44 <Game_Status+0x4b0>
						else return RED_WINS;
 8001a60:	2302      	movs	r3, #2
 8001a62:	e1ef      	b.n	8001e44 <Game_Status+0x4b0>
					}
				}

				//Vertical win (only check if it won't exceed dimensions)
				if(i+3 < NUM_ROWS){
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	dc4f      	bgt.n	8001b0a <Game_Status+0x176>
					if(board[i][j] == board[i+1][j] && board[i+1][j] == board[i+2][j] && board[i+2][j] == board[i+3][j]){
 8001a6a:	4983      	ldr	r1, [pc, #524]	@ (8001c78 <Game_Status+0x2e4>)
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	487d      	ldr	r0, [pc, #500]	@ (8001c78 <Game_Status+0x2e4>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a90:	4299      	cmp	r1, r3
 8001a92:	d13a      	bne.n	8001b0a <Game_Status+0x176>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	4977      	ldr	r1, [pc, #476]	@ (8001c78 <Game_Status+0x2e4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1c9a      	adds	r2, r3, #2
 8001aac:	4872      	ldr	r0, [pc, #456]	@ (8001c78 <Game_Status+0x2e4>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001abc:	4299      	cmp	r1, r3
 8001abe:	d124      	bne.n	8001b0a <Game_Status+0x176>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1c9a      	adds	r2, r3, #2
 8001ac4:	496c      	ldr	r1, [pc, #432]	@ (8001c78 <Game_Status+0x2e4>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1cda      	adds	r2, r3, #3
 8001ad8:	4867      	ldr	r0, [pc, #412]	@ (8001c78 <Game_Status+0x2e4>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	d10e      	bne.n	8001b0a <Game_Status+0x176>
						if(board[i][j] == 1) return BLUE_WINS;
 8001aec:	4962      	ldr	r1, [pc, #392]	@ (8001c78 <Game_Status+0x2e4>)
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <Game_Status+0x172>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e19e      	b.n	8001e44 <Game_Status+0x4b0>
						else return RED_WINS;
 8001b06:	2302      	movs	r3, #2
 8001b08:	e19c      	b.n	8001e44 <Game_Status+0x4b0>
				}

				//Diagonal win (only check if it won't exceed dimensions)
				//4 different diagonals to check
				//Bottom-right diagonal
				if(i+3 < NUM_ROWS && j+3 < NUM_COLS){////////////////
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	dc57      	bgt.n	8001bc0 <Game_Status+0x22c>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	dc54      	bgt.n	8001bc0 <Game_Status+0x22c>
					if(board[i][j] == board[i+1][j+1] && board[i+1][j+1] == board[i+2][j+2] && board[i+2][j+2] == board[i+3][j+3]){
 8001b16:	4958      	ldr	r1, [pc, #352]	@ (8001c78 <Game_Status+0x2e4>)
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	4413      	add	r3, r2
 8001b24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c58      	adds	r0, r3, #1
 8001b30:	4c51      	ldr	r4, [pc, #324]	@ (8001c78 <Game_Status+0x2e4>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	4403      	add	r3, r0
 8001b3a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001b3e:	4299      	cmp	r1, r3
 8001b40:	d13e      	bne.n	8001bc0 <Game_Status+0x22c>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1c59      	adds	r1, r3, #1
 8001b4a:	484b      	ldr	r0, [pc, #300]	@ (8001c78 <Game_Status+0x2e4>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1c9a      	adds	r2, r3, #2
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c98      	adds	r0, r3, #2
 8001b60:	4c45      	ldr	r4, [pc, #276]	@ (8001c78 <Game_Status+0x2e4>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	4403      	add	r3, r0
 8001b6a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001b6e:	4299      	cmp	r1, r3
 8001b70:	d126      	bne.n	8001bc0 <Game_Status+0x22c>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1c9a      	adds	r2, r3, #2
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c99      	adds	r1, r3, #2
 8001b7a:	483f      	ldr	r0, [pc, #252]	@ (8001c78 <Game_Status+0x2e4>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1cda      	adds	r2, r3, #3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1cd8      	adds	r0, r3, #3
 8001b90:	4c39      	ldr	r4, [pc, #228]	@ (8001c78 <Game_Status+0x2e4>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	4403      	add	r3, r0
 8001b9a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001b9e:	4299      	cmp	r1, r3
 8001ba0:	d10e      	bne.n	8001bc0 <Game_Status+0x22c>
						if(board[i][j] == 1) return BLUE_WINS;
 8001ba2:	4935      	ldr	r1, [pc, #212]	@ (8001c78 <Game_Status+0x2e4>)
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <Game_Status+0x228>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e143      	b.n	8001e44 <Game_Status+0x4b0>
						else return RED_WINS;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e141      	b.n	8001e44 <Game_Status+0x4b0>
					}
				}

				//Top-right diagonal
				if(i+3 < NUM_ROWS && j-3 >= 0){
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	dc5a      	bgt.n	8001c7c <Game_Status+0x2e8>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	dd57      	ble.n	8001c7c <Game_Status+0x2e8>
					if(board[i][j] == board[i+1][j-1] && board[i+1][j-1] == board[i+2][j-2] && board[i+2][j-2] == board[i+3][j-3]){
 8001bcc:	492a      	ldr	r1, [pc, #168]	@ (8001c78 <Game_Status+0x2e4>)
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1e58      	subs	r0, r3, #1
 8001be6:	4c24      	ldr	r4, [pc, #144]	@ (8001c78 <Game_Status+0x2e4>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	4403      	add	r3, r0
 8001bf0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001bf4:	4299      	cmp	r1, r3
 8001bf6:	d141      	bne.n	8001c7c <Game_Status+0x2e8>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1e59      	subs	r1, r3, #1
 8001c00:	481d      	ldr	r0, [pc, #116]	@ (8001c78 <Game_Status+0x2e4>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1c9a      	adds	r2, r3, #2
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1e98      	subs	r0, r3, #2
 8001c16:	4c18      	ldr	r4, [pc, #96]	@ (8001c78 <Game_Status+0x2e4>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	4403      	add	r3, r0
 8001c20:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001c24:	4299      	cmp	r1, r3
 8001c26:	d129      	bne.n	8001c7c <Game_Status+0x2e8>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1c9a      	adds	r2, r3, #2
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1e99      	subs	r1, r3, #2
 8001c30:	4811      	ldr	r0, [pc, #68]	@ (8001c78 <Game_Status+0x2e4>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1cda      	adds	r2, r3, #3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ed8      	subs	r0, r3, #3
 8001c46:	4c0c      	ldr	r4, [pc, #48]	@ (8001c78 <Game_Status+0x2e4>)
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	4403      	add	r3, r0
 8001c50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001c54:	4299      	cmp	r1, r3
 8001c56:	d111      	bne.n	8001c7c <Game_Status+0x2e8>
						if(board[i][j] == 1) return BLUE_WINS;
 8001c58:	4907      	ldr	r1, [pc, #28]	@ (8001c78 <Game_Status+0x2e4>)
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <Game_Status+0x2de>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0e8      	b.n	8001e44 <Game_Status+0x4b0>
						else return RED_WINS;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0e6      	b.n	8001e44 <Game_Status+0x4b0>
 8001c76:	bf00      	nop
 8001c78:	200000a4 	.word	0x200000a4
					}
				}

				//Bottom-left diagonal
				if(i-3 >= 0 && j+3 < NUM_COLS){
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	dd57      	ble.n	8001d32 <Game_Status+0x39e>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	dc54      	bgt.n	8001d32 <Game_Status+0x39e>
					if(board[i][j] == board[i-1][j+1] && board[i-1][j+1] == board[i-2][j+2] && board[i-2][j+2] == board[i-3][j+3]){
 8001c88:	4971      	ldr	r1, [pc, #452]	@ (8001e50 <Game_Status+0x4bc>)
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	4c6b      	ldr	r4, [pc, #428]	@ (8001e50 <Game_Status+0x4bc>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	4403      	add	r3, r0
 8001cac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001cb0:	4299      	cmp	r1, r3
 8001cb2:	d13e      	bne.n	8001d32 <Game_Status+0x39e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c59      	adds	r1, r3, #1
 8001cbc:	4864      	ldr	r0, [pc, #400]	@ (8001e50 <Game_Status+0x4bc>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1e9a      	subs	r2, r3, #2
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c98      	adds	r0, r3, #2
 8001cd2:	4c5f      	ldr	r4, [pc, #380]	@ (8001e50 <Game_Status+0x4bc>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	4403      	add	r3, r0
 8001cdc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d126      	bne.n	8001d32 <Game_Status+0x39e>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e9a      	subs	r2, r3, #2
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c99      	adds	r1, r3, #2
 8001cec:	4858      	ldr	r0, [pc, #352]	@ (8001e50 <Game_Status+0x4bc>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1eda      	subs	r2, r3, #3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1cd8      	adds	r0, r3, #3
 8001d02:	4c53      	ldr	r4, [pc, #332]	@ (8001e50 <Game_Status+0x4bc>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001d10:	4299      	cmp	r1, r3
 8001d12:	d10e      	bne.n	8001d32 <Game_Status+0x39e>
						if(board[i][j] == 1) return BLUE_WINS;
 8001d14:	494e      	ldr	r1, [pc, #312]	@ (8001e50 <Game_Status+0x4bc>)
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <Game_Status+0x39a>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e08a      	b.n	8001e44 <Game_Status+0x4b0>
						else return RED_WINS;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e088      	b.n	8001e44 <Game_Status+0x4b0>
					}
				}

				//Top-left diagonal
				if(i-3 >= 0 && j-3 >= 0){
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	dd57      	ble.n	8001de8 <Game_Status+0x454>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	dd54      	ble.n	8001de8 <Game_Status+0x454>
					if(board[i][j] == board[i-1][j-1] && board[i-1][j-1] == board[i-2][j-2] && board[i-2][j-2] == board[i-3][j-3]){
 8001d3e:	4944      	ldr	r1, [pc, #272]	@ (8001e50 <Game_Status+0x4bc>)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	4c3d      	ldr	r4, [pc, #244]	@ (8001e50 <Game_Status+0x4bc>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	4403      	add	r3, r0
 8001d62:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001d66:	4299      	cmp	r1, r3
 8001d68:	d13e      	bne.n	8001de8 <Game_Status+0x454>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1e59      	subs	r1, r3, #1
 8001d72:	4837      	ldr	r0, [pc, #220]	@ (8001e50 <Game_Status+0x4bc>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e9a      	subs	r2, r3, #2
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1e98      	subs	r0, r3, #2
 8001d88:	4c31      	ldr	r4, [pc, #196]	@ (8001e50 <Game_Status+0x4bc>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	4403      	add	r3, r0
 8001d92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001d96:	4299      	cmp	r1, r3
 8001d98:	d126      	bne.n	8001de8 <Game_Status+0x454>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e9a      	subs	r2, r3, #2
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1e99      	subs	r1, r3, #2
 8001da2:	482b      	ldr	r0, [pc, #172]	@ (8001e50 <Game_Status+0x4bc>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1eda      	subs	r2, r3, #3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1ed8      	subs	r0, r3, #3
 8001db8:	4c25      	ldr	r4, [pc, #148]	@ (8001e50 <Game_Status+0x4bc>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	4403      	add	r3, r0
 8001dc2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	d10e      	bne.n	8001de8 <Game_Status+0x454>
						if(board[i][j] == 1) return BLUE_WINS;
 8001dca:	4921      	ldr	r1, [pc, #132]	@ (8001e50 <Game_Status+0x4bc>)
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <Game_Status+0x450>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e02f      	b.n	8001e44 <Game_Status+0x4b0>
						else return RED_WINS;
 8001de4:	2302      	movs	r3, #2
 8001de6:	e02d      	b.n	8001e44 <Game_Status+0x4b0>
		for(int j = 0; j < NUM_COLS; j++){
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	3301      	adds	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b06      	cmp	r3, #6
 8001df2:	f77f add8 	ble.w	80019a6 <Game_Status+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	f77f adce 	ble.w	80019a0 <Game_Status+0xc>
			
		}
	}

	//Check for tie (board is full)
	for(int i = 0; i < NUM_ROWS; i++){
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	e018      	b.n	8001e3c <Game_Status+0x4a8>
		for(int j = 0; j < NUM_COLS; j++){
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	e00f      	b.n	8001e30 <Game_Status+0x49c>
			if(board[i][j] == 0) return ONGOING;
 8001e10:	490f      	ldr	r1, [pc, #60]	@ (8001e50 <Game_Status+0x4bc>)
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <Game_Status+0x496>
 8001e26:	2300      	movs	r3, #0
 8001e28:	e00c      	b.n	8001e44 <Game_Status+0x4b0>
		for(int j = 0; j < NUM_COLS; j++){
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	ddec      	ble.n	8001e10 <Game_Status+0x47c>
	for(int i = 0; i < NUM_ROWS; i++){
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	dde3      	ble.n	8001e0a <Game_Status+0x476>
		}
	}
	return TIE;
 8001e42:	2303      	movs	r3, #3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc90      	pop	{r4, r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200000a4 	.word	0x200000a4

08001e54 <Display_Results>:

void Display_Results(int seconds){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0a2      	sub	sp, #136	@ 0x88
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	GAME_RESULT result = Game_Status();
 8001e5c:	f7ff fd9a 	bl	8001994 <Game_Status>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	if(result == BLUE_WINS) num_blue_victories++;
 8001e66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <Display_Results+0x26>
 8001e6e:	4b95      	ldr	r3, [pc, #596]	@ (80020c4 <Display_Results+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	4a93      	ldr	r2, [pc, #588]	@ (80020c4 <Display_Results+0x270>)
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e012      	b.n	8001ea0 <Display_Results+0x4c>
	else if (result == RED_WINS) num_red_victories++;
 8001e7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d105      	bne.n	8001e8e <Display_Results+0x3a>
 8001e82:	4b91      	ldr	r3, [pc, #580]	@ (80020c8 <Display_Results+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a8f      	ldr	r2, [pc, #572]	@ (80020c8 <Display_Results+0x274>)
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e008      	b.n	8001ea0 <Display_Results+0x4c>
	else if (result == TIE) num_ties++;
 8001e8e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d104      	bne.n	8001ea0 <Display_Results+0x4c>
 8001e96:	4b8d      	ldr	r3, [pc, #564]	@ (80020cc <Display_Results+0x278>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4a8b      	ldr	r2, [pc, #556]	@ (80020cc <Display_Results+0x278>)
 8001e9e:	6013      	str	r3, [r2, #0]

	switch(result){
 8001ea0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d019      	beq.n	8001edc <Display_Results+0x88>
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	dc20      	bgt.n	8001eee <Display_Results+0x9a>
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d002      	beq.n	8001eb6 <Display_Results+0x62>
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d009      	beq.n	8001ec8 <Display_Results+0x74>
 8001eb4:	e01b      	b.n	8001eee <Display_Results+0x9a>
		case BLUE_WINS:
			LCD_SetTextColor(LCD_COLOR_BLUE);
 8001eb6:	201f      	movs	r0, #31
 8001eb8:	f000 fc58 	bl	800276c <LCD_SetTextColor>
			LCD_DisplayChar(65, 10, "Blue Wins!");
 8001ebc:	4a84      	ldr	r2, [pc, #528]	@ (80020d0 <Display_Results+0x27c>)
 8001ebe:	210a      	movs	r1, #10
 8001ec0:	2041      	movs	r0, #65	@ 0x41
 8001ec2:	f000 fce1 	bl	8002888 <LCD_DisplayChar>
			break;
 8001ec6:	e01b      	b.n	8001f00 <Display_Results+0xac>
		case RED_WINS:
			LCD_SetTextColor(LCD_COLOR_RED);
 8001ec8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001ecc:	f000 fc4e 	bl	800276c <LCD_SetTextColor>
			LCD_DisplayChar(70, 10, "Red Wins!");
 8001ed0:	4a80      	ldr	r2, [pc, #512]	@ (80020d4 <Display_Results+0x280>)
 8001ed2:	210a      	movs	r1, #10
 8001ed4:	2046      	movs	r0, #70	@ 0x46
 8001ed6:	f000 fcd7 	bl	8002888 <LCD_DisplayChar>
			break;
 8001eda:	e011      	b.n	8001f00 <Display_Results+0xac>
		case TIE:
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 fc45 	bl	800276c <LCD_SetTextColor>
			LCD_DisplayChar(60, 10, "It's a tie!");
 8001ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80020d8 <Display_Results+0x284>)
 8001ee4:	210a      	movs	r1, #10
 8001ee6:	203c      	movs	r0, #60	@ 0x3c
 8001ee8:	f000 fcce 	bl	8002888 <LCD_DisplayChar>
			break;
 8001eec:	e008      	b.n	8001f00 <Display_Results+0xac>
		default:
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 fc3c 	bl	800276c <LCD_SetTextColor>
			LCD_DisplayChar(80, 10, "Unknown erorr :(");
 8001ef4:	4a79      	ldr	r2, [pc, #484]	@ (80020dc <Display_Results+0x288>)
 8001ef6:	210a      	movs	r1, #10
 8001ef8:	2050      	movs	r0, #80	@ 0x50
 8001efa:	f000 fcc5 	bl	8002888 <LCD_DisplayChar>
			break;
 8001efe:	bf00      	nop
	}
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 fc33 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(65, 45, "Show stats");
 8001f06:	4a76      	ldr	r2, [pc, #472]	@ (80020e0 <Display_Results+0x28c>)
 8001f08:	212d      	movs	r1, #45	@ 0x2d
 8001f0a:	2041      	movs	r0, #65	@ 0x41
 8001f0c:	f000 fcbc 	bl	8002888 <LCD_DisplayChar>

	//Wait for user to click show stats
	while(1){
		if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8001f10:	4874      	ldr	r0, [pc, #464]	@ (80020e4 <Display_Results+0x290>)
 8001f12:	f000 fd06 	bl	8002922 <returnTouchStateAndLocation>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f9      	bne.n	8001f10 <Display_Results+0xbc>
			LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 8001f1c:	4b71      	ldr	r3, [pc, #452]	@ (80020e4 <Display_Results+0x290>)
 8001f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f22:	f000 fd0a 	bl	800293a <returnTouchQuadrant>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			if(touchedQuadrant == BOTTOM_LEFT || touchedQuadrant == BOTTOM_RIGHT) break;
 8001f2c:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <Display_Results+0xea>
 8001f34:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d000      	beq.n	8001f3e <Display_Results+0xea>
		if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 8001f3c:	e7e8      	b.n	8001f10 <Display_Results+0xbc>
		}
	}

	LCD_Clear(0, LCD_COLOR_WHITE);
 8001f3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 fbf0 	bl	8002728 <LCD_Clear>

	char str_blue_wins[20];
	sprintf(str_blue_wins, "%d", num_blue_victories);
 8001f48:	4b5e      	ldr	r3, [pc, #376]	@ (80020c4 <Display_Results+0x270>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f50:	4965      	ldr	r1, [pc, #404]	@ (80020e8 <Display_Results+0x294>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 fb30 	bl	80085b8 <siprintf>

	char str_red_wins[20];
	sprintf(str_red_wins, "%d", num_red_victories);
 8001f58:	4b5b      	ldr	r3, [pc, #364]	@ (80020c8 <Display_Results+0x274>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f60:	4961      	ldr	r1, [pc, #388]	@ (80020e8 <Display_Results+0x294>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 fb28 	bl	80085b8 <siprintf>

	char str_ties[20];
	sprintf(str_ties, "%d", num_ties);
 8001f68:	4b58      	ldr	r3, [pc, #352]	@ (80020cc <Display_Results+0x278>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f70:	495d      	ldr	r1, [pc, #372]	@ (80020e8 <Display_Results+0x294>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f006 fb20 	bl	80085b8 <siprintf>

	int num_games = num_blue_victories + num_red_victories + num_ties;
 8001f78:	4b52      	ldr	r3, [pc, #328]	@ (80020c4 <Display_Results+0x270>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b52      	ldr	r3, [pc, #328]	@ (80020c8 <Display_Results+0x274>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	441a      	add	r2, r3
 8001f82:	4b52      	ldr	r3, [pc, #328]	@ (80020cc <Display_Results+0x278>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	char str_games[20];
	sprintf(str_games, "%d", num_games);
 8001f8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f94:	4954      	ldr	r1, [pc, #336]	@ (80020e8 <Display_Results+0x294>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f006 fb0e 	bl	80085b8 <siprintf>

	char str_seconds[20];
	sprintf(str_seconds, "%d", seconds);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4951      	ldr	r1, [pc, #324]	@ (80020e8 <Display_Results+0x294>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f006 fb07 	bl	80085b8 <siprintf>

	char str_turns[20];
	sprintf(str_turns, "%d", turns);
 8001faa:	4b50      	ldr	r3, [pc, #320]	@ (80020ec <Display_Results+0x298>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	494d      	ldr	r1, [pc, #308]	@ (80020e8 <Display_Results+0x294>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f006 faff 	bl	80085b8 <siprintf>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 fbd6 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(5, 10, "Total games played: ");
 8001fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80020f0 <Display_Results+0x29c>)
 8001fc2:	210a      	movs	r1, #10
 8001fc4:	2005      	movs	r0, #5
 8001fc6:	f000 fc5f 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(200, 10, str_games);
 8001fca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fce:	461a      	mov	r2, r3
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	20c8      	movs	r0, #200	@ 0xc8
 8001fd4:	f000 fc58 	bl	8002888 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_BLUE);
 8001fd8:	201f      	movs	r0, #31
 8001fda:	f000 fbc7 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(5, 40, "Blue won ");
 8001fde:	4a45      	ldr	r2, [pc, #276]	@ (80020f4 <Display_Results+0x2a0>)
 8001fe0:	2128      	movs	r1, #40	@ 0x28
 8001fe2:	2005      	movs	r0, #5
 8001fe4:	f000 fc50 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(93, 40, str_blue_wins);
 8001fe8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fec:	461a      	mov	r2, r3
 8001fee:	2128      	movs	r1, #40	@ 0x28
 8001ff0:	205d      	movs	r0, #93	@ 0x5d
 8001ff2:	f000 fc49 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(110, 40, "games");
 8001ff6:	4a40      	ldr	r2, [pc, #256]	@ (80020f8 <Display_Results+0x2a4>)
 8001ff8:	2128      	movs	r1, #40	@ 0x28
 8001ffa:	206e      	movs	r0, #110	@ 0x6e
 8001ffc:	f000 fc44 	bl	8002888 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8002000:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002004:	f000 fbb2 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(5, 70, "Red won ");
 8002008:	4a3c      	ldr	r2, [pc, #240]	@ (80020fc <Display_Results+0x2a8>)
 800200a:	2146      	movs	r1, #70	@ 0x46
 800200c:	2005      	movs	r0, #5
 800200e:	f000 fc3b 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(93, 70, str_red_wins);
 8002012:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002016:	461a      	mov	r2, r3
 8002018:	2146      	movs	r1, #70	@ 0x46
 800201a:	205d      	movs	r0, #93	@ 0x5d
 800201c:	f000 fc34 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(110, 70, "games");
 8002020:	4a35      	ldr	r2, [pc, #212]	@ (80020f8 <Display_Results+0x2a4>)
 8002022:	2146      	movs	r1, #70	@ 0x46
 8002024:	206e      	movs	r0, #110	@ 0x6e
 8002026:	f000 fc2f 	bl	8002888 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 fb9e 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(5, 100, str_ties);
 8002030:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002034:	461a      	mov	r2, r3
 8002036:	2164      	movs	r1, #100	@ 0x64
 8002038:	2005      	movs	r0, #5
 800203a:	f000 fc25 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(20, 100, "games ended in a tie");
 800203e:	4a30      	ldr	r2, [pc, #192]	@ (8002100 <Display_Results+0x2ac>)
 8002040:	2164      	movs	r1, #100	@ 0x64
 8002042:	2014      	movs	r0, #20
 8002044:	f000 fc20 	bl	8002888 <LCD_DisplayChar>

	LCD_DisplayChar(5, 130, "This game took ");
 8002048:	4a2e      	ldr	r2, [pc, #184]	@ (8002104 <Display_Results+0x2b0>)
 800204a:	2182      	movs	r1, #130	@ 0x82
 800204c:	2005      	movs	r0, #5
 800204e:	f000 fc1b 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(160, 130, str_seconds);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	461a      	mov	r2, r3
 8002058:	2182      	movs	r1, #130	@ 0x82
 800205a:	20a0      	movs	r0, #160	@ 0xa0
 800205c:	f000 fc14 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(155, 150, "seconds");
 8002060:	4a29      	ldr	r2, [pc, #164]	@ (8002108 <Display_Results+0x2b4>)
 8002062:	2196      	movs	r1, #150	@ 0x96
 8002064:	209b      	movs	r0, #155	@ 0x9b
 8002066:	f000 fc0f 	bl	8002888 <LCD_DisplayChar>

	LCD_DisplayChar(5, 170, "and");
 800206a:	4a28      	ldr	r2, [pc, #160]	@ (800210c <Display_Results+0x2b8>)
 800206c:	21aa      	movs	r1, #170	@ 0xaa
 800206e:	2005      	movs	r0, #5
 8002070:	f000 fc0a 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(50, 170, str_turns);
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	461a      	mov	r2, r3
 800207a:	21aa      	movs	r1, #170	@ 0xaa
 800207c:	2032      	movs	r0, #50	@ 0x32
 800207e:	f000 fc03 	bl	8002888 <LCD_DisplayChar>
	LCD_DisplayChar(80, 170, "turns!");
 8002082:	4a23      	ldr	r2, [pc, #140]	@ (8002110 <Display_Results+0x2bc>)
 8002084:	21aa      	movs	r1, #170	@ 0xaa
 8002086:	2050      	movs	r0, #80	@ 0x50
 8002088:	f000 fbfe 	bl	8002888 <LCD_DisplayChar>

	LCD_DisplayChar(10, 200, "Play another game?");
 800208c:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <Display_Results+0x2c0>)
 800208e:	21c8      	movs	r1, #200	@ 0xc8
 8002090:	200a      	movs	r0, #10
 8002092:	f000 fbf9 	bl	8002888 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8002096:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800209a:	f000 fb67 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(20, 250, "No");
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <Display_Results+0x2c4>)
 80020a0:	21fa      	movs	r1, #250	@ 0xfa
 80020a2:	2014      	movs	r0, #20
 80020a4:	f000 fbf0 	bl	8002888 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_GREEN);
 80020a8:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80020ac:	f000 fb5e 	bl	800276c <LCD_SetTextColor>
	LCD_DisplayChar(190, 250, "Yes");
 80020b0:	4a1a      	ldr	r2, [pc, #104]	@ (800211c <Display_Results+0x2c8>)
 80020b2:	21fa      	movs	r1, #250	@ 0xfa
 80020b4:	20be      	movs	r0, #190	@ 0xbe
 80020b6:	f000 fbe7 	bl	8002888 <LCD_DisplayChar>
}
 80020ba:	bf00      	nop
 80020bc:	3788      	adds	r7, #136	@ 0x88
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000014c 	.word	0x2000014c
 80020c8:	20000150 	.word	0x20000150
 80020cc:	20000154 	.word	0x20000154
 80020d0:	08009234 	.word	0x08009234
 80020d4:	08009240 	.word	0x08009240
 80020d8:	0800924c 	.word	0x0800924c
 80020dc:	08009258 	.word	0x08009258
 80020e0:	0800926c 	.word	0x0800926c
 80020e4:	2000009c 	.word	0x2000009c
 80020e8:	08009278 	.word	0x08009278
 80020ec:	20000158 	.word	0x20000158
 80020f0:	0800927c 	.word	0x0800927c
 80020f4:	08009294 	.word	0x08009294
 80020f8:	080092a0 	.word	0x080092a0
 80020fc:	080092a8 	.word	0x080092a8
 8002100:	080092b4 	.word	0x080092b4
 8002104:	080092cc 	.word	0x080092cc
 8002108:	080092dc 	.word	0x080092dc
 800210c:	080092e4 	.word	0x080092e4
 8002110:	080092e8 	.word	0x080092e8
 8002114:	080092f0 	.word	0x080092f0
 8002118:	08009304 	.word	0x08009304
 800211c:	08009308 	.word	0x08009308

08002120 <Display_Quit_Screen>:

void Display_Quit_Screen(){
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002124:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002128:	2000      	movs	r0, #0
 800212a:	f000 fafd 	bl	8002728 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800212e:	2000      	movs	r0, #0
 8002130:	f000 fb1c 	bl	800276c <LCD_SetTextColor>

	LCD_DisplayChar(20, 80, "See you next time!");
 8002134:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <Display_Quit_Screen+0x84>)
 8002136:	2150      	movs	r1, #80	@ 0x50
 8002138:	2014      	movs	r0, #20
 800213a:	f000 fba5 	bl	8002888 <LCD_DisplayChar>
	
	LCD_DisplayChar(0, 170, "Terminating program");
 800213e:	4a1a      	ldr	r2, [pc, #104]	@ (80021a8 <Display_Quit_Screen+0x88>)
 8002140:	21aa      	movs	r1, #170	@ 0xaa
 8002142:	2000      	movs	r0, #0
 8002144:	f000 fba0 	bl	8002888 <LCD_DisplayChar>
	HAL_Delay(750);
 8002148:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800214c:	f002 fb0c 	bl	8004768 <HAL_Delay>

	LCD_DisplayChar(0, 170, "Terminating program.");
 8002150:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <Display_Quit_Screen+0x8c>)
 8002152:	21aa      	movs	r1, #170	@ 0xaa
 8002154:	2000      	movs	r0, #0
 8002156:	f000 fb97 	bl	8002888 <LCD_DisplayChar>
	HAL_Delay(750);
 800215a:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800215e:	f002 fb03 	bl	8004768 <HAL_Delay>

	LCD_DisplayChar(0, 170, "Terminating program..");
 8002162:	4a13      	ldr	r2, [pc, #76]	@ (80021b0 <Display_Quit_Screen+0x90>)
 8002164:	21aa      	movs	r1, #170	@ 0xaa
 8002166:	2000      	movs	r0, #0
 8002168:	f000 fb8e 	bl	8002888 <LCD_DisplayChar>
	HAL_Delay(750);
 800216c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002170:	f002 fafa 	bl	8004768 <HAL_Delay>

	LCD_DisplayChar(0, 170, "Terminating program...");
 8002174:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <Display_Quit_Screen+0x94>)
 8002176:	21aa      	movs	r1, #170	@ 0xaa
 8002178:	2000      	movs	r0, #0
 800217a:	f000 fb85 	bl	8002888 <LCD_DisplayChar>
	HAL_Delay(750);
 800217e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002182:	f002 faf1 	bl	8004768 <HAL_Delay>

	LCD_DisplayChar(50, 200, "Goodbye!");
 8002186:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <Display_Quit_Screen+0x98>)
 8002188:	21c8      	movs	r1, #200	@ 0xc8
 800218a:	2032      	movs	r0, #50	@ 0x32
 800218c:	f000 fb7c 	bl	8002888 <LCD_DisplayChar>
	HAL_Delay(750);
 8002190:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002194:	f002 fae8 	bl	8004768 <HAL_Delay>

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002198:	2100      	movs	r1, #0
 800219a:	2000      	movs	r0, #0
 800219c:	f000 fac4 	bl	8002728 <LCD_Clear>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	0800930c 	.word	0x0800930c
 80021a8:	08009320 	.word	0x08009320
 80021ac:	08009334 	.word	0x08009334
 80021b0:	0800934c 	.word	0x0800934c
 80021b4:	08009364 	.word	0x08009364
 80021b8:	0800937c 	.word	0x0800937c

080021bc <Reset_Board>:

void Reset_Board(){
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	e015      	b.n	80021f4 <Reset_Board+0x38>
		for(int j = 0; j < NUM_COLS; j++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	e00c      	b.n	80021e8 <Reset_Board+0x2c>
			board[i][j] = 0;
 80021ce:	490e      	ldr	r1, [pc, #56]	@ (8002208 <Reset_Board+0x4c>)
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j = 0; j < NUM_COLS; j++){
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	ddef      	ble.n	80021ce <Reset_Board+0x12>
	for(int i = 0; i < NUM_ROWS; i++){
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3301      	adds	r3, #1
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	dde6      	ble.n	80021c8 <Reset_Board+0xc>
		}
	}
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	200000a4 	.word	0x200000a4

0800220c <EXTI0_IRQHandler>:
	num_blue_victories = 0;
	num_red_victories = 0;
	num_ties = 0;
}

void EXTI0_IRQHandler(){ //Button Interrupt Handler
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	DisableInterrupt(EXTI0_IRQ_NUMBER);
 8002210:	2006      	movs	r0, #6
 8002212:	f000 f845 	bl	80022a0 <DisableInterrupt>
	
	Drop_Coin = 1;
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <EXTI0_IRQHandler+0x20>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]

	ClearPendingEXTIBit(1 << GPIOA_PORT_NUMBER);
 800221c:	2001      	movs	r0, #1
 800221e:	f000 f84d 	bl	80022bc <ClearPendingEXTIBit>
	EnableInterrupt(EXTI0_IRQ_NUMBER);
 8002222:	2006      	movs	r0, #6
 8002224:	f000 f82e 	bl	8002284 <EnableInterrupt>
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000015c 	.word	0x2000015c

08002230 <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef button;

	button.Pin = GPIO_PIN_0;
 8002236:	2301      	movs	r3, #1
 8002238:	607b      	str	r3, [r7, #4]
	button.Mode = GPIO_MODE_IT_RISING;
 800223a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800223e:	60bb      	str	r3, [r7, #8]
	button.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <Button_Init+0x4c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <Button_Init+0x4c>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6313      	str	r3, [r2, #48]	@ 0x30
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <Button_Init+0x4c>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &button);
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <Button_Init+0x50>)
 800226a:	f002 fbe5 	bl	8004a38 <HAL_GPIO_Init>
	EnableInterrupt(EXTI0_IRQ_NUMBER);
 800226e:	2006      	movs	r0, #6
 8002270:	f000 f808 	bl	8002284 <EnableInterrupt>
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000

08002284 <EnableInterrupt>:
#include "InterruptControl.h"

void EnableInterrupt(IRQn_Type IRQ_Number){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_EnableIRQ(IRQ_Number);
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fba7 	bl	80049e6 <HAL_NVIC_EnableIRQ>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <DisableInterrupt>:

void DisableInterrupt(IRQn_Type IRQ_Number){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(IRQ_Number);
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fba7 	bl	8004a02 <HAL_NVIC_DisableIRQ>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <ClearPendingEXTIBit>:

void ClearPendingInterrupt(IRQn_Type IRQ_Number){
	HAL_NVIC_ClearPendingIRQ(IRQ_Number);
}

void ClearPendingEXTIBit(uint8_t PinNumber){
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	__HAL_GPIO_EXTI_CLEAR_FLAG(PinNumber);
 80022c6:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <ClearPendingEXTIBit+0x1c>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	6153      	str	r3, [r2, #20]
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40013c00 	.word	0x40013c00

080022dc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	@ 0x30
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <LCD_GPIO_Init+0x174>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a59      	ldr	r2, [pc, #356]	@ (8002450 <LCD_GPIO_Init+0x174>)
 80022ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	4b57      	ldr	r3, [pc, #348]	@ (8002450 <LCD_GPIO_Init+0x174>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b4c      	ldr	r3, [pc, #304]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a4b      	ldr	r2, [pc, #300]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b49      	ldr	r3, [pc, #292]	@ (8002450 <LCD_GPIO_Init+0x174>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b45      	ldr	r3, [pc, #276]	@ (8002450 <LCD_GPIO_Init+0x174>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a44      	ldr	r2, [pc, #272]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b42      	ldr	r3, [pc, #264]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a3d      	ldr	r2, [pc, #244]	@ (8002450 <LCD_GPIO_Init+0x174>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a36      	ldr	r2, [pc, #216]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a2f      	ldr	r2, [pc, #188]	@ (8002450 <LCD_GPIO_Init+0x174>)
 8002394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <LCD_GPIO_Init+0x174>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80023a6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80023aa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80023b4:	2302      	movs	r3, #2
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80023b8:	230e      	movs	r3, #14
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4824      	ldr	r0, [pc, #144]	@ (8002454 <LCD_GPIO_Init+0x178>)
 80023c4:	f002 fb38 	bl	8004a38 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80023c8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80023cc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	4619      	mov	r1, r3
 80023d4:	4820      	ldr	r0, [pc, #128]	@ (8002458 <LCD_GPIO_Init+0x17c>)
 80023d6:	f002 fb2f 	bl	8004a38 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80023da:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80023de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	481d      	ldr	r0, [pc, #116]	@ (800245c <LCD_GPIO_Init+0x180>)
 80023e8:	f002 fb26 	bl	8004a38 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80023ec:	2348      	movs	r3, #72	@ 0x48
 80023ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	481a      	ldr	r0, [pc, #104]	@ (8002460 <LCD_GPIO_Init+0x184>)
 80023f8:	f002 fb1e 	bl	8004a38 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80023fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4619      	mov	r1, r3
 8002408:	4816      	ldr	r0, [pc, #88]	@ (8002464 <LCD_GPIO_Init+0x188>)
 800240a:	f002 fb15 	bl	8004a38 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800240e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002412:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	4813      	ldr	r0, [pc, #76]	@ (8002468 <LCD_GPIO_Init+0x18c>)
 800241c:	f002 fb0c 	bl	8004a38 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002420:	2303      	movs	r3, #3
 8002422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002424:	2309      	movs	r3, #9
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	480a      	ldr	r0, [pc, #40]	@ (8002458 <LCD_GPIO_Init+0x17c>)
 8002430:	f002 fb02 	bl	8004a38 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002434:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	4809      	ldr	r0, [pc, #36]	@ (8002468 <LCD_GPIO_Init+0x18c>)
 8002442:	f002 faf9 	bl	8004a38 <HAL_GPIO_Init>
}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	@ 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	40020800 	.word	0x40020800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800

0800246c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b090      	sub	sp, #64	@ 0x40
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800247a:	23f0      	movs	r3, #240	@ 0xf0
 800247c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002482:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002486:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800248c:	23ff      	movs	r3, #255	@ 0xff
 800248e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002498:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800249a:	2305      	movs	r3, #5
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <LTCD_Layer_Init+0x78>)
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80024a8:	23f0      	movs	r3, #240	@ 0xf0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80024ac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80024b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80024c4:	79fa      	ldrb	r2, [r7, #7]
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	4806      	ldr	r0, [pc, #24]	@ (80024e8 <LTCD_Layer_Init+0x7c>)
 80024ce:	f003 fef5 	bl	80062bc <HAL_LTDC_ConfigLayer>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80024d8:	f000 fa12 	bl	8002900 <LCD_Error_Handler>
	}
}
 80024dc:	bf00      	nop
 80024de:	3740      	adds	r7, #64	@ 0x40
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	2000023c 	.word	0x2000023c
 80024e8:	20000160 	.word	0x20000160

080024ec <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80024f0:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <LTCD__Init+0xb0>)
 80024f2:	4a2b      	ldr	r2, [pc, #172]	@ (80025a0 <LTCD__Init+0xb4>)
 80024f4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80024f6:	4b29      	ldr	r3, [pc, #164]	@ (800259c <LTCD__Init+0xb0>)
 80024f8:	2209      	movs	r2, #9
 80024fa:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80024fc:	4b27      	ldr	r3, [pc, #156]	@ (800259c <LTCD__Init+0xb0>)
 80024fe:	2201      	movs	r2, #1
 8002500:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002502:	4b26      	ldr	r3, [pc, #152]	@ (800259c <LTCD__Init+0xb0>)
 8002504:	221d      	movs	r2, #29
 8002506:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <LTCD__Init+0xb0>)
 800250a:	2203      	movs	r2, #3
 800250c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <LTCD__Init+0xb0>)
 8002510:	f240 120d 	movw	r2, #269	@ 0x10d
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002516:	4b21      	ldr	r3, [pc, #132]	@ (800259c <LTCD__Init+0xb0>)
 8002518:	f240 1243 	movw	r2, #323	@ 0x143
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800251e:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <LTCD__Init+0xb0>)
 8002520:	f240 1217 	movw	r2, #279	@ 0x117
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8002526:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <LTCD__Init+0xb0>)
 8002528:	f240 1247 	movw	r2, #327	@ 0x147
 800252c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <LTCD__Init+0xb0>)
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <LTCD__Init+0xb0>)
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800253e:	4b17      	ldr	r3, [pc, #92]	@ (800259c <LTCD__Init+0xb0>)
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <LTCD__Init+0xb8>)
 8002548:	2208      	movs	r2, #8
 800254a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800254c:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <LTCD__Init+0xb8>)
 800254e:	22c0      	movs	r2, #192	@ 0xc0
 8002550:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <LTCD__Init+0xb8>)
 8002554:	2204      	movs	r2, #4
 8002556:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002558:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <LTCD__Init+0xb8>)
 800255a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002560:	4810      	ldr	r0, [pc, #64]	@ (80025a4 <LTCD__Init+0xb8>)
 8002562:	f004 fd05 	bl	8006f70 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <LTCD__Init+0xb0>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <LTCD__Init+0xb0>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <LTCD__Init+0xb0>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <LTCD__Init+0xb0>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800257e:	f7ff fead 	bl	80022dc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002582:	4806      	ldr	r0, [pc, #24]	@ (800259c <LTCD__Init+0xb0>)
 8002584:	f003 fdca 	bl	800611c <HAL_LTDC_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800258e:	f000 f9b7 	bl	8002900 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002592:	f000 faa7 	bl	8002ae4 <ili9341_Init>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000160 	.word	0x20000160
 80025a0:	40016800 	.word	0x40016800
 80025a4:	20000208 	.word	0x20000208

080025a8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
 80025b2:	460b      	mov	r3, r1
 80025b4:	80bb      	strh	r3, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80025ba:	88ba      	ldrh	r2, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	461a      	mov	r2, r3
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4413      	add	r3, r2
 80025ca:	4905      	ldr	r1, [pc, #20]	@ (80025e0 <LCD_Draw_Pixel+0x38>)
 80025cc:	887a      	ldrh	r2, [r7, #2]
 80025ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	2000023c 	.word	0x2000023c

080025e4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	80fb      	strh	r3, [r7, #6]
 80025f6:	4603      	mov	r3, r0
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
 80025fe:	4613      	mov	r3, r2
 8002600:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	425b      	negs	r3, r3
 8002606:	b29b      	uxth	r3, r3
 8002608:	81fb      	strh	r3, [r7, #14]
 800260a:	e034      	b.n	8002676 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	425b      	negs	r3, r3
 8002610:	b29b      	uxth	r3, r3
 8002612:	81bb      	strh	r3, [r7, #12]
 8002614:	e024      	b.n	8002660 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8002616:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800261a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800261e:	fb03 f202 	mul.w	r2, r3, r2
 8002622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002626:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	441a      	add	r2, r3
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	8879      	ldrh	r1, [r7, #2]
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	429a      	cmp	r2, r3
 800263a:	dc0b      	bgt.n	8002654 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800263c:	89ba      	ldrh	r2, [r7, #12]
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4413      	add	r3, r2
 8002642:	b298      	uxth	r0, r3
 8002644:	89fa      	ldrh	r2, [r7, #14]
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	883a      	ldrh	r2, [r7, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	f7ff ffaa 	bl	80025a8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8002654:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002658:	b29b      	uxth	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	81bb      	strh	r3, [r7, #12]
 8002660:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	429a      	cmp	r2, r3
 8002668:	ddd5      	ble.n	8002616 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800266a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800266e:	b29b      	uxth	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	b29b      	uxth	r3, r3
 8002674:	81fb      	strh	r3, [r7, #14]
 8002676:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	429a      	cmp	r2, r3
 800267e:	ddc5      	ble.n	800260c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}

0800268a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800268a:	b590      	push	{r4, r7, lr}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	4604      	mov	r4, r0
 8002692:	4608      	mov	r0, r1
 8002694:	4611      	mov	r1, r2
 8002696:	461a      	mov	r2, r3
 8002698:	4623      	mov	r3, r4
 800269a:	80fb      	strh	r3, [r7, #6]
 800269c:	4603      	mov	r3, r0
 800269e:	80bb      	strh	r3, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	e00b      	b.n	80026c6 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80026ae:	89fa      	ldrh	r2, [r7, #14]
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	b299      	uxth	r1, r3
 80026b6:	883a      	ldrh	r2, [r7, #0]
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff74 	bl	80025a8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80026c0:	89fb      	ldrh	r3, [r7, #14]
 80026c2:	3301      	adds	r3, #1
 80026c4:	81fb      	strh	r3, [r7, #14]
 80026c6:	89fa      	ldrh	r2, [r7, #14]
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d3ef      	bcc.n	80026ae <LCD_Draw_Vertical_Line+0x24>
  }
}
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd90      	pop	{r4, r7, pc}

080026d8 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4604      	mov	r4, r0
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	80fb      	strh	r3, [r7, #6]
 80026ea:	4603      	mov	r3, r0
 80026ec:	80bb      	strh	r3, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]
 80026f2:	4613      	mov	r3, r2
 80026f4:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	81fb      	strh	r3, [r7, #14]
 80026fa:	e00b      	b.n	8002714 <LCD_Draw_Horizontal_Line+0x3c>
	{
		LCD_Draw_Pixel(i+x, y, color);
 80026fc:	89fa      	ldrh	r2, [r7, #14]
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4413      	add	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	883a      	ldrh	r2, [r7, #0]
 8002706:	88b9      	ldrh	r1, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff4d 	bl	80025a8 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 800270e:	89fb      	ldrh	r3, [r7, #14]
 8002710:	3301      	adds	r3, #1
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	89fa      	ldrh	r2, [r7, #14]
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	429a      	cmp	r2, r3
 800271a:	d3ef      	bcc.n	80026fc <LCD_Draw_Horizontal_Line+0x24>
	}
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
	...

08002728 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	460a      	mov	r2, r1
 8002732:	71fb      	strb	r3, [r7, #7]
 8002734:	4613      	mov	r3, r2
 8002736:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10e      	bne.n	800275c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e007      	b.n	8002754 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002744:	4908      	ldr	r1, [pc, #32]	@ (8002768 <LCD_Clear+0x40>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	88ba      	ldrh	r2, [r7, #4]
 800274a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3301      	adds	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800275a:	d3f3      	bcc.n	8002744 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	2000023c 	.word	0x2000023c

0800276c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002776:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <LCD_SetTextColor+0x1c>)
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	8013      	strh	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	20000000 	.word	0x20000000

0800278c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <LCD_SetFont+0x1c>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000238 	.word	0x20000238

080027ac <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	603a      	str	r2, [r7, #0]
 80027b6:	80fb      	strh	r3, [r7, #6]
 80027b8:	460b      	mov	r3, r1
 80027ba:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e04c      	b.n	8002864 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	e03f      	b.n	8002850 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <LCD_Draw_Char+0xd0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	889b      	ldrh	r3, [r3, #4]
 80027e2:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <LCD_Draw_Char+0xd4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	fa42 f303 	asr.w	r3, r2, r3
 80027f8:	400b      	ands	r3, r1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <LCD_Draw_Char+0x5c>
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <LCD_Draw_Char+0xd0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	889b      	ldrh	r3, [r3, #4]
 8002804:	2b0c      	cmp	r3, #12
 8002806:	d920      	bls.n	800284a <LCD_Draw_Char+0x9e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	fa42 f303 	asr.w	r3, r2, r3
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <LCD_Draw_Char+0x80>
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <LCD_Draw_Char+0xd0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	889b      	ldrh	r3, [r3, #4]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d80e      	bhi.n	800284a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	b29a      	uxth	r2, r3
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	4413      	add	r3, r2
 8002834:	b298      	uxth	r0, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	b29a      	uxth	r2, r3
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <LCD_Draw_Char+0xd8>)
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f7ff feaf 	bl	80025a8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <LCD_Draw_Char+0xd0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	889b      	ldrh	r3, [r3, #4]
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4293      	cmp	r3, r2
 800285c:	d3b8      	bcc.n	80027d0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3301      	adds	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <LCD_Draw_Char+0xd0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	88db      	ldrh	r3, [r3, #6]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4293      	cmp	r3, r2
 8002870:	d3ab      	bcc.n	80027ca <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000238 	.word	0x20000238
 8002880:	aaaaaaab 	.word	0xaaaaaaab
 8002884:	20000000 	.word	0x20000000

08002888 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, char text_to_print[])
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	603a      	str	r2, [r7, #0]
 8002892:	80fb      	strh	r3, [r7, #6]
 8002894:	460b      	mov	r3, r1
 8002896:	80bb      	strh	r3, [r7, #4]
	//altering function to print strings. Printing one char at a time is more customizeable, but takes too long.
	//Might switch back to printing char by char when everything is functional to make it prettier.
	for(int i = 0; i < strlen(text_to_print); i++){
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e022      	b.n	80028e4 <LCD_DisplayChar+0x5c>
		int print_increment = 10*i;
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	613b      	str	r3, [r7, #16]
		uint8_t Ascii = text_to_print[i] - 32;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	3b20      	subs	r3, #32
 80028b4:	73fb      	strb	r3, [r7, #15]
		LCD_Draw_Char(Xpos+print_increment, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	4413      	add	r3, r2
 80028be:	b298      	uxth	r0, r3
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <LCD_DisplayChar+0x74>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <LCD_DisplayChar+0x74>)
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	88c9      	ldrh	r1, [r1, #6]
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	441a      	add	r2, r3
 80028d6:	88bb      	ldrh	r3, [r7, #4]
 80028d8:	4619      	mov	r1, r3
 80028da:	f7ff ff67 	bl	80027ac <LCD_Draw_Char>
	for(int i = 0; i < strlen(text_to_print); i++){
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f7fd fc83 	bl	80001f0 <strlen>
 80028ea:	4602      	mov	r2, r0
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d8d5      	bhi.n	800289e <LCD_DisplayChar+0x16>
	}
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000238 	.word	0x20000238

08002900 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <LCD_Error_Handler+0x8>

0800290c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002910:	f001 fafd 	bl	8003f0e <STMPE811_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b02      	cmp	r3, #2
 8002918:	d001      	beq.n	800291e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800291a:	bf00      	nop
 800291c:	e7fd      	b.n	800291a <InitializeLCDTouch+0xe>
  }
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}

08002922 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 fba7 	bl	800407e <STMPE811_ReadTouch>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <returnTouchQuadrant>:
void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
	STMPE811_Write(RegToWrite, writeData);
}

LCD_Quadrant returnTouchQuadrant(STMPE811_TouchData touchLocation){
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	463b      	mov	r3, r7
 8002942:	e883 0003 	stmia.w	r3, {r0, r1}
	//DIMENSIONS: X: (0, 240) ; Y: (0, 320)

	if(touchLocation.x >= 0 && touchLocation.x < 120 && touchLocation.y >= 0 && touchLocation.y < 160){
 8002946:	883b      	ldrh	r3, [r7, #0]
 8002948:	2b77      	cmp	r3, #119	@ 0x77
 800294a:	d807      	bhi.n	800295c <returnTouchQuadrant+0x22>
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	2b9f      	cmp	r3, #159	@ 0x9f
 8002950:	d804      	bhi.n	800295c <returnTouchQuadrant+0x22>
		// printf("Top Right\n");
		HAL_Delay(100);
 8002952:	2064      	movs	r0, #100	@ 0x64
 8002954:	f001 ff08 	bl	8004768 <HAL_Delay>
		return TOP_RIGHT;
 8002958:	2302      	movs	r3, #2
 800295a:	e033      	b.n	80029c4 <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 120 && touchLocation.x <= 240 && touchLocation.y >= 0 && touchLocation.y < 160){
 800295c:	883b      	ldrh	r3, [r7, #0]
 800295e:	2b77      	cmp	r3, #119	@ 0x77
 8002960:	d90a      	bls.n	8002978 <returnTouchQuadrant+0x3e>
 8002962:	883b      	ldrh	r3, [r7, #0]
 8002964:	2bf0      	cmp	r3, #240	@ 0xf0
 8002966:	d807      	bhi.n	8002978 <returnTouchQuadrant+0x3e>
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	2b9f      	cmp	r3, #159	@ 0x9f
 800296c:	d804      	bhi.n	8002978 <returnTouchQuadrant+0x3e>
		// printf("Top Left\n");
		HAL_Delay(100);
 800296e:	2064      	movs	r0, #100	@ 0x64
 8002970:	f001 fefa 	bl	8004768 <HAL_Delay>
		return TOP_LEFT;
 8002974:	2303      	movs	r3, #3
 8002976:	e025      	b.n	80029c4 <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 0 && touchLocation.x < 120 && touchLocation.y >= 160 && touchLocation.y <= 320){
 8002978:	883b      	ldrh	r3, [r7, #0]
 800297a:	2b77      	cmp	r3, #119	@ 0x77
 800297c:	d80b      	bhi.n	8002996 <returnTouchQuadrant+0x5c>
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	2b9f      	cmp	r3, #159	@ 0x9f
 8002982:	d908      	bls.n	8002996 <returnTouchQuadrant+0x5c>
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800298a:	d804      	bhi.n	8002996 <returnTouchQuadrant+0x5c>
		// printf("Bottom Right\n");
		HAL_Delay(100);
 800298c:	2064      	movs	r0, #100	@ 0x64
 800298e:	f001 feeb 	bl	8004768 <HAL_Delay>
		return BOTTOM_RIGHT;
 8002992:	2301      	movs	r3, #1
 8002994:	e016      	b.n	80029c4 <returnTouchQuadrant+0x8a>
	}

	else if(touchLocation.x >= 120 && touchLocation.x <= 240 && touchLocation.y >= 160 && touchLocation.y <= 320){
 8002996:	883b      	ldrh	r3, [r7, #0]
 8002998:	2b77      	cmp	r3, #119	@ 0x77
 800299a:	d90e      	bls.n	80029ba <returnTouchQuadrant+0x80>
 800299c:	883b      	ldrh	r3, [r7, #0]
 800299e:	2bf0      	cmp	r3, #240	@ 0xf0
 80029a0:	d80b      	bhi.n	80029ba <returnTouchQuadrant+0x80>
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	2b9f      	cmp	r3, #159	@ 0x9f
 80029a6:	d908      	bls.n	80029ba <returnTouchQuadrant+0x80>
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80029ae:	d804      	bhi.n	80029ba <returnTouchQuadrant+0x80>
		// printf("Bottom Left\n");
		HAL_Delay(100);
 80029b0:	2064      	movs	r0, #100	@ 0x64
 80029b2:	f001 fed9 	bl	8004768 <HAL_Delay>
		return BOTTOM_LEFT;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e004      	b.n	80029c4 <returnTouchQuadrant+0x8a>
	}

	else{
		// printf("Detection Error\n");
		HAL_Delay(100);
 80029ba:	2064      	movs	r0, #100	@ 0x64
 80029bc:	f001 fed4 	bl	8004768 <HAL_Delay>
		return DETECTION_ERROR;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <LED_Init>:
#include "LED_Driver.h"

void LED_Init(uint8_t LED){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef led;
	switch(LED){
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <LED_Init+0x16>
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d00a      	beq.n	80029f6 <LED_Init+0x2a>
 80029e0:	e012      	b.n	8002a08 <LED_Init+0x3c>
		case 0:
			led.Pin = GPIO_PIN_14;
 80029e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
			led.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	61bb      	str	r3, [r7, #24]
			led.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
			break;
 80029f4:	e008      	b.n	8002a08 <LED_Init+0x3c>
		case 1:
			led.Pin = GPIO_PIN_13;
 80029f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fa:	60fb      	str	r3, [r7, #12]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
			led.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	61bb      	str	r3, [r7, #24]
			led.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
	}

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <LED_Init+0x6c>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	4a09      	ldr	r2, [pc, #36]	@ (8002a38 <LED_Init+0x6c>)
 8002a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a18:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <LED_Init+0x6c>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOG, &led);
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4804      	ldr	r0, [pc, #16]	@ (8002a3c <LED_Init+0x70>)
 8002a2c:	f002 f804 	bl	8004a38 <HAL_GPIO_Init>
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40021800 	.word	0x40021800

08002a40 <TurnOffLED>:
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
			break;
	}
}

void TurnOffLED(uint8_t LED){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
	switch(LED){
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <TurnOffLED+0x16>
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d007      	beq.n	8002a64 <TurnOffLED+0x24>

		case 1:
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
			break;
	}
}
 8002a54:	e00d      	b.n	8002a72 <TurnOffLED+0x32>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a5c:	4807      	ldr	r0, [pc, #28]	@ (8002a7c <TurnOffLED+0x3c>)
 8002a5e:	f002 faa3 	bl	8004fa8 <HAL_GPIO_WritePin>
			break;
 8002a62:	e006      	b.n	8002a72 <TurnOffLED+0x32>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a6a:	4804      	ldr	r0, [pc, #16]	@ (8002a7c <TurnOffLED+0x3c>)
 8002a6c:	f002 fa9c 	bl	8004fa8 <HAL_GPIO_WritePin>
			break;
 8002a70:	bf00      	nop
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021800 	.word	0x40021800

08002a80 <addSchedulerEvent>:
#include "Scheduler.h"
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event){
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <addSchedulerEvent+0x20>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	4a03      	ldr	r2, [pc, #12]	@ (8002aa0 <addSchedulerEvent+0x20>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	20025a3c 	.word	0x20025a3c

08002aa4 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <removeSchedulerEvent+0x24>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <removeSchedulerEvent+0x24>)
 8002ab8:	6013      	str	r3, [r2, #0]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20025a3c 	.word	0x20025a3c

08002acc <getScheduledEvents>:

uint32_t getScheduledEvents(){
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <getScheduledEvents+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20025a3c 	.word	0x20025a3c

08002ae4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002ae8:	f000 f9fe 	bl	8002ee8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002aec:	20ca      	movs	r0, #202	@ 0xca
 8002aee:	f000 f943 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002af2:	20c3      	movs	r0, #195	@ 0xc3
 8002af4:	f000 f94d 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002af8:	2008      	movs	r0, #8
 8002afa:	f000 f94a 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002afe:	2050      	movs	r0, #80	@ 0x50
 8002b00:	f000 f947 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002b04:	20cf      	movs	r0, #207	@ 0xcf
 8002b06:	f000 f937 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 f941 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002b10:	20c1      	movs	r0, #193	@ 0xc1
 8002b12:	f000 f93e 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002b16:	2030      	movs	r0, #48	@ 0x30
 8002b18:	f000 f93b 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002b1c:	20ed      	movs	r0, #237	@ 0xed
 8002b1e:	f000 f92b 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002b22:	2064      	movs	r0, #100	@ 0x64
 8002b24:	f000 f935 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f000 f932 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002b2e:	2012      	movs	r0, #18
 8002b30:	f000 f92f 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002b34:	2081      	movs	r0, #129	@ 0x81
 8002b36:	f000 f92c 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002b3a:	20e8      	movs	r0, #232	@ 0xe8
 8002b3c:	f000 f91c 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002b40:	2085      	movs	r0, #133	@ 0x85
 8002b42:	f000 f926 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 f923 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002b4c:	2078      	movs	r0, #120	@ 0x78
 8002b4e:	f000 f920 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002b52:	20cb      	movs	r0, #203	@ 0xcb
 8002b54:	f000 f910 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002b58:	2039      	movs	r0, #57	@ 0x39
 8002b5a:	f000 f91a 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002b5e:	202c      	movs	r0, #44	@ 0x2c
 8002b60:	f000 f917 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f000 f914 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002b6a:	2034      	movs	r0, #52	@ 0x34
 8002b6c:	f000 f911 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002b70:	2002      	movs	r0, #2
 8002b72:	f000 f90e 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002b76:	20f7      	movs	r0, #247	@ 0xf7
 8002b78:	f000 f8fe 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002b7c:	2020      	movs	r0, #32
 8002b7e:	f000 f908 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002b82:	20ea      	movs	r0, #234	@ 0xea
 8002b84:	f000 f8f8 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f000 f902 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f000 f8ff 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002b94:	20b1      	movs	r0, #177	@ 0xb1
 8002b96:	f000 f8ef 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f000 f8f9 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002ba0:	201b      	movs	r0, #27
 8002ba2:	f000 f8f6 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002ba6:	20b6      	movs	r0, #182	@ 0xb6
 8002ba8:	f000 f8e6 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002bac:	200a      	movs	r0, #10
 8002bae:	f000 f8f0 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002bb2:	20a2      	movs	r0, #162	@ 0xa2
 8002bb4:	f000 f8ed 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002bb8:	20c0      	movs	r0, #192	@ 0xc0
 8002bba:	f000 f8dd 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002bbe:	2010      	movs	r0, #16
 8002bc0:	f000 f8e7 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002bc4:	20c1      	movs	r0, #193	@ 0xc1
 8002bc6:	f000 f8d7 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002bca:	2010      	movs	r0, #16
 8002bcc:	f000 f8e1 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002bd0:	20c5      	movs	r0, #197	@ 0xc5
 8002bd2:	f000 f8d1 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002bd6:	2045      	movs	r0, #69	@ 0x45
 8002bd8:	f000 f8db 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002bdc:	2015      	movs	r0, #21
 8002bde:	f000 f8d8 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002be2:	20c7      	movs	r0, #199	@ 0xc7
 8002be4:	f000 f8c8 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002be8:	2090      	movs	r0, #144	@ 0x90
 8002bea:	f000 f8d2 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002bee:	2036      	movs	r0, #54	@ 0x36
 8002bf0:	f000 f8c2 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002bf4:	20c8      	movs	r0, #200	@ 0xc8
 8002bf6:	f000 f8cc 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002bfa:	20f2      	movs	r0, #242	@ 0xf2
 8002bfc:	f000 f8bc 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f000 f8c6 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002c06:	20b0      	movs	r0, #176	@ 0xb0
 8002c08:	f000 f8b6 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002c0c:	20c2      	movs	r0, #194	@ 0xc2
 8002c0e:	f000 f8c0 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002c12:	20b6      	movs	r0, #182	@ 0xb6
 8002c14:	f000 f8b0 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002c18:	200a      	movs	r0, #10
 8002c1a:	f000 f8ba 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002c1e:	20a7      	movs	r0, #167	@ 0xa7
 8002c20:	f000 f8b7 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002c24:	2027      	movs	r0, #39	@ 0x27
 8002c26:	f000 f8b4 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002c2a:	2004      	movs	r0, #4
 8002c2c:	f000 f8b1 	bl	8002d92 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002c30:	202a      	movs	r0, #42	@ 0x2a
 8002c32:	f000 f8a1 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f8ab 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 f8a8 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f8a5 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002c48:	20ef      	movs	r0, #239	@ 0xef
 8002c4a:	f000 f8a2 	bl	8002d92 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002c4e:	202b      	movs	r0, #43	@ 0x2b
 8002c50:	f000 f892 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f000 f89c 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f000 f899 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f000 f896 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002c66:	203f      	movs	r0, #63	@ 0x3f
 8002c68:	f000 f893 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002c6c:	20f6      	movs	r0, #246	@ 0xf6
 8002c6e:	f000 f883 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f000 f88d 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f000 f88a 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002c7e:	2006      	movs	r0, #6
 8002c80:	f000 f887 	bl	8002d92 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002c84:	202c      	movs	r0, #44	@ 0x2c
 8002c86:	f000 f877 	bl	8002d78 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002c8a:	20c8      	movs	r0, #200	@ 0xc8
 8002c8c:	f000 f9e8 	bl	8003060 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002c90:	2026      	movs	r0, #38	@ 0x26
 8002c92:	f000 f871 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002c96:	2001      	movs	r0, #1
 8002c98:	f000 f87b 	bl	8002d92 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002c9c:	20e0      	movs	r0, #224	@ 0xe0
 8002c9e:	f000 f86b 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002ca2:	200f      	movs	r0, #15
 8002ca4:	f000 f875 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002ca8:	2029      	movs	r0, #41	@ 0x29
 8002caa:	f000 f872 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002cae:	2024      	movs	r0, #36	@ 0x24
 8002cb0:	f000 f86f 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002cb4:	200c      	movs	r0, #12
 8002cb6:	f000 f86c 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002cba:	200e      	movs	r0, #14
 8002cbc:	f000 f869 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002cc0:	2009      	movs	r0, #9
 8002cc2:	f000 f866 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002cc6:	204e      	movs	r0, #78	@ 0x4e
 8002cc8:	f000 f863 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002ccc:	2078      	movs	r0, #120	@ 0x78
 8002cce:	f000 f860 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002cd2:	203c      	movs	r0, #60	@ 0x3c
 8002cd4:	f000 f85d 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002cd8:	2009      	movs	r0, #9
 8002cda:	f000 f85a 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002cde:	2013      	movs	r0, #19
 8002ce0:	f000 f857 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002ce4:	2005      	movs	r0, #5
 8002ce6:	f000 f854 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002cea:	2017      	movs	r0, #23
 8002cec:	f000 f851 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002cf0:	2011      	movs	r0, #17
 8002cf2:	f000 f84e 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f000 f84b 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002cfc:	20e1      	movs	r0, #225	@ 0xe1
 8002cfe:	f000 f83b 	bl	8002d78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f000 f845 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002d08:	2016      	movs	r0, #22
 8002d0a:	f000 f842 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002d0e:	201b      	movs	r0, #27
 8002d10:	f000 f83f 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002d14:	2004      	movs	r0, #4
 8002d16:	f000 f83c 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002d1a:	2011      	movs	r0, #17
 8002d1c:	f000 f839 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002d20:	2007      	movs	r0, #7
 8002d22:	f000 f836 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002d26:	2031      	movs	r0, #49	@ 0x31
 8002d28:	f000 f833 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002d2c:	2033      	movs	r0, #51	@ 0x33
 8002d2e:	f000 f830 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002d32:	2042      	movs	r0, #66	@ 0x42
 8002d34:	f000 f82d 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002d38:	2005      	movs	r0, #5
 8002d3a:	f000 f82a 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002d3e:	200c      	movs	r0, #12
 8002d40:	f000 f827 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002d44:	200a      	movs	r0, #10
 8002d46:	f000 f824 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002d4a:	2028      	movs	r0, #40	@ 0x28
 8002d4c:	f000 f821 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002d50:	202f      	movs	r0, #47	@ 0x2f
 8002d52:	f000 f81e 	bl	8002d92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002d56:	200f      	movs	r0, #15
 8002d58:	f000 f81b 	bl	8002d92 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002d5c:	2011      	movs	r0, #17
 8002d5e:	f000 f80b 	bl	8002d78 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002d62:	20c8      	movs	r0, #200	@ 0xc8
 8002d64:	f000 f97c 	bl	8003060 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002d68:	2029      	movs	r0, #41	@ 0x29
 8002d6a:	f000 f805 	bl	8002d78 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002d6e:	202c      	movs	r0, #44	@ 0x2c
 8002d70:	f000 f802 	bl	8002d78 <ili9341_Write_Reg>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f949 	bl	800301c <LCD_IO_WriteReg>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f91a 	bl	8002fd8 <LCD_IO_WriteData>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002db0:	4819      	ldr	r0, [pc, #100]	@ (8002e18 <SPI_Init+0x6c>)
 8002db2:	f004 fd12 	bl	80077da <HAL_SPI_GetState>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d12b      	bne.n	8002e14 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <SPI_Init+0x6c>)
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <SPI_Init+0x70>)
 8002dc0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <SPI_Init+0x6c>)
 8002dc4:	2218      	movs	r2, #24
 8002dc6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <SPI_Init+0x6c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002dce:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <SPI_Init+0x6c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002dd4:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <SPI_Init+0x6c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <SPI_Init+0x6c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002de0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <SPI_Init+0x6c>)
 8002de2:	2207      	movs	r2, #7
 8002de4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002de6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <SPI_Init+0x6c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <SPI_Init+0x6c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <SPI_Init+0x6c>)
 8002df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <SPI_Init+0x6c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <SPI_Init+0x6c>)
 8002e02:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e06:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002e08:	4803      	ldr	r0, [pc, #12]	@ (8002e18 <SPI_Init+0x6c>)
 8002e0a:	f000 f833 	bl	8002e74 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002e0e:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <SPI_Init+0x6c>)
 8002e10:	f004 faee 	bl	80073f0 <HAL_SPI_Init>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20025a40 	.word	0x20025a40
 8002e1c:	40015000 	.word	0x40015000

08002e20 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <SPI_Write+0x34>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1db9      	adds	r1, r7, #6
 8002e34:	2201      	movs	r2, #1
 8002e36:	4808      	ldr	r0, [pc, #32]	@ (8002e58 <SPI_Write+0x38>)
 8002e38:	f004 fb8b 	bl	8007552 <HAL_SPI_Transmit>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002e46:	f000 f809 	bl	8002e5c <SPI_Error>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	20025a40 	.word	0x20025a40

08002e5c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <SPI_Error+0x14>)
 8002e62:	f004 fb4e 	bl	8007502 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002e66:	f7ff ffa1 	bl	8002dac <SPI_Init>
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20025a40 	.word	0x20025a40

08002e74 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	4b17      	ldr	r3, [pc, #92]	@ (8002ee0 <SPI_MspInit+0x6c>)
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	4a16      	ldr	r2, [pc, #88]	@ (8002ee0 <SPI_MspInit+0x6c>)
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <SPI_MspInit+0x6c>)
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <SPI_MspInit+0x6c>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee0 <SPI_MspInit+0x6c>)
 8002ea2:	f043 0320 	orr.w	r3, r3, #32
 8002ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <SPI_MspInit+0x6c>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002eb4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002ec6:	2305      	movs	r3, #5
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4804      	ldr	r0, [pc, #16]	@ (8002ee4 <SPI_MspInit+0x70>)
 8002ed2:	f001 fdb1 	bl	8004a38 <HAL_GPIO_Init>
}
 8002ed6:	bf00      	nop
 8002ed8:	3728      	adds	r7, #40	@ 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40021400 	.word	0x40021400

08002ee8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002eee:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <LCD_IO_Init+0xe0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d164      	bne.n	8002fc0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002ef6:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <LCD_IO_Init+0xe0>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	4b32      	ldr	r3, [pc, #200]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f06:	f043 0308 	orr.w	r3, r3, #8
 8002f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002f18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4827      	ldr	r0, [pc, #156]	@ (8002fd0 <LCD_IO_Init+0xe8>)
 8002f32:	f001 fd81 	bl	8004a38 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f46:	4b21      	ldr	r3, [pc, #132]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f60:	2302      	movs	r3, #2
 8002f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4819      	ldr	r0, [pc, #100]	@ (8002fd0 <LCD_IO_Init+0xe8>)
 8002f6c:	f001 fd64 	bl	8004a38 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f80:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <LCD_IO_Init+0xe4>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480c      	ldr	r0, [pc, #48]	@ (8002fd4 <LCD_IO_Init+0xec>)
 8002fa4:	f001 fd48 	bl	8004a38 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2104      	movs	r1, #4
 8002fac:	4809      	ldr	r0, [pc, #36]	@ (8002fd4 <LCD_IO_Init+0xec>)
 8002fae:	f001 fffb 	bl	8004fa8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	4807      	ldr	r0, [pc, #28]	@ (8002fd4 <LCD_IO_Init+0xec>)
 8002fb8:	f001 fff6 	bl	8004fa8 <HAL_GPIO_WritePin>

    SPI_Init();
 8002fbc:	f7ff fef6 	bl	8002dac <SPI_Init>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20025a98 	.word	0x20025a98
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40020800 	.word	0x40020800

08002fd8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fe8:	480a      	ldr	r0, [pc, #40]	@ (8003014 <LCD_IO_WriteData+0x3c>)
 8002fea:	f001 ffdd 	bl	8004fa8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	4809      	ldr	r0, [pc, #36]	@ (8003018 <LCD_IO_WriteData+0x40>)
 8002ff4:	f001 ffd8 	bl	8004fa8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff10 	bl	8002e20 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003000:	2201      	movs	r2, #1
 8003002:	2104      	movs	r1, #4
 8003004:	4804      	ldr	r0, [pc, #16]	@ (8003018 <LCD_IO_WriteData+0x40>)
 8003006:	f001 ffcf 	bl	8004fa8 <HAL_GPIO_WritePin>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40020c00 	.word	0x40020c00
 8003018:	40020800 	.word	0x40020800

0800301c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800302c:	480a      	ldr	r0, [pc, #40]	@ (8003058 <LCD_IO_WriteReg+0x3c>)
 800302e:	f001 ffbb 	bl	8004fa8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003032:	2200      	movs	r2, #0
 8003034:	2104      	movs	r1, #4
 8003036:	4809      	ldr	r0, [pc, #36]	@ (800305c <LCD_IO_WriteReg+0x40>)
 8003038:	f001 ffb6 	bl	8004fa8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff feed 	bl	8002e20 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003046:	2201      	movs	r2, #1
 8003048:	2104      	movs	r1, #4
 800304a:	4804      	ldr	r0, [pc, #16]	@ (800305c <LCD_IO_WriteReg+0x40>)
 800304c:	f001 ffac 	bl	8004fa8 <HAL_GPIO_WritePin>
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40020800 	.word	0x40020800

08003060 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f001 fb7d 	bl	8004768 <HAL_Delay>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 800307e:	f005 f979 	bl	8008374 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003082:	f001 faff 	bl	8004684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003086:	f000 f909 	bl	800329c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800308a:	f000 fafb 	bl	8003684 <MX_GPIO_Init>
  MX_LTDC_Init();
 800308e:	f000 f9af 	bl	80033f0 <MX_LTDC_Init>
  MX_RNG_Init();
 8003092:	f000 fa5f 	bl	8003554 <MX_RNG_Init>
  
  MX_TIM2_Init();
 8003096:	f000 faa7 	bl	80035e8 <MX_TIM2_Init>

  MX_SPI5_Init();
 800309a:	f000 fa6f 	bl	800357c <MX_SPI5_Init>
  MX_I2C3_Init();
 800309e:	f000 f967 	bl	8003370 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80030a2:	f7fd fa75 	bl	8000590 <ApplicationInit>
  // LCD_Visual_Demo();
  HAL_Delay(3000);
 80030a6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030aa:	f001 fb5d 	bl	8004768 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  // LCD_Touch_Polling_Demo(); // This function Will not return
#endif

  GAME_STATE state = MENU;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  //State Machine Loop
  while(1){
    if(state == MENU){
 80030b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d127      	bne.n	800310c <main+0x94>
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 80030bc:	f7ff fd06 	bl	8002acc <getScheduledEvents>
 80030c0:	60b8      	str	r0, [r7, #8]
        
        if(scheduledEvents && DISPLAY_MENU_SCREEN_EVENT){
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <main+0x5a>
          Display_Menu_Screen();
 80030c8:	f7fd faa8 	bl	800061c <Display_Menu_Screen>
          removeSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 80030cc:	2001      	movs	r0, #1
 80030ce:	f7ff fce9 	bl	8002aa4 <removeSchedulerEvent>
        }

        if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 80030d2:	486d      	ldr	r0, [pc, #436]	@ (8003288 <main+0x210>)
 80030d4:	f7ff fc25 	bl	8002922 <returnTouchStateAndLocation>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <main+0x44>
            LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <main+0x210>)
 80030e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030e4:	f7ff fc29 	bl	800293a <returnTouchQuadrant>
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
            if(touchedQuadrant == BOTTOM_LEFT){
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <main+0x84>
                state = SINGLE_PLAYER;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 80030fa:	e0bf      	b.n	800327c <main+0x204>
            }
            else if(touchedQuadrant == BOTTOM_RIGHT){
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d1db      	bne.n	80030bc <main+0x44>
              state = TWO_PLAYER;
 8003104:	2302      	movs	r3, #2
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              break;
 800310a:	e0b7      	b.n	800327c <main+0x204>
            }
        }
      }
    }
    
    else if(state == SINGLE_PLAYER){
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003110:	2b01      	cmp	r3, #1
 8003112:	d12e      	bne.n	8003172 <main+0xfa>
      addSchedulerEvent(DISPLAY_BOARD_EVENT);
 8003114:	2002      	movs	r0, #2
 8003116:	f7ff fcb3 	bl	8002a80 <addSchedulerEvent>
      addSchedulerEvent(SINGLE_PLAYER_EVENT);
 800311a:	2004      	movs	r0, #4
 800311c:	f7ff fcb0 	bl	8002a80 <addSchedulerEvent>

      LCD_Clear(0, LCD_COLOR_WHITE);
 8003120:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003124:	2000      	movs	r0, #0
 8003126:	f7ff faff 	bl	8002728 <LCD_Clear>
      
      start_time = HAL_GetTick();
 800312a:	f001 fb11 	bl	8004750 <HAL_GetTick>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	4b56      	ldr	r3, [pc, #344]	@ (800328c <main+0x214>)
 8003134:	601a      	str	r2, [r3, #0]
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 8003136:	f7ff fcc9 	bl	8002acc <getScheduledEvents>
 800313a:	60f8      	str	r0, [r7, #12]
        if(scheduledEvents && DISPLAY_BOARD_EVENT){
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <main+0xd4>
            Display_Board();
 8003142:	f7fd fb01 	bl	8000748 <Display_Board>
            removeSchedulerEvent(DISPLAY_BOARD_EVENT);
 8003146:	2002      	movs	r0, #2
 8003148:	f7ff fcac 	bl	8002aa4 <removeSchedulerEvent>
        }

        if(scheduledEvents && SINGLE_PLAYER_EVENT){
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <main+0xe6>
            Single_Player(&hrng);
 8003152:	484f      	ldr	r0, [pc, #316]	@ (8003290 <main+0x218>)
 8003154:	f7fd fba4 	bl	80008a0 <Single_Player>
            removeSchedulerEvent(SINGLE_PLAYER_EVENT);
 8003158:	2004      	movs	r0, #4
 800315a:	f7ff fca3 	bl	8002aa4 <removeSchedulerEvent>
        }
        end_time = HAL_GetTick();
 800315e:	f001 faf7 	bl	8004750 <HAL_GetTick>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	4b4b      	ldr	r3, [pc, #300]	@ (8003294 <main+0x21c>)
 8003168:	601a      	str	r2, [r3, #0]
        state = RESULTS;
 800316a:	2303      	movs	r3, #3
 800316c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8003170:	e084      	b.n	800327c <main+0x204>
      }
    }

    else if(state == TWO_PLAYER){
 8003172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003176:	2b02      	cmp	r3, #2
 8003178:	d12d      	bne.n	80031d6 <main+0x15e>
      addSchedulerEvent(DISPLAY_BOARD_EVENT);
 800317a:	2002      	movs	r0, #2
 800317c:	f7ff fc80 	bl	8002a80 <addSchedulerEvent>
      addSchedulerEvent(TWO_PLAYER_EVENT);
 8003180:	2008      	movs	r0, #8
 8003182:	f7ff fc7d 	bl	8002a80 <addSchedulerEvent>

      LCD_Clear(0, LCD_COLOR_WHITE);
 8003186:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff facc 	bl	8002728 <LCD_Clear>

      start_time = HAL_GetTick();
 8003190:	f001 fade 	bl	8004750 <HAL_GetTick>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <main+0x214>)
 800319a:	601a      	str	r2, [r3, #0]
      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 800319c:	f7ff fc96 	bl	8002acc <getScheduledEvents>
 80031a0:	6138      	str	r0, [r7, #16]
        if(scheduledEvents && DISPLAY_BOARD_EVENT){
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <main+0x13a>
            Display_Board();
 80031a8:	f7fd face 	bl	8000748 <Display_Board>
            removeSchedulerEvent(DISPLAY_BOARD_EVENT);
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7ff fc79 	bl	8002aa4 <removeSchedulerEvent>
        }

        if(scheduledEvents && TWO_PLAYER_EVENT){
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <main+0x14a>
            Two_Player();
 80031b8:	f7fe fad4 	bl	8001764 <Two_Player>
            removeSchedulerEvent(TWO_PLAYER_EVENT);
 80031bc:	2008      	movs	r0, #8
 80031be:	f7ff fc71 	bl	8002aa4 <removeSchedulerEvent>
        }
        end_time = HAL_GetTick();
 80031c2:	f001 fac5 	bl	8004750 <HAL_GetTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b32      	ldr	r3, [pc, #200]	@ (8003294 <main+0x21c>)
 80031cc:	601a      	str	r2, [r3, #0]
        state = RESULTS;
 80031ce:	2303      	movs	r3, #3
 80031d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80031d4:	e052      	b.n	800327c <main+0x204>
      }
    }

    else if(state == RESULTS){
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d13c      	bne.n	8003258 <main+0x1e0>
      int seconds = (end_time - start_time) / 1000;
 80031de:	4b2d      	ldr	r3, [pc, #180]	@ (8003294 <main+0x21c>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b2a      	ldr	r3, [pc, #168]	@ (800328c <main+0x214>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <main+0x220>)
 80031ea:	fb82 1203 	smull	r1, r2, r2, r3
 80031ee:	1192      	asrs	r2, r2, #6
 80031f0:	17db      	asrs	r3, r3, #31
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	61fb      	str	r3, [r7, #28]

      while (1){
        uint32_t scheduledEvents = getScheduledEvents();
 80031f6:	f7ff fc69 	bl	8002acc <getScheduledEvents>
 80031fa:	61b8      	str	r0, [r7, #24]
        if(scheduledEvents && DISPLAY_RESULTS_EVENT){
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <main+0x196>
          Display_Results(seconds);
 8003202:	69f8      	ldr	r0, [r7, #28]
 8003204:	f7fe fe26 	bl	8001e54 <Display_Results>
          removeSchedulerEvent(DISPLAY_RESULTS_EVENT);
 8003208:	2020      	movs	r0, #32
 800320a:	f7ff fc4b 	bl	8002aa4 <removeSchedulerEvent>
        }

        if(returnTouchStateAndLocation(&StaticTouchData)  == STMPE811_State_Pressed){
 800320e:	481e      	ldr	r0, [pc, #120]	@ (8003288 <main+0x210>)
 8003210:	f7ff fb87 	bl	8002922 <returnTouchStateAndLocation>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ed      	bne.n	80031f6 <main+0x17e>
          LCD_Quadrant touchedQuadrant = returnTouchQuadrant(StaticTouchData);
 800321a:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <main+0x210>)
 800321c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003220:	f7ff fb8b 	bl	800293a <returnTouchQuadrant>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]
          if(touchedQuadrant == BOTTOM_LEFT){
 8003228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <main+0x1c6>
              state = QUIT;
 8003230:	2304      	movs	r3, #4
 8003232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              addSchedulerEvent(DISPLAY_QUIT_SCREEN_EVENT);
 8003236:	2040      	movs	r0, #64	@ 0x40
 8003238:	f7ff fc22 	bl	8002a80 <addSchedulerEvent>
              break;
 800323c:	e01e      	b.n	800327c <main+0x204>
          }
          else if(touchedQuadrant == BOTTOM_RIGHT){
 800323e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d1d7      	bne.n	80031f6 <main+0x17e>
              state = MENU;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              addSchedulerEvent(DISPLAY_MENU_SCREEN_EVENT);
 800324c:	2001      	movs	r0, #1
 800324e:	f7ff fc17 	bl	8002a80 <addSchedulerEvent>
              Reset_Board();
 8003252:	f7fe ffb3 	bl	80021bc <Reset_Board>
              break;
 8003256:	e011      	b.n	800327c <main+0x204>
          }
        }
      }
    }

    else if(state == QUIT){
 8003258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800325c:	2b04      	cmp	r3, #4
 800325e:	f47f af29 	bne.w	80030b4 <main+0x3c>
      while(1){
        uint32_t scheduledEvents = getScheduledEvents();
 8003262:	f7ff fc33 	bl	8002acc <getScheduledEvents>
 8003266:	6238      	str	r0, [r7, #32]
        if(scheduledEvents && DISPLAY_QUIT_SCREEN_EVENT){
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <main+0x200>
            Display_Quit_Screen();
 800326e:	f7fe ff57 	bl	8002120 <Display_Quit_Screen>
            removeSchedulerEvent(DISPLAY_QUIT_SCREEN_EVENT);
 8003272:	2040      	movs	r0, #64	@ 0x40
 8003274:	f7ff fc16 	bl	8002aa4 <removeSchedulerEvent>
        }
        break;
 8003278:	bf00      	nop
      }
      break;
 800327a:	e000      	b.n	800327e <main+0x206>
    if(state == MENU){
 800327c:	e71a      	b.n	80030b4 <main+0x3c>
 800327e:	2300      	movs	r3, #0
    }
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	@ 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20025a9c 	.word	0x20025a9c
 800328c:	20025aa4 	.word	0x20025aa4
 8003290:	20025b00 	.word	0x20025b00
 8003294:	20025aa8 	.word	0x20025aa8
 8003298:	10624dd3 	.word	0x10624dd3

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b094      	sub	sp, #80	@ 0x50
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	f107 0320 	add.w	r3, r7, #32
 80032a6:	2230      	movs	r2, #48	@ 0x30
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 f9e7 	bl	800867e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <SystemClock_Config+0xcc>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	4a27      	ldr	r2, [pc, #156]	@ (8003368 <SystemClock_Config+0xcc>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <SystemClock_Config+0xcc>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	4b22      	ldr	r3, [pc, #136]	@ (800336c <SystemClock_Config+0xd0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a21      	ldr	r2, [pc, #132]	@ (800336c <SystemClock_Config+0xd0>)
 80032e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <SystemClock_Config+0xd0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003302:	2302      	movs	r3, #2
 8003304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003306:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800330c:	2308      	movs	r3, #8
 800330e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003310:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003314:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003316:	2302      	movs	r3, #2
 8003318:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800331a:	2307      	movs	r3, #7
 800331c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800331e:	f107 0320 	add.w	r3, r7, #32
 8003322:	4618      	mov	r0, r3
 8003324:	f003 f9a0 	bl	8006668 <HAL_RCC_OscConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800332e:	f000 fb57 	bl	80039e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003332:	230f      	movs	r3, #15
 8003334:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003336:	2302      	movs	r3, #2
 8003338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800333e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	2105      	movs	r1, #5
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fc01 	bl	8006b58 <HAL_RCC_ClockConfig>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800335c:	f000 fb40 	bl	80039e0 <Error_Handler>
  }
}
 8003360:	bf00      	nop
 8003362:	3750      	adds	r7, #80	@ 0x50
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000

08003370 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003374:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <MX_I2C3_Init+0x74>)
 8003376:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <MX_I2C3_Init+0x78>)
 8003378:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800337a:	4b1a      	ldr	r3, [pc, #104]	@ (80033e4 <MX_I2C3_Init+0x74>)
 800337c:	4a1b      	ldr	r2, [pc, #108]	@ (80033ec <MX_I2C3_Init+0x7c>)
 800337e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003380:	4b18      	ldr	r3, [pc, #96]	@ (80033e4 <MX_I2C3_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003386:	4b17      	ldr	r3, [pc, #92]	@ (80033e4 <MX_I2C3_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800338c:	4b15      	ldr	r3, [pc, #84]	@ (80033e4 <MX_I2C3_Init+0x74>)
 800338e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003392:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003394:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <MX_I2C3_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <MX_I2C3_Init+0x74>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033a0:	4b10      	ldr	r3, [pc, #64]	@ (80033e4 <MX_I2C3_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033a6:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <MX_I2C3_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033ac:	480d      	ldr	r0, [pc, #52]	@ (80033e4 <MX_I2C3_Init+0x74>)
 80033ae:	f001 fe15 	bl	8004fdc <HAL_I2C_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80033b8:	f000 fb12 	bl	80039e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033bc:	2100      	movs	r1, #0
 80033be:	4809      	ldr	r0, [pc, #36]	@ (80033e4 <MX_I2C3_Init+0x74>)
 80033c0:	f002 fe30 	bl	8006024 <HAL_I2CEx_ConfigAnalogFilter>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80033ca:	f000 fb09 	bl	80039e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80033ce:	2100      	movs	r1, #0
 80033d0:	4804      	ldr	r0, [pc, #16]	@ (80033e4 <MX_I2C3_Init+0x74>)
 80033d2:	f002 fe63 	bl	800609c <HAL_I2CEx_ConfigDigitalFilter>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80033dc:	f000 fb00 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20025aac 	.word	0x20025aac
 80033e8:	40005c00 	.word	0x40005c00
 80033ec:	000186a0 	.word	0x000186a0

080033f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b09a      	sub	sp, #104	@ 0x68
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80033f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033fa:	2234      	movs	r2, #52	@ 0x34
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 f93d 	bl	800867e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003404:	463b      	mov	r3, r7
 8003406:	2234      	movs	r2, #52	@ 0x34
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f005 f937 	bl	800867e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003410:	4b4e      	ldr	r3, [pc, #312]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003412:	4a4f      	ldr	r2, [pc, #316]	@ (8003550 <MX_LTDC_Init+0x160>)
 8003414:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003416:	4b4d      	ldr	r3, [pc, #308]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003418:	2200      	movs	r2, #0
 800341a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800341c:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <MX_LTDC_Init+0x15c>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003422:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003424:	2200      	movs	r2, #0
 8003426:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003428:	4b48      	ldr	r3, [pc, #288]	@ (800354c <MX_LTDC_Init+0x15c>)
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800342e:	4b47      	ldr	r3, [pc, #284]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003430:	2207      	movs	r2, #7
 8003432:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003434:	4b45      	ldr	r3, [pc, #276]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003436:	2203      	movs	r2, #3
 8003438:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800343a:	4b44      	ldr	r3, [pc, #272]	@ (800354c <MX_LTDC_Init+0x15c>)
 800343c:	220e      	movs	r2, #14
 800343e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003440:	4b42      	ldr	r3, [pc, #264]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003442:	2205      	movs	r2, #5
 8003444:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003446:	4b41      	ldr	r3, [pc, #260]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003448:	f240 228e 	movw	r2, #654	@ 0x28e
 800344c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800344e:	4b3f      	ldr	r3, [pc, #252]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003450:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8003454:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8003456:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003458:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800345e:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003460:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003466:	4b39      	ldr	r3, [pc, #228]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003476:	4b35      	ldr	r3, [pc, #212]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800347e:	4833      	ldr	r0, [pc, #204]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003480:	f002 fe4c 	bl	800611c <HAL_LTDC_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800348a:	f000 faa9 	bl	80039e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800349e:	2300      	movs	r3, #0
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80034aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034ae:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80034b0:	2305      	movs	r3, #5
 80034b2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80034d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034d6:	2200      	movs	r2, #0
 80034d8:	4619      	mov	r1, r3
 80034da:	481c      	ldr	r0, [pc, #112]	@ (800354c <MX_LTDC_Init+0x15c>)
 80034dc:	f002 feee 	bl	80062bc <HAL_LTDC_ConfigLayer>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80034e6:	f000 fa7b 	bl	80039e0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800350a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800350c:	2305      	movs	r3, #5
 800350e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800352e:	463b      	mov	r3, r7
 8003530:	2201      	movs	r2, #1
 8003532:	4619      	mov	r1, r3
 8003534:	4805      	ldr	r0, [pc, #20]	@ (800354c <MX_LTDC_Init+0x15c>)
 8003536:	f002 fec1 	bl	80062bc <HAL_LTDC_ConfigLayer>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003540:	f000 fa4e 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003544:	bf00      	nop
 8003546:	3768      	adds	r7, #104	@ 0x68
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20025b10 	.word	0x20025b10
 8003550:	40016800 	.word	0x40016800

08003554 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <MX_RNG_Init+0x20>)
 800355a:	4a07      	ldr	r2, [pc, #28]	@ (8003578 <MX_RNG_Init+0x24>)
 800355c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800355e:	4805      	ldr	r0, [pc, #20]	@ (8003574 <MX_RNG_Init+0x20>)
 8003560:	f003 fec6 	bl	80072f0 <HAL_RNG_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800356a:	f000 fa39 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20025b00 	.word	0x20025b00
 8003578:	50060800 	.word	0x50060800

0800357c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003580:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <MX_SPI5_Init+0x64>)
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <MX_SPI5_Init+0x68>)
 8003584:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003586:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <MX_SPI5_Init+0x64>)
 8003588:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800358c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800358e:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <MX_SPI5_Init+0x64>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003594:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <MX_SPI5_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <MX_SPI5_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035a0:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ae:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035bc:	2200      	movs	r2, #0
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c0:	4b07      	ldr	r3, [pc, #28]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035c8:	220a      	movs	r2, #10
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80035cc:	4804      	ldr	r0, [pc, #16]	@ (80035e0 <MX_SPI5_Init+0x64>)
 80035ce:	f003 ff0f 	bl	80073f0 <HAL_SPI_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80035d8:	f000 fa02 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20025bb8 	.word	0x20025bb8
 80035e4:	40015000 	.word	0x40015000

080035e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fc:	463b      	mov	r3, r7
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003604:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <MX_TIM2_Init+0x94>)
 8003606:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800360a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800360c:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <MX_TIM2_Init+0x94>)
 800360e:	2200      	movs	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003612:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <MX_TIM2_Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839999999;
 8003618:	4b18      	ldr	r3, [pc, #96]	@ (800367c <MX_TIM2_Init+0x94>)
 800361a:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <MX_TIM2_Init+0x98>)
 800361c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <MX_TIM2_Init+0x94>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <MX_TIM2_Init+0x94>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800362a:	4814      	ldr	r0, [pc, #80]	@ (800367c <MX_TIM2_Init+0x94>)
 800362c:	f004 f9c0 	bl	80079b0 <HAL_TIM_Base_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003636:	f000 f9d3 	bl	80039e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800363e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003640:	f107 0308 	add.w	r3, r7, #8
 8003644:	4619      	mov	r1, r3
 8003646:	480d      	ldr	r0, [pc, #52]	@ (800367c <MX_TIM2_Init+0x94>)
 8003648:	f004 fa01 	bl	8007a4e <HAL_TIM_ConfigClockSource>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003652:	f000 f9c5 	bl	80039e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800365e:	463b      	mov	r3, r7
 8003660:	4619      	mov	r1, r3
 8003662:	4806      	ldr	r0, [pc, #24]	@ (800367c <MX_TIM2_Init+0x94>)
 8003664:	f004 fc00 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800366e:	f000 f9b7 	bl	80039e0 <Error_Handler>
  
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20025c10 	.word	0x20025c10
 8003680:	321161ff 	.word	0x321161ff

08003684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08e      	sub	sp, #56	@ 0x38
 8003688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	4bb2      	ldr	r3, [pc, #712]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	4ab1      	ldr	r2, [pc, #708]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036aa:	4baf      	ldr	r3, [pc, #700]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	4bab      	ldr	r3, [pc, #684]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	4aaa      	ldr	r2, [pc, #680]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036c0:	f043 0320 	orr.w	r3, r3, #32
 80036c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	4ba4      	ldr	r3, [pc, #656]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	4aa3      	ldr	r2, [pc, #652]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e2:	4ba1      	ldr	r3, [pc, #644]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	4b9d      	ldr	r3, [pc, #628]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	4a9c      	ldr	r2, [pc, #624]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036fe:	4b9a      	ldr	r3, [pc, #616]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	4b96      	ldr	r3, [pc, #600]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a95      	ldr	r2, [pc, #596]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b93      	ldr	r3, [pc, #588]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b8f      	ldr	r3, [pc, #572]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a8e      	ldr	r2, [pc, #568]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b8c      	ldr	r3, [pc, #560]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a87      	ldr	r2, [pc, #540]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b85      	ldr	r3, [pc, #532]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	4b81      	ldr	r3, [pc, #516]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a80      	ldr	r2, [pc, #512]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b7e      	ldr	r3, [pc, #504]	@ (8003968 <MX_GPIO_Init+0x2e4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800377a:	2200      	movs	r2, #0
 800377c:	2116      	movs	r1, #22
 800377e:	487b      	ldr	r0, [pc, #492]	@ (800396c <MX_GPIO_Init+0x2e8>)
 8003780:	f001 fc12 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	4879      	ldr	r0, [pc, #484]	@ (8003970 <MX_GPIO_Init+0x2ec>)
 800378a:	f001 fc0d 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800378e:	2200      	movs	r2, #0
 8003790:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003794:	4877      	ldr	r0, [pc, #476]	@ (8003974 <MX_GPIO_Init+0x2f0>)
 8003796:	f001 fc07 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800379a:	2200      	movs	r2, #0
 800379c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80037a0:	4875      	ldr	r0, [pc, #468]	@ (8003978 <MX_GPIO_Init+0x2f4>)
 80037a2:	f001 fc01 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80037a6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037b8:	230c      	movs	r3, #12
 80037ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c0:	4619      	mov	r1, r3
 80037c2:	486e      	ldr	r0, [pc, #440]	@ (800397c <MX_GPIO_Init+0x2f8>)
 80037c4:	f001 f938 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80037c8:	2301      	movs	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037d8:	230c      	movs	r3, #12
 80037da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80037dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e0:	4619      	mov	r1, r3
 80037e2:	4862      	ldr	r0, [pc, #392]	@ (800396c <MX_GPIO_Init+0x2e8>)
 80037e4:	f001 f928 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80037e8:	2316      	movs	r3, #22
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2300      	movs	r3, #0
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037fc:	4619      	mov	r1, r3
 80037fe:	485b      	ldr	r0, [pc, #364]	@ (800396c <MX_GPIO_Init+0x2e8>)
 8003800:	f001 f91a 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003804:	f248 0307 	movw	r3, #32775	@ 0x8007
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800380a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003818:	4619      	mov	r1, r3
 800381a:	4855      	ldr	r0, [pc, #340]	@ (8003970 <MX_GPIO_Init+0x2ec>)
 800381c:	f001 f90c 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003824:	2301      	movs	r3, #1
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	484e      	ldr	r0, [pc, #312]	@ (8003970 <MX_GPIO_Init+0x2ec>)
 8003838:	f001 f8fe 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800383c:	2320      	movs	r3, #32
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003840:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	4846      	ldr	r0, [pc, #280]	@ (800396c <MX_GPIO_Init+0x2e8>)
 8003852:	f001 f8f1 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003856:	2304      	movs	r3, #4
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800385a:	2300      	movs	r3, #0
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003866:	4619      	mov	r1, r3
 8003868:	4845      	ldr	r0, [pc, #276]	@ (8003980 <MX_GPIO_Init+0x2fc>)
 800386a:	f001 f8e5 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800386e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003880:	230c      	movs	r3, #12
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003888:	4619      	mov	r1, r3
 800388a:	483b      	ldr	r0, [pc, #236]	@ (8003978 <MX_GPIO_Init+0x2f4>)
 800388c:	f001 f8d4 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003890:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389e:	2303      	movs	r3, #3
 80038a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038a2:	230c      	movs	r3, #12
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038aa:	4619      	mov	r1, r3
 80038ac:	4835      	ldr	r0, [pc, #212]	@ (8003984 <MX_GPIO_Init+0x300>)
 80038ae:	f001 f8c3 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80038b2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80038c4:	230c      	movs	r3, #12
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038cc:	4619      	mov	r1, r3
 80038ce:	482c      	ldr	r0, [pc, #176]	@ (8003980 <MX_GPIO_Init+0x2fc>)
 80038d0:	f001 f8b2 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80038d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038da:	2300      	movs	r3, #0
 80038dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80038e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038e6:	4619      	mov	r1, r3
 80038e8:	4825      	ldr	r0, [pc, #148]	@ (8003980 <MX_GPIO_Init+0x2fc>)
 80038ea:	f001 f8a5 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80038ee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003900:	230c      	movs	r3, #12
 8003902:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003908:	4619      	mov	r1, r3
 800390a:	481a      	ldr	r0, [pc, #104]	@ (8003974 <MX_GPIO_Init+0x2f0>)
 800390c:	f001 f894 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003910:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003916:	2300      	movs	r3, #0
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800391e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003922:	4619      	mov	r1, r3
 8003924:	4813      	ldr	r0, [pc, #76]	@ (8003974 <MX_GPIO_Init+0x2f0>)
 8003926:	f001 f887 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800392a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003930:	2301      	movs	r3, #1
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003938:	2300      	movs	r3, #0
 800393a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800393c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003940:	4619      	mov	r1, r3
 8003942:	480c      	ldr	r0, [pc, #48]	@ (8003974 <MX_GPIO_Init+0x2f0>)
 8003944:	f001 f878 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003948:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003956:	2303      	movs	r3, #3
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800395a:	2307      	movs	r3, #7
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003962:	4619      	mov	r1, r3
 8003964:	e010      	b.n	8003988 <MX_GPIO_Init+0x304>
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40020800 	.word	0x40020800
 8003970:	40020000 	.word	0x40020000
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40021800 	.word	0x40021800
 800397c:	40021400 	.word	0x40021400
 8003980:	40020400 	.word	0x40020400
 8003984:	40021000 	.word	0x40021000
 8003988:	4812      	ldr	r0, [pc, #72]	@ (80039d4 <MX_GPIO_Init+0x350>)
 800398a:	f001 f855 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800398e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a4:	4619      	mov	r1, r3
 80039a6:	480c      	ldr	r0, [pc, #48]	@ (80039d8 <MX_GPIO_Init+0x354>)
 80039a8:	f001 f846 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80039ac:	2360      	movs	r3, #96	@ 0x60
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039bc:	230c      	movs	r3, #12
 80039be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c4:	4619      	mov	r1, r3
 80039c6:	4805      	ldr	r0, [pc, #20]	@ (80039dc <MX_GPIO_Init+0x358>)
 80039c8:	f001 f836 	bl	8004a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039cc:	bf00      	nop
 80039ce:	3738      	adds	r7, #56	@ 0x38
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40021800 	.word	0x40021800
 80039dc:	40020400 	.word	0x40020400

080039e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80039e4:	b672      	cpsid	i
}
 80039e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <Error_Handler+0x8>

080039ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_MspInit+0x4c>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_MspInit+0x4c>)
 80039fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	4a08      	ldr	r2, [pc, #32]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a2a:	2007      	movs	r0, #7
 8003a2c:	f000 ffb4 	bl	8004998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a29      	ldr	r2, [pc, #164]	@ (8003b00 <HAL_I2C_MspInit+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d14b      	bne.n	8003af6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b28      	ldr	r3, [pc, #160]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4a27      	ldr	r2, [pc, #156]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6e:	4b25      	ldr	r3, [pc, #148]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4b21      	ldr	r3, [pc, #132]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4a20      	ldr	r2, [pc, #128]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a9c:	2312      	movs	r3, #18
 8003a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4815      	ldr	r0, [pc, #84]	@ (8003b08 <HAL_I2C_MspInit+0xcc>)
 8003ab4:	f000 ffc0 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003abe:	2312      	movs	r3, #18
 8003ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003aca:	2304      	movs	r3, #4
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480d      	ldr	r0, [pc, #52]	@ (8003b0c <HAL_I2C_MspInit+0xd0>)
 8003ad6:	f000 ffaf 	bl	8004a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	4a08      	ldr	r2, [pc, #32]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003ae4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_I2C_MspInit+0xc8>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003af6:	bf00      	nop
 8003af8:	3728      	adds	r7, #40	@ 0x28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40005c00 	.word	0x40005c00
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020000 	.word	0x40020000

08003b10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b09a      	sub	sp, #104	@ 0x68
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b2c:	2230      	movs	r2, #48	@ 0x30
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f004 fda4 	bl	800867e <memset>
  if(hltdc->Instance==LTDC)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a81      	ldr	r2, [pc, #516]	@ (8003d40 <HAL_LTDC_MspInit+0x230>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f040 80fb 	bne.w	8003d38 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003b42:	2308      	movs	r3, #8
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8003b46:	23c8      	movs	r3, #200	@ 0xc8
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8003b4e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003b52:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fa09 	bl	8006f70 <HAL_RCCEx_PeriphCLKConfig>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8003b64:	f7ff ff3c 	bl	80039e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	623b      	str	r3, [r7, #32]
 8003b6c:	4b75      	ldr	r3, [pc, #468]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b70:	4a74      	ldr	r2, [pc, #464]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003b72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b76:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b78:	4b72      	ldr	r3, [pc, #456]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	4b6e      	ldr	r3, [pc, #440]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003b8e:	f043 0320 	orr.w	r3, r3, #32
 8003b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b94:	4b6b      	ldr	r3, [pc, #428]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	4b67      	ldr	r3, [pc, #412]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	4a66      	ldr	r2, [pc, #408]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb0:	4b64      	ldr	r3, [pc, #400]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	4b60      	ldr	r3, [pc, #384]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4a5f      	ldr	r2, [pc, #380]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bcc:	4b5d      	ldr	r3, [pc, #372]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	4b59      	ldr	r3, [pc, #356]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	4a58      	ldr	r2, [pc, #352]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be8:	4b56      	ldr	r3, [pc, #344]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	4b52      	ldr	r3, [pc, #328]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	4a51      	ldr	r2, [pc, #324]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c04:	4b4f      	ldr	r3, [pc, #316]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	4b4b      	ldr	r3, [pc, #300]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	4a4a      	ldr	r2, [pc, #296]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003c1a:	f043 0308 	orr.w	r3, r3, #8
 8003c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c20:	4b48      	ldr	r3, [pc, #288]	@ (8003d44 <HAL_LTDC_MspInit+0x234>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c30:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c3e:	230e      	movs	r3, #14
 8003c40:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003c42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c46:	4619      	mov	r1, r3
 8003c48:	483f      	ldr	r0, [pc, #252]	@ (8003d48 <HAL_LTDC_MspInit+0x238>)
 8003c4a:	f000 fef5 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003c4e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003c52:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c60:	230e      	movs	r3, #14
 8003c62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4838      	ldr	r0, [pc, #224]	@ (8003d4c <HAL_LTDC_MspInit+0x23c>)
 8003c6c:	f000 fee4 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003c70:	2303      	movs	r3, #3
 8003c72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003c80:	2309      	movs	r3, #9
 8003c82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4831      	ldr	r0, [pc, #196]	@ (8003d50 <HAL_LTDC_MspInit+0x240>)
 8003c8c:	f000 fed4 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003c90:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003c94:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ca2:	230e      	movs	r3, #14
 8003ca4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003caa:	4619      	mov	r1, r3
 8003cac:	4828      	ldr	r0, [pc, #160]	@ (8003d50 <HAL_LTDC_MspInit+0x240>)
 8003cae:	f000 fec3 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003cb2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003cb6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cc4:	230e      	movs	r3, #14
 8003cc6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4821      	ldr	r0, [pc, #132]	@ (8003d54 <HAL_LTDC_MspInit+0x244>)
 8003cd0:	f000 feb2 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003cd4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003cd8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ce6:	230e      	movs	r3, #14
 8003ce8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4819      	ldr	r0, [pc, #100]	@ (8003d58 <HAL_LTDC_MspInit+0x248>)
 8003cf2:	f000 fea1 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003cf6:	2348      	movs	r3, #72	@ 0x48
 8003cf8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d02:	2300      	movs	r3, #0
 8003d04:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d06:	230e      	movs	r3, #14
 8003d08:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4812      	ldr	r0, [pc, #72]	@ (8003d5c <HAL_LTDC_MspInit+0x24c>)
 8003d12:	f000 fe91 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003d16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d24:	2300      	movs	r3, #0
 8003d26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d28:	2309      	movs	r3, #9
 8003d2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d30:	4619      	mov	r1, r3
 8003d32:	4808      	ldr	r0, [pc, #32]	@ (8003d54 <HAL_LTDC_MspInit+0x244>)
 8003d34:	f000 fe80 	bl	8004a38 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003d38:	bf00      	nop
 8003d3a:	3768      	adds	r7, #104	@ 0x68
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40016800 	.word	0x40016800
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40021400 	.word	0x40021400
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	40020400 	.word	0x40020400
 8003d54:	40021800 	.word	0x40021800
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020c00 	.word	0x40020c00

08003d60 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d9c <HAL_RNG_MspInit+0x3c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10d      	bne.n	8003d8e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <HAL_RNG_MspInit+0x40>)
 8003d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7a:	4a09      	ldr	r2, [pc, #36]	@ (8003da0 <HAL_RNG_MspInit+0x40>)
 8003d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d80:	6353      	str	r3, [r2, #52]	@ 0x34
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <HAL_RNG_MspInit+0x40>)
 8003d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	50060800 	.word	0x50060800
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	@ 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <HAL_SPI_MspInit+0x84>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d12c      	bne.n	8003e20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4b18      	ldr	r3, [pc, #96]	@ (8003e2c <HAL_SPI_MspInit+0x88>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_SPI_MspInit+0x88>)
 8003dd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dd6:	4b15      	ldr	r3, [pc, #84]	@ (8003e2c <HAL_SPI_MspInit+0x88>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <HAL_SPI_MspInit+0x88>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	4a10      	ldr	r2, [pc, #64]	@ (8003e2c <HAL_SPI_MspInit+0x88>)
 8003dec:	f043 0320 	orr.w	r3, r3, #32
 8003df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <HAL_SPI_MspInit+0x88>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003dfe:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	2302      	movs	r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e10:	2305      	movs	r3, #5
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4805      	ldr	r0, [pc, #20]	@ (8003e30 <HAL_SPI_MspInit+0x8c>)
 8003e1c:	f000 fe0c 	bl	8004a38 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003e20:	bf00      	nop
 8003e22:	3728      	adds	r7, #40	@ 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40015000 	.word	0x40015000
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40021400 	.word	0x40021400

08003e34 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a08      	ldr	r2, [pc, #32]	@ (8003e64 <HAL_SPI_MspDeInit+0x30>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10a      	bne.n	8003e5c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003e46:	4b08      	ldr	r3, [pc, #32]	@ (8003e68 <HAL_SPI_MspDeInit+0x34>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4a07      	ldr	r2, [pc, #28]	@ (8003e68 <HAL_SPI_MspDeInit+0x34>)
 8003e4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003e52:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003e56:	4805      	ldr	r0, [pc, #20]	@ (8003e6c <HAL_SPI_MspDeInit+0x38>)
 8003e58:	f000 ff9a 	bl	8004d90 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40015000 	.word	0x40015000
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40021400 	.word	0x40021400

08003e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e80:	d10d      	bne.n	8003e9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <HAL_TIM_Base_MspInit+0x3c>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <HAL_TIM_Base_MspInit+0x3c>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_TIM_Base_MspInit+0x3c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <NMI_Handler+0x4>

08003eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <HardFault_Handler+0x4>

08003ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <MemManage_Handler+0x4>

08003ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <BusFault_Handler+0x4>

08003ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <UsageFault_Handler+0x4>

08003ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f06:	f000 fc0f 	bl	8004728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003f14:	f000 f9ce 	bl	80042b4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003f18:	f000 f98e 	bl	8004238 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	2103      	movs	r1, #3
 8003f20:	2082      	movs	r0, #130	@ 0x82
 8003f22:	f000 fa1b 	bl	800435c <I2C3_Write>
    HAL_Delay(5);
 8003f26:	2005      	movs	r0, #5
 8003f28:	f000 fc1e 	bl	8004768 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2103      	movs	r1, #3
 8003f30:	2082      	movs	r0, #130	@ 0x82
 8003f32:	f000 fa13 	bl	800435c <I2C3_Write>
    HAL_Delay(2);
 8003f36:	2002      	movs	r0, #2
 8003f38:	f000 fc16 	bl	8004768 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003f3c:	1cba      	adds	r2, r7, #2
 8003f3e:	2302      	movs	r3, #2
 8003f40:	2100      	movs	r1, #0
 8003f42:	2082      	movs	r0, #130	@ 0x82
 8003f44:	f000 fa5a 	bl	80043fc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003f48:	887b      	ldrh	r3, [r7, #2]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f640 0211 	movw	r2, #2065	@ 0x811
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d001      	beq.n	8003f68 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e075      	b.n	8004054 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003f68:	2202      	movs	r2, #2
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	2082      	movs	r0, #130	@ 0x82
 8003f6e:	f000 f9f5 	bl	800435c <I2C3_Write>
    HAL_Delay(5);
 8003f72:	2005      	movs	r0, #5
 8003f74:	f000 fbf8 	bl	8004768 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	2082      	movs	r0, #130	@ 0x82
 8003f7e:	f000 f9ed 	bl	800435c <I2C3_Write>
    HAL_Delay(2);
 8003f82:	2002      	movs	r0, #2
 8003f84:	f000 fbf0 	bl	8004768 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003f88:	2004      	movs	r0, #4
 8003f8a:	f000 f867 	bl	800405c <STMPE811_Read>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003f92:	797b      	ldrb	r3, [r7, #5]
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003f9a:	797b      	ldrb	r3, [r7, #5]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	2082      	movs	r0, #130	@ 0x82
 8003fa2:	f000 f9db 	bl	800435c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003fa6:	2004      	movs	r0, #4
 8003fa8:	f000 f858 	bl	800405c <STMPE811_Read>
 8003fac:	4603      	mov	r3, r0
 8003fae:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003fb0:	797b      	ldrb	r3, [r7, #5]
 8003fb2:	f023 0302 	bic.w	r3, r3, #2
 8003fb6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003fb8:	797b      	ldrb	r3, [r7, #5]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	2082      	movs	r0, #130	@ 0x82
 8003fc0:	f000 f9cc 	bl	800435c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003fc4:	2249      	movs	r2, #73	@ 0x49
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	2082      	movs	r0, #130	@ 0x82
 8003fca:	f000 f9c7 	bl	800435c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003fce:	2002      	movs	r0, #2
 8003fd0:	f000 fbca 	bl	8004768 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2121      	movs	r1, #33	@ 0x21
 8003fd8:	2082      	movs	r0, #130	@ 0x82
 8003fda:	f000 f9bf 	bl	800435c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003fde:	2017      	movs	r0, #23
 8003fe0:	f000 f83c 	bl	800405c <STMPE811_Read>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003fe8:	797b      	ldrb	r3, [r7, #5]
 8003fea:	f043 031e 	orr.w	r3, r3, #30
 8003fee:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003ff0:	797b      	ldrb	r3, [r7, #5]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2117      	movs	r1, #23
 8003ff6:	2082      	movs	r0, #130	@ 0x82
 8003ff8:	f000 f9b0 	bl	800435c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003ffc:	229a      	movs	r2, #154	@ 0x9a
 8003ffe:	2141      	movs	r1, #65	@ 0x41
 8004000:	2082      	movs	r0, #130	@ 0x82
 8004002:	f000 f9ab 	bl	800435c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8004006:	2201      	movs	r2, #1
 8004008:	214a      	movs	r1, #74	@ 0x4a
 800400a:	2082      	movs	r0, #130	@ 0x82
 800400c:	f000 f9a6 	bl	800435c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004010:	2201      	movs	r2, #1
 8004012:	214b      	movs	r1, #75	@ 0x4b
 8004014:	2082      	movs	r0, #130	@ 0x82
 8004016:	f000 f9a1 	bl	800435c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800401a:	2200      	movs	r2, #0
 800401c:	214b      	movs	r1, #75	@ 0x4b
 800401e:	2082      	movs	r0, #130	@ 0x82
 8004020:	f000 f99c 	bl	800435c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8004024:	2201      	movs	r2, #1
 8004026:	2156      	movs	r1, #86	@ 0x56
 8004028:	2082      	movs	r0, #130	@ 0x82
 800402a:	f000 f997 	bl	800435c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800402e:	2201      	movs	r2, #1
 8004030:	2158      	movs	r1, #88	@ 0x58
 8004032:	2082      	movs	r0, #130	@ 0x82
 8004034:	f000 f992 	bl	800435c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8004038:	2203      	movs	r2, #3
 800403a:	2140      	movs	r1, #64	@ 0x40
 800403c:	2082      	movs	r0, #130	@ 0x82
 800403e:	f000 f98d 	bl	800435c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8004042:	22ff      	movs	r2, #255	@ 0xff
 8004044:	210b      	movs	r1, #11
 8004046:	2082      	movs	r0, #130	@ 0x82
 8004048:	f000 f988 	bl	800435c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800404c:	20c8      	movs	r0, #200	@ 0xc8
 800404e:	f000 fb8b 	bl	8004768 <HAL_Delay>

    return STMPE811_State_Ok;
 8004052:	2302      	movs	r3, #2

}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004066:	f107 020f 	add.w	r2, r7, #15
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4619      	mov	r1, r3
 800406e:	2082      	movs	r0, #130	@ 0x82
 8004070:	f000 f99e 	bl	80043b0 <I2C3_Read>

    return readData;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	791a      	ldrb	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800408e:	2040      	movs	r0, #64	@ 0x40
 8004090:	f7ff ffe4 	bl	800405c <STMPE811_Read>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8004098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	db0e      	blt.n	80040be <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80040a6:	2201      	movs	r2, #1
 80040a8:	214b      	movs	r1, #75	@ 0x4b
 80040aa:	2082      	movs	r0, #130	@ 0x82
 80040ac:	f000 f956 	bl	800435c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80040b0:	2200      	movs	r2, #0
 80040b2:	214b      	movs	r1, #75	@ 0x4b
 80040b4:	2082      	movs	r0, #130	@ 0x82
 80040b6:	f000 f951 	bl	800435c <I2C3_Write>

        return STMPE811_State_Released;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0a7      	b.n	800420e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	799b      	ldrb	r3, [r3, #6]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d117      	bne.n	80040f6 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f9b8 	bl	8004440 <TM_STMPE811_ReadX>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	885b      	ldrh	r3, [r3, #2]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fa0b 	bl	80044fc <TM_STMPE811_ReadY>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80040ec:	3301      	adds	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	805a      	strh	r2, [r3, #2]
 80040f4:	e048      	b.n	8004188 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	799b      	ldrb	r3, [r3, #6]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d112      	bne.n	8004124 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f99c 	bl	8004440 <TM_STMPE811_ReadX>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	885b      	ldrh	r3, [r3, #2]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f9f1 	bl	80044fc <TM_STMPE811_ReadY>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	805a      	strh	r2, [r3, #2]
 8004122:	e031      	b.n	8004188 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	799b      	ldrb	r3, [r3, #6]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d115      	bne.n	8004158 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	885b      	ldrh	r3, [r3, #2]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f985 	bl	8004440 <TM_STMPE811_ReadX>
 8004136:	4603      	mov	r3, r0
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f9da 	bl	80044fc <TM_STMPE811_ReadY>
 8004148:	4603      	mov	r3, r0
 800414a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800414e:	3301      	adds	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	e017      	b.n	8004188 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	799b      	ldrb	r3, [r3, #6]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d113      	bne.n	8004188 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f96b 	bl	8004440 <TM_STMPE811_ReadX>
 800416a:	4603      	mov	r3, r0
 800416c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f9be 	bl	80044fc <TM_STMPE811_ReadY>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004188:	2201      	movs	r2, #1
 800418a:	214b      	movs	r1, #75	@ 0x4b
 800418c:	2082      	movs	r0, #130	@ 0x82
 800418e:	f000 f8e5 	bl	800435c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004192:	2200      	movs	r2, #0
 8004194:	214b      	movs	r1, #75	@ 0x4b
 8004196:	2082      	movs	r0, #130	@ 0x82
 8004198:	f000 f8e0 	bl	800435c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	799b      	ldrb	r3, [r3, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <STMPE811_ReadTouch+0x12e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	799b      	ldrb	r3, [r3, #6]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d115      	bne.n	80041d8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d027      	beq.n	8004204 <STMPE811_ReadTouch+0x186>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	2bee      	cmp	r3, #238	@ 0xee
 80041ba:	d823      	bhi.n	8004204 <STMPE811_ReadTouch+0x186>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	885b      	ldrh	r3, [r3, #2]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01f      	beq.n	8004204 <STMPE811_ReadTouch+0x186>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	885b      	ldrh	r3, [r3, #2]
 80041c8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80041cc:	d81a      	bhi.n	8004204 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e01a      	b.n	800420e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d012      	beq.n	8004206 <STMPE811_ReadTouch+0x188>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80041e8:	d80d      	bhi.n	8004206 <STMPE811_ReadTouch+0x188>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	885b      	ldrh	r3, [r3, #2]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <STMPE811_ReadTouch+0x188>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	885b      	ldrh	r3, [r3, #2]
 80041f6:	2bee      	cmp	r3, #238	@ 0xee
 80041f8:	d805      	bhi.n	8004206 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8004200:	2300      	movs	r3, #0
 8004202:	e004      	b.n	800420e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8004204:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 800420c:	2301      	movs	r3, #1
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20025cac 	.word	0x20025cac

08004238 <I2C3_Init>:

static void I2C3_Init()
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <I2C3_Init+0x6c>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <I2C3_Init+0x6c>)
 8004248:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800424c:	6413      	str	r3, [r2, #64]	@ 0x40
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <I2C3_Init+0x6c>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800425a:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <I2C3_Init+0x70>)
 800425c:	4a13      	ldr	r2, [pc, #76]	@ (80042ac <I2C3_Init+0x74>)
 800425e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <I2C3_Init+0x70>)
 8004262:	4a13      	ldr	r2, [pc, #76]	@ (80042b0 <I2C3_Init+0x78>)
 8004264:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <I2C3_Init+0x70>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <I2C3_Init+0x70>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <I2C3_Init+0x70>)
 8004274:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004278:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800427a:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <I2C3_Init+0x70>)
 800427c:	2200      	movs	r2, #0
 800427e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004280:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <I2C3_Init+0x70>)
 8004282:	2200      	movs	r2, #0
 8004284:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004286:	4808      	ldr	r0, [pc, #32]	@ (80042a8 <I2C3_Init+0x70>)
 8004288:	f000 fea8 	bl	8004fdc <HAL_I2C_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004296:	bf00      	nop
 8004298:	e7fd      	b.n	8004296 <I2C3_Init+0x5e>
    }
    return;
 800429a:	bf00      	nop
}
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	20025c58 	.word	0x20025c58
 80042ac:	40005c00 	.word	0x40005c00
 80042b0:	000186a0 	.word	0x000186a0

080042b4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ba:	f107 030c 	add.w	r3, r7, #12
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <I2C3_MspInit+0x9c>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <I2C3_MspInit+0x9c>)
 80042d4:	f043 0304 	orr.w	r3, r3, #4
 80042d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042da:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <I2C3_MspInit+0x9c>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <I2C3_MspInit+0x9c>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	4a18      	ldr	r2, [pc, #96]	@ (8004350 <I2C3_MspInit+0x9c>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <I2C3_MspInit+0x9c>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004302:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004308:	2312      	movs	r3, #18
 800430a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004314:	2304      	movs	r3, #4
 8004316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4619      	mov	r1, r3
 800431e:	480d      	ldr	r0, [pc, #52]	@ (8004354 <I2C3_MspInit+0xa0>)
 8004320:	f000 fb8a 	bl	8004a38 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004328:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800432a:	2312      	movs	r3, #18
 800432c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004336:	2304      	movs	r3, #4
 8004338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	4619      	mov	r1, r3
 8004340:	4805      	ldr	r0, [pc, #20]	@ (8004358 <I2C3_MspInit+0xa4>)
 8004342:	f000 fb79 	bl	8004a38 <HAL_GPIO_Init>
    
}
 8004346:	bf00      	nop
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	40020800 	.word	0x40020800
 8004358:	40020000 	.word	0x40020000

0800435c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af04      	add	r7, sp, #16
 8004362:	4603      	mov	r3, r0
 8004364:	80fb      	strh	r3, [r7, #6]
 8004366:	460b      	mov	r3, r1
 8004368:	717b      	strb	r3, [r7, #5]
 800436a:	4613      	mov	r3, r2
 800436c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800436e:	793b      	ldrb	r3, [r7, #4]
 8004370:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004372:	797b      	ldrb	r3, [r7, #5]
 8004374:	b29a      	uxth	r2, r3
 8004376:	88f9      	ldrh	r1, [r7, #6]
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <I2C3_Write+0x48>)
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	2301      	movs	r3, #1
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	f107 030f 	add.w	r3, r7, #15
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2301      	movs	r3, #1
 8004388:	4807      	ldr	r0, [pc, #28]	@ (80043a8 <I2C3_Write+0x4c>)
 800438a:	f000 ff6b 	bl	8005264 <HAL_I2C_Mem_Write>
 800438e:	4603      	mov	r3, r0
 8004390:	461a      	mov	r2, r3
 8004392:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <I2C3_Write+0x50>)
 8004394:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004396:	f7ff ff3f 	bl	8004218 <verifyHAL_I2C_IS_OKAY>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	0003d090 	.word	0x0003d090
 80043a8:	20025c58 	.word	0x20025c58
 80043ac:	20025cac 	.word	0x20025cac

080043b0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af04      	add	r7, sp, #16
 80043b6:	4603      	mov	r3, r0
 80043b8:	603a      	str	r2, [r7, #0]
 80043ba:	71fb      	strb	r3, [r7, #7]
 80043bc:	460b      	mov	r3, r1
 80043be:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	b299      	uxth	r1, r3
 80043c4:	79bb      	ldrb	r3, [r7, #6]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <I2C3_Read+0x40>)
 80043ca:	9302      	str	r3, [sp, #8]
 80043cc:	2301      	movs	r3, #1
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	4807      	ldr	r0, [pc, #28]	@ (80043f4 <I2C3_Read+0x44>)
 80043d8:	f001 f83e 	bl	8005458 <HAL_I2C_Mem_Read>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <I2C3_Read+0x48>)
 80043e2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80043e4:	f7ff ff18 	bl	8004218 <verifyHAL_I2C_IS_OKAY>
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0003d090 	.word	0x0003d090
 80043f4:	20025c58 	.word	0x20025c58
 80043f8:	20025cac 	.word	0x20025cac

080043fc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af04      	add	r7, sp, #16
 8004402:	603a      	str	r2, [r7, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
 800440a:	460b      	mov	r3, r1
 800440c:	71bb      	strb	r3, [r7, #6]
 800440e:	4613      	mov	r3, r2
 8004410:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	b299      	uxth	r1, r3
 8004416:	79bb      	ldrb	r3, [r7, #6]
 8004418:	b29a      	uxth	r2, r3
 800441a:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <I2C3_MulitByteRead+0x3c>)
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	88bb      	ldrh	r3, [r7, #4]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2301      	movs	r3, #1
 8004428:	4804      	ldr	r0, [pc, #16]	@ (800443c <I2C3_MulitByteRead+0x40>)
 800442a:	f001 f815 	bl	8005458 <HAL_I2C_Mem_Read>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	0003d090 	.word	0x0003d090
 800443c:	20025c58 	.word	0x20025c58

08004440 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800444a:	204d      	movs	r0, #77	@ 0x4d
 800444c:	f7ff fe06 	bl	800405c <STMPE811_Read>
 8004450:	4603      	mov	r3, r0
 8004452:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004454:	204e      	movs	r0, #78	@ 0x4e
 8004456:	f7ff fe01 	bl	800405c <STMPE811_Read>
 800445a:	4603      	mov	r3, r0
 800445c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800445e:	7a7b      	ldrb	r3, [r7, #9]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	b21a      	sxth	r2, r3
 8004464:	7a3b      	ldrb	r3, [r7, #8]
 8004466:	b21b      	sxth	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800446c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004470:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004474:	4293      	cmp	r3, r2
 8004476:	dc06      	bgt.n	8004486 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800447e:	330c      	adds	r3, #12
 8004480:	b29b      	uxth	r3, r3
 8004482:	81fb      	strh	r3, [r7, #14]
 8004484:	e005      	b.n	8004492 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004486:	89fb      	ldrh	r3, [r7, #14]
 8004488:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800448c:	3308      	adds	r3, #8
 800448e:	b29b      	uxth	r3, r3
 8004490:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004496:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <TM_STMPE811_ReadX+0xb8>)
 8004498:	fb82 1203 	smull	r1, r2, r2, r3
 800449c:	441a      	add	r2, r3
 800449e:	10d2      	asrs	r2, r2, #3
 80044a0:	17db      	asrs	r3, r3, #31
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80044a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044aa:	2bef      	cmp	r3, #239	@ 0xef
 80044ac:	dd02      	ble.n	80044b4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80044ae:	23ef      	movs	r3, #239	@ 0xef
 80044b0:	81fb      	strh	r3, [r7, #14]
 80044b2:	e005      	b.n	80044c0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80044b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da01      	bge.n	80044c0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80044c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	dd05      	ble.n	80044d6 <TM_STMPE811_ReadX+0x96>
 80044ca:	89fa      	ldrh	r2, [r7, #14]
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b21b      	sxth	r3, r3
 80044d4:	e004      	b.n	80044e0 <TM_STMPE811_ReadX+0xa0>
 80044d6:	89fb      	ldrh	r3, [r7, #14]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	b29b      	uxth	r3, r3
 80044de:	b21b      	sxth	r3, r3
 80044e0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80044e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	dd01      	ble.n	80044ee <TM_STMPE811_ReadX+0xae>
        return val;
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	e000      	b.n	80044f0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80044ee:	88fb      	ldrh	r3, [r7, #6]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	88888889 	.word	0x88888889

080044fc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8004506:	204f      	movs	r0, #79	@ 0x4f
 8004508:	f7ff fda8 	bl	800405c <STMPE811_Read>
 800450c:	4603      	mov	r3, r0
 800450e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004510:	2050      	movs	r0, #80	@ 0x50
 8004512:	f7ff fda3 	bl	800405c <STMPE811_Read>
 8004516:	4603      	mov	r3, r0
 8004518:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800451a:	7a7b      	ldrb	r3, [r7, #9]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	b21a      	sxth	r2, r3
 8004520:	7a3b      	ldrb	r3, [r7, #8]
 8004522:	b21b      	sxth	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8004528:	89fb      	ldrh	r3, [r7, #14]
 800452a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800452e:	b29b      	uxth	r3, r3
 8004530:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004536:	4a19      	ldr	r2, [pc, #100]	@ (800459c <TM_STMPE811_ReadY+0xa0>)
 8004538:	fb82 1203 	smull	r1, r2, r2, r3
 800453c:	1052      	asrs	r2, r2, #1
 800453e:	17db      	asrs	r3, r3, #31
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004548:	2b00      	cmp	r3, #0
 800454a:	dc02      	bgt.n	8004552 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	81fb      	strh	r3, [r7, #14]
 8004550:	e007      	b.n	8004562 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004556:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800455a:	db02      	blt.n	8004562 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800455c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004560:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004562:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	429a      	cmp	r2, r3
 800456a:	dd05      	ble.n	8004578 <TM_STMPE811_ReadY+0x7c>
 800456c:	89fa      	ldrh	r2, [r7, #14]
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	b21b      	sxth	r3, r3
 8004576:	e004      	b.n	8004582 <TM_STMPE811_ReadY+0x86>
 8004578:	89fb      	ldrh	r3, [r7, #14]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	b29b      	uxth	r3, r3
 8004580:	b21b      	sxth	r3, r3
 8004582:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004588:	2b04      	cmp	r3, #4
 800458a:	dd01      	ble.n	8004590 <TM_STMPE811_ReadY+0x94>
        return val;
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	e000      	b.n	8004592 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004590:	88fb      	ldrh	r3, [r7, #6]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2e8ba2e9 	.word	0x2e8ba2e9

080045a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <_sbrk+0x5c>)
 80045aa:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <_sbrk+0x60>)
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045b4:	4b13      	ldr	r3, [pc, #76]	@ (8004604 <_sbrk+0x64>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045bc:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <_sbrk+0x64>)
 80045be:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <_sbrk+0x68>)
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <_sbrk+0x64>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d207      	bcs.n	80045e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045d0:	f004 f8a4 	bl	800871c <__errno>
 80045d4:	4603      	mov	r3, r0
 80045d6:	220c      	movs	r2, #12
 80045d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e009      	b.n	80045f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045e0:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <_sbrk+0x64>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <_sbrk+0x64>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	4a05      	ldr	r2, [pc, #20]	@ (8004604 <_sbrk+0x64>)
 80045f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20030000 	.word	0x20030000
 8004600:	00000400 	.word	0x00000400
 8004604:	20025cb0 	.word	0x20025cb0
 8004608:	20025eb0 	.word	0x20025eb0

0800460c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <SystemInit+0x20>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	4a05      	ldr	r2, [pc, #20]	@ (800462c <SystemInit+0x20>)
 8004618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800461c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004634:	f7ff ffea 	bl	800460c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004638:	480c      	ldr	r0, [pc, #48]	@ (800466c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800463a:	490d      	ldr	r1, [pc, #52]	@ (8004670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800463c:	4a0d      	ldr	r2, [pc, #52]	@ (8004674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800463e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004640:	e002      	b.n	8004648 <LoopCopyDataInit>

08004642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004646:	3304      	adds	r3, #4

08004648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800464a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800464c:	d3f9      	bcc.n	8004642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464e:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004650:	4c0a      	ldr	r4, [pc, #40]	@ (800467c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004654:	e001      	b.n	800465a <LoopFillZerobss>

08004656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004658:	3204      	adds	r2, #4

0800465a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800465a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800465c:	d3fb      	bcc.n	8004656 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800465e:	f004 f863 	bl	8008728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004662:	f7fe fd09 	bl	8003078 <main>
  bx  lr    
 8004666:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004668:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800466c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004670:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004674:	0800a5d0 	.word	0x0800a5d0
  ldr r2, =_sbss
 8004678:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800467c:	20025eb0 	.word	0x20025eb0

08004680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004680:	e7fe      	b.n	8004680 <ADC_IRQHandler>
	...

08004684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004688:	4b0e      	ldr	r3, [pc, #56]	@ (80046c4 <HAL_Init+0x40>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0d      	ldr	r2, [pc, #52]	@ (80046c4 <HAL_Init+0x40>)
 800468e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_Init+0x40>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0a      	ldr	r2, [pc, #40]	@ (80046c4 <HAL_Init+0x40>)
 800469a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800469e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a0:	4b08      	ldr	r3, [pc, #32]	@ (80046c4 <HAL_Init+0x40>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a07      	ldr	r2, [pc, #28]	@ (80046c4 <HAL_Init+0x40>)
 80046a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f000 f973 	bl	8004998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 f808 	bl	80046c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046b8:	f7ff f998 	bl	80039ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00

080046c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d0:	4b12      	ldr	r3, [pc, #72]	@ (800471c <HAL_InitTick+0x54>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_InitTick+0x58>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046de:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f999 	bl	8004a1e <HAL_SYSTICK_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e00e      	b.n	8004714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b0f      	cmp	r3, #15
 80046fa:	d80a      	bhi.n	8004712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046fc:	2200      	movs	r2, #0
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	f000 f953 	bl	80049ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004708:	4a06      	ldr	r2, [pc, #24]	@ (8004724 <HAL_InitTick+0x5c>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000010 	.word	0x20000010
 8004720:	20000018 	.word	0x20000018
 8004724:	20000014 	.word	0x20000014

08004728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_IncTick+0x20>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_IncTick+0x24>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4413      	add	r3, r2
 8004738:	4a04      	ldr	r2, [pc, #16]	@ (800474c <HAL_IncTick+0x24>)
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000018 	.word	0x20000018
 800474c:	20025cb4 	.word	0x20025cb4

08004750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return uwTick;
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <HAL_GetTick+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20025cb4 	.word	0x20025cb4

08004768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004770:	f7ff ffee 	bl	8004750 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d005      	beq.n	800478e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_Delay+0x44>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800478e:	bf00      	nop
 8004790:	f7ff ffde 	bl	8004750 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	429a      	cmp	r2, r3
 800479e:	d8f7      	bhi.n	8004790 <HAL_Delay+0x28>
  {
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000018 	.word	0x20000018

080047b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c0:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e2:	4a04      	ldr	r2, [pc, #16]	@ (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	60d3      	str	r3, [r2, #12]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047fc:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <__NVIC_GetPriorityGrouping+0x18>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 0307 	and.w	r3, r3, #7
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db0b      	blt.n	800483e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4907      	ldr	r1, [pc, #28]	@ (800484c <__NVIC_EnableIRQ+0x38>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e100 	.word	0xe000e100

08004850 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db12      	blt.n	8004888 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	490a      	ldr	r1, [pc, #40]	@ (8004894 <__NVIC_DisableIRQ+0x44>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2001      	movs	r0, #1
 8004872:	fa00 f202 	lsl.w	r2, r0, r2
 8004876:	3320      	adds	r3, #32
 8004878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800487c:	f3bf 8f4f 	dsb	sy
}
 8004880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004882:	f3bf 8f6f 	isb	sy
}
 8004886:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	e000e100 	.word	0xe000e100

08004898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	db0a      	blt.n	80048c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	490c      	ldr	r1, [pc, #48]	@ (80048e4 <__NVIC_SetPriority+0x4c>)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	0112      	lsls	r2, r2, #4
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	440b      	add	r3, r1
 80048bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c0:	e00a      	b.n	80048d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4908      	ldr	r1, [pc, #32]	@ (80048e8 <__NVIC_SetPriority+0x50>)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	3b04      	subs	r3, #4
 80048d0:	0112      	lsls	r2, r2, #4
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	440b      	add	r3, r1
 80048d6:	761a      	strb	r2, [r3, #24]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	e000e100 	.word	0xe000e100
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	@ 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f1c3 0307 	rsb	r3, r3, #7
 8004906:	2b04      	cmp	r3, #4
 8004908:	bf28      	it	cs
 800490a:	2304      	movcs	r3, #4
 800490c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3304      	adds	r3, #4
 8004912:	2b06      	cmp	r3, #6
 8004914:	d902      	bls.n	800491c <NVIC_EncodePriority+0x30>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3b03      	subs	r3, #3
 800491a:	e000      	b.n	800491e <NVIC_EncodePriority+0x32>
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	401a      	ands	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004934:	f04f 31ff 	mov.w	r1, #4294967295
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43d9      	mvns	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004944:	4313      	orrs	r3, r2
         );
}
 8004946:	4618      	mov	r0, r3
 8004948:	3724      	adds	r7, #36	@ 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004964:	d301      	bcc.n	800496a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004966:	2301      	movs	r3, #1
 8004968:	e00f      	b.n	800498a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496a:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <SysTick_Config+0x40>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004972:	210f      	movs	r1, #15
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	f7ff ff8e 	bl	8004898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <SysTick_Config+0x40>)
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004982:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <SysTick_Config+0x40>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000e010 	.word	0xe000e010

08004998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff05 	bl	80047b0 <__NVIC_SetPriorityGrouping>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c0:	f7ff ff1a 	bl	80047f8 <__NVIC_GetPriorityGrouping>
 80049c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff ff8e 	bl	80048ec <NVIC_EncodePriority>
 80049d0:	4602      	mov	r2, r0
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff5d 	bl	8004898 <__NVIC_SetPriority>
}
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff0d 	bl	8004814 <__NVIC_EnableIRQ>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ff1d 	bl	8004850 <__NVIC_DisableIRQ>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ff94 	bl	8004954 <SysTick_Config>
 8004a2c:	4603      	mov	r3, r0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	@ 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e177      	b.n	8004d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a54:	2201      	movs	r2, #1
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	f040 8166 	bne.w	8004d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d005      	beq.n	8004a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d130      	bne.n	8004aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	2203      	movs	r2, #3
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 0201 	and.w	r2, r3, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d017      	beq.n	8004b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2203      	movs	r2, #3
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d123      	bne.n	8004b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	08da      	lsrs	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3208      	adds	r2, #8
 8004b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	220f      	movs	r2, #15
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	08da      	lsrs	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3208      	adds	r2, #8
 8004b76:	69b9      	ldr	r1, [r7, #24]
 8004b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	2203      	movs	r2, #3
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0203 	and.w	r2, r3, #3
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80c0 	beq.w	8004d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	4b66      	ldr	r3, [pc, #408]	@ (8004d5c <HAL_GPIO_Init+0x324>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	4a65      	ldr	r2, [pc, #404]	@ (8004d5c <HAL_GPIO_Init+0x324>)
 8004bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bce:	4b63      	ldr	r3, [pc, #396]	@ (8004d5c <HAL_GPIO_Init+0x324>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bda:	4a61      	ldr	r2, [pc, #388]	@ (8004d60 <HAL_GPIO_Init+0x328>)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	3302      	adds	r3, #2
 8004be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a58      	ldr	r2, [pc, #352]	@ (8004d64 <HAL_GPIO_Init+0x32c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d037      	beq.n	8004c76 <HAL_GPIO_Init+0x23e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a57      	ldr	r2, [pc, #348]	@ (8004d68 <HAL_GPIO_Init+0x330>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_GPIO_Init+0x23a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_GPIO_Init+0x334>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02b      	beq.n	8004c6e <HAL_GPIO_Init+0x236>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a55      	ldr	r2, [pc, #340]	@ (8004d70 <HAL_GPIO_Init+0x338>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d025      	beq.n	8004c6a <HAL_GPIO_Init+0x232>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a54      	ldr	r2, [pc, #336]	@ (8004d74 <HAL_GPIO_Init+0x33c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01f      	beq.n	8004c66 <HAL_GPIO_Init+0x22e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a53      	ldr	r2, [pc, #332]	@ (8004d78 <HAL_GPIO_Init+0x340>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d019      	beq.n	8004c62 <HAL_GPIO_Init+0x22a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a52      	ldr	r2, [pc, #328]	@ (8004d7c <HAL_GPIO_Init+0x344>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_GPIO_Init+0x226>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a51      	ldr	r2, [pc, #324]	@ (8004d80 <HAL_GPIO_Init+0x348>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00d      	beq.n	8004c5a <HAL_GPIO_Init+0x222>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a50      	ldr	r2, [pc, #320]	@ (8004d84 <HAL_GPIO_Init+0x34c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_Init+0x21e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4f      	ldr	r2, [pc, #316]	@ (8004d88 <HAL_GPIO_Init+0x350>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_GPIO_Init+0x21a>
 8004c4e:	2309      	movs	r3, #9
 8004c50:	e012      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c52:	230a      	movs	r3, #10
 8004c54:	e010      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c56:	2308      	movs	r3, #8
 8004c58:	e00e      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c5a:	2307      	movs	r3, #7
 8004c5c:	e00c      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c5e:	2306      	movs	r3, #6
 8004c60:	e00a      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c62:	2305      	movs	r3, #5
 8004c64:	e008      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c66:	2304      	movs	r3, #4
 8004c68:	e006      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e004      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e002      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c76:	2300      	movs	r3, #0
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	f002 0203 	and.w	r2, r2, #3
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	4093      	lsls	r3, r2
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c88:	4935      	ldr	r1, [pc, #212]	@ (8004d60 <HAL_GPIO_Init+0x328>)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	089b      	lsrs	r3, r3, #2
 8004c8e:	3302      	adds	r3, #2
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c96:	4b3d      	ldr	r3, [pc, #244]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cba:	4a34      	ldr	r2, [pc, #208]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cc0:	4b32      	ldr	r3, [pc, #200]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ce4:	4a29      	ldr	r2, [pc, #164]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cea:	4b28      	ldr	r3, [pc, #160]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d38:	4a14      	ldr	r2, [pc, #80]	@ (8004d8c <HAL_GPIO_Init+0x354>)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3301      	adds	r3, #1
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	f67f ae84 	bls.w	8004a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	3724      	adds	r7, #36	@ 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40020000 	.word	0x40020000
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	40020800 	.word	0x40020800
 8004d70:	40020c00 	.word	0x40020c00
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40021400 	.word	0x40021400
 8004d7c:	40021800 	.word	0x40021800
 8004d80:	40021c00 	.word	0x40021c00
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40022400 	.word	0x40022400
 8004d8c:	40013c00 	.word	0x40013c00

08004d90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e0d9      	b.n	8004f60 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dac:	2201      	movs	r2, #1
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	f040 80c9 	bne.w	8004f5a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8004f78 <HAL_GPIO_DeInit+0x1e8>)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	089b      	lsrs	r3, r3, #2
 8004dce:	3302      	adds	r3, #2
 8004dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a63      	ldr	r2, [pc, #396]	@ (8004f7c <HAL_GPIO_DeInit+0x1ec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d037      	beq.n	8004e62 <HAL_GPIO_DeInit+0xd2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a62      	ldr	r2, [pc, #392]	@ (8004f80 <HAL_GPIO_DeInit+0x1f0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d031      	beq.n	8004e5e <HAL_GPIO_DeInit+0xce>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a61      	ldr	r2, [pc, #388]	@ (8004f84 <HAL_GPIO_DeInit+0x1f4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02b      	beq.n	8004e5a <HAL_GPIO_DeInit+0xca>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a60      	ldr	r2, [pc, #384]	@ (8004f88 <HAL_GPIO_DeInit+0x1f8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d025      	beq.n	8004e56 <HAL_GPIO_DeInit+0xc6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f8c <HAL_GPIO_DeInit+0x1fc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01f      	beq.n	8004e52 <HAL_GPIO_DeInit+0xc2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a5e      	ldr	r2, [pc, #376]	@ (8004f90 <HAL_GPIO_DeInit+0x200>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d019      	beq.n	8004e4e <HAL_GPIO_DeInit+0xbe>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004f94 <HAL_GPIO_DeInit+0x204>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_GPIO_DeInit+0xba>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a5c      	ldr	r2, [pc, #368]	@ (8004f98 <HAL_GPIO_DeInit+0x208>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00d      	beq.n	8004e46 <HAL_GPIO_DeInit+0xb6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a5b      	ldr	r2, [pc, #364]	@ (8004f9c <HAL_GPIO_DeInit+0x20c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <HAL_GPIO_DeInit+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa0 <HAL_GPIO_DeInit+0x210>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_GPIO_DeInit+0xae>
 8004e3a:	2309      	movs	r3, #9
 8004e3c:	e012      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e3e:	230a      	movs	r3, #10
 8004e40:	e010      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e42:	2308      	movs	r3, #8
 8004e44:	e00e      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e46:	2307      	movs	r3, #7
 8004e48:	e00c      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e4a:	2306      	movs	r3, #6
 8004e4c:	e00a      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e4e:	2305      	movs	r3, #5
 8004e50:	e008      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e52:	2304      	movs	r3, #4
 8004e54:	e006      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e56:	2303      	movs	r3, #3
 8004e58:	e004      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e002      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_GPIO_DeInit+0xd4>
 8004e62:	2300      	movs	r3, #0
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	f002 0203 	and.w	r2, r2, #3
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	4093      	lsls	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d132      	bne.n	8004eda <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e74:	4b4b      	ldr	r3, [pc, #300]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	4949      	ldr	r1, [pc, #292]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e82:	4b48      	ldr	r3, [pc, #288]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	4946      	ldr	r1, [pc, #280]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004e90:	4b44      	ldr	r3, [pc, #272]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	4942      	ldr	r1, [pc, #264]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004e9e:	4b41      	ldr	r3, [pc, #260]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	493f      	ldr	r1, [pc, #252]	@ (8004fa4 <HAL_GPIO_DeInit+0x214>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	220f      	movs	r2, #15
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8004f78 <HAL_GPIO_DeInit+0x1e8>)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	089b      	lsrs	r3, r3, #2
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	482a      	ldr	r0, [pc, #168]	@ (8004f78 <HAL_GPIO_DeInit+0x1e8>)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	400a      	ands	r2, r1
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	2103      	movs	r1, #3
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	08da      	lsrs	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3208      	adds	r2, #8
 8004ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	220f      	movs	r2, #15
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	08d2      	lsrs	r2, r2, #3
 8004f10:	4019      	ands	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3208      	adds	r2, #8
 8004f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	2103      	movs	r1, #3
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	2101      	movs	r1, #1
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2103      	movs	r1, #3
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	401a      	ands	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b0f      	cmp	r3, #15
 8004f64:	f67f af22 	bls.w	8004dac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40013800 	.word	0x40013800
 8004f7c:	40020000 	.word	0x40020000
 8004f80:	40020400 	.word	0x40020400
 8004f84:	40020800 	.word	0x40020800
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40021400 	.word	0x40021400
 8004f94:	40021800 	.word	0x40021800
 8004f98:	40021c00 	.word	0x40021c00
 8004f9c:	40022000 	.word	0x40022000
 8004fa0:	40022400 	.word	0x40022400
 8004fa4:	40013c00 	.word	0x40013c00

08004fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fb8:	787b      	ldrb	r3, [r7, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fc4:	e003      	b.n	8004fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fc6:	887b      	ldrh	r3, [r7, #2]
 8004fc8:	041a      	lsls	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	619a      	str	r2, [r3, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e12b      	b.n	8005246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe fd1a 	bl	8003a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	@ 0x24
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800502e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800503e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005040:	f001 ff82 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 8005044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a81      	ldr	r2, [pc, #516]	@ (8005250 <HAL_I2C_Init+0x274>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d807      	bhi.n	8005060 <HAL_I2C_Init+0x84>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a80      	ldr	r2, [pc, #512]	@ (8005254 <HAL_I2C_Init+0x278>)
 8005054:	4293      	cmp	r3, r2
 8005056:	bf94      	ite	ls
 8005058:	2301      	movls	r3, #1
 800505a:	2300      	movhi	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e006      	b.n	800506e <HAL_I2C_Init+0x92>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a7d      	ldr	r2, [pc, #500]	@ (8005258 <HAL_I2C_Init+0x27c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	bf94      	ite	ls
 8005068:	2301      	movls	r3, #1
 800506a:	2300      	movhi	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0e7      	b.n	8005246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a78      	ldr	r2, [pc, #480]	@ (800525c <HAL_I2C_Init+0x280>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0c9b      	lsrs	r3, r3, #18
 8005080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005250 <HAL_I2C_Init+0x274>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d802      	bhi.n	80050b0 <HAL_I2C_Init+0xd4>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3301      	adds	r3, #1
 80050ae:	e009      	b.n	80050c4 <HAL_I2C_Init+0xe8>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	4a69      	ldr	r2, [pc, #420]	@ (8005260 <HAL_I2C_Init+0x284>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	3301      	adds	r3, #1
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	495c      	ldr	r1, [pc, #368]	@ (8005250 <HAL_I2C_Init+0x274>)
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d819      	bhi.n	8005118 <HAL_I2C_Init+0x13c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1e59      	subs	r1, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050f8:	400b      	ands	r3, r1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_I2C_Init+0x138>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1e59      	subs	r1, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fbb1 f3f3 	udiv	r3, r1, r3
 800510c:	3301      	adds	r3, #1
 800510e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005112:	e051      	b.n	80051b8 <HAL_I2C_Init+0x1dc>
 8005114:	2304      	movs	r3, #4
 8005116:	e04f      	b.n	80051b8 <HAL_I2C_Init+0x1dc>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d111      	bne.n	8005144 <HAL_I2C_Init+0x168>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1e58      	subs	r0, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	440b      	add	r3, r1
 800512e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005132:	3301      	adds	r3, #1
 8005134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e012      	b.n	800516a <HAL_I2C_Init+0x18e>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1e58      	subs	r0, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	0099      	lsls	r1, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	fbb0 f3f3 	udiv	r3, r0, r3
 800515a:	3301      	adds	r3, #1
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Init+0x196>
 800516e:	2301      	movs	r3, #1
 8005170:	e022      	b.n	80051b8 <HAL_I2C_Init+0x1dc>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10e      	bne.n	8005198 <HAL_I2C_Init+0x1bc>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1e58      	subs	r0, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	460b      	mov	r3, r1
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	440b      	add	r3, r1
 8005188:	fbb0 f3f3 	udiv	r3, r0, r3
 800518c:	3301      	adds	r3, #1
 800518e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005196:	e00f      	b.n	80051b8 <HAL_I2C_Init+0x1dc>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1e58      	subs	r0, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	0099      	lsls	r1, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ae:	3301      	adds	r3, #1
 80051b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	6809      	ldr	r1, [r1, #0]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6911      	ldr	r1, [r2, #16]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68d2      	ldr	r2, [r2, #12]
 80051f2:	4311      	orrs	r1, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	000186a0 	.word	0x000186a0
 8005254:	001e847f 	.word	0x001e847f
 8005258:	003d08ff 	.word	0x003d08ff
 800525c:	431bde83 	.word	0x431bde83
 8005260:	10624dd3 	.word	0x10624dd3

08005264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4603      	mov	r3, r0
 8005274:	817b      	strh	r3, [r7, #10]
 8005276:	460b      	mov	r3, r1
 8005278:	813b      	strh	r3, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800527e:	f7ff fa67 	bl	8004750 <HAL_GetTick>
 8005282:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b20      	cmp	r3, #32
 800528e:	f040 80d9 	bne.w	8005444 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2319      	movs	r3, #25
 8005298:	2201      	movs	r2, #1
 800529a:	496d      	ldr	r1, [pc, #436]	@ (8005450 <HAL_I2C_Mem_Write+0x1ec>)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fc8b 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
 80052aa:	e0cc      	b.n	8005446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_I2C_Mem_Write+0x56>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e0c5      	b.n	8005446 <HAL_I2C_Mem_Write+0x1e2>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d007      	beq.n	80052e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2221      	movs	r2, #33	@ 0x21
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2240      	movs	r2, #64	@ 0x40
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005310:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a4d      	ldr	r2, [pc, #308]	@ (8005454 <HAL_I2C_Mem_Write+0x1f0>)
 8005320:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005322:	88f8      	ldrh	r0, [r7, #6]
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	8979      	ldrh	r1, [r7, #10]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	4603      	mov	r3, r0
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fac2 	bl	80058bc <I2C_RequestMemoryWrite>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d052      	beq.n	80053e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e081      	b.n	8005446 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fd50 	bl	8005dec <I2C_WaitOnTXEFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	2b04      	cmp	r3, #4
 8005358:	d107      	bne.n	800536a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e06b      	b.n	8005446 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_I2C_Mem_Write+0x180>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d017      	beq.n	80053e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	781a      	ldrb	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1aa      	bne.n	8005342 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fd43 	bl	8005e7c <I2C_WaitOnBTFFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	2b04      	cmp	r3, #4
 8005402:	d107      	bne.n	8005414 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005412:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e016      	b.n	8005446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	e000      	b.n	8005446 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	00100002 	.word	0x00100002
 8005454:	ffff0000 	.word	0xffff0000

08005458 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	@ 0x30
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	4608      	mov	r0, r1
 8005462:	4611      	mov	r1, r2
 8005464:	461a      	mov	r2, r3
 8005466:	4603      	mov	r3, r0
 8005468:	817b      	strh	r3, [r7, #10]
 800546a:	460b      	mov	r3, r1
 800546c:	813b      	strh	r3, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005472:	f7ff f96d 	bl	8004750 <HAL_GetTick>
 8005476:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b20      	cmp	r3, #32
 8005482:	f040 8214 	bne.w	80058ae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	2319      	movs	r3, #25
 800548c:	2201      	movs	r2, #1
 800548e:	497b      	ldr	r1, [pc, #492]	@ (800567c <HAL_I2C_Mem_Read+0x224>)
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fb91 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
 800549e:	e207      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_I2C_Mem_Read+0x56>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e200      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d007      	beq.n	80054d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2222      	movs	r2, #34	@ 0x22
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2240      	movs	r2, #64	@ 0x40
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4a5b      	ldr	r2, [pc, #364]	@ (8005680 <HAL_I2C_Mem_Read+0x228>)
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005516:	88f8      	ldrh	r0, [r7, #6]
 8005518:	893a      	ldrh	r2, [r7, #8]
 800551a:	8979      	ldrh	r1, [r7, #10]
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	4603      	mov	r3, r0
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fa5e 	bl	80059e8 <I2C_RequestMemoryRead>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e1bc      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d113      	bne.n	8005566 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	623b      	str	r3, [r7, #32]
 8005552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e190      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556a:	2b01      	cmp	r3, #1
 800556c:	d11b      	bne.n	80055a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e170      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d11b      	bne.n	80055e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ce:	2300      	movs	r3, #0
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	e150      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055fc:	e144      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005602:	2b03      	cmp	r3, #3
 8005604:	f200 80f1 	bhi.w	80057ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560c:	2b01      	cmp	r3, #1
 800560e:	d123      	bne.n	8005658 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005612:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fc79 	bl	8005f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e145      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005656:	e117      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565c:	2b02      	cmp	r3, #2
 800565e:	d14e      	bne.n	80056fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	2200      	movs	r2, #0
 8005668:	4906      	ldr	r1, [pc, #24]	@ (8005684 <HAL_I2C_Mem_Read+0x22c>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 faa4 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d008      	beq.n	8005688 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e11a      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
 800567a:	bf00      	nop
 800567c:	00100002 	.word	0x00100002
 8005680:	ffff0000 	.word	0xffff0000
 8005684:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056fc:	e0c4      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	2200      	movs	r2, #0
 8005706:	496c      	ldr	r1, [pc, #432]	@ (80058b8 <HAL_I2C_Mem_Read+0x460>)
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fa55 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0cb      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	2200      	movs	r2, #0
 8005762:	4955      	ldr	r1, [pc, #340]	@ (80058b8 <HAL_I2C_Mem_Read+0x460>)
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fa27 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e09d      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057e8:	e04e      	b.n	8005888 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fb8c 	bl	8005f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e058      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d124      	bne.n	8005888 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	2b03      	cmp	r3, #3
 8005844:	d107      	bne.n	8005856 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005854:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	f47f aeb6 	bne.w	80055fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3728      	adds	r7, #40	@ 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	00010004 	.word	0x00010004

080058bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	817b      	strh	r3, [r7, #10]
 80058ce:	460b      	mov	r3, r1
 80058d0:	813b      	strh	r3, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f960 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00d      	beq.n	800591a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590c:	d103      	bne.n	8005916 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005914:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e05f      	b.n	80059da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800591a:	897b      	ldrh	r3, [r7, #10]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	492d      	ldr	r1, [pc, #180]	@ (80059e4 <I2C_RequestMemoryWrite+0x128>)
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f9bb 	bl	8005cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04c      	b.n	80059da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005958:	6a39      	ldr	r1, [r7, #32]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fa46 	bl	8005dec <I2C_WaitOnTXEFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	2b04      	cmp	r3, #4
 800596c:	d107      	bne.n	800597e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800597c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e02b      	b.n	80059da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d105      	bne.n	8005994 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005988:	893b      	ldrh	r3, [r7, #8]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	611a      	str	r2, [r3, #16]
 8005992:	e021      	b.n	80059d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005994:	893b      	ldrh	r3, [r7, #8]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	b29b      	uxth	r3, r3
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a4:	6a39      	ldr	r1, [r7, #32]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fa20 	bl	8005dec <I2C_WaitOnTXEFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d107      	bne.n	80059ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e005      	b.n	80059da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ce:	893b      	ldrh	r3, [r7, #8]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	00010002 	.word	0x00010002

080059e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	817b      	strh	r3, [r7, #10]
 80059fa:	460b      	mov	r3, r1
 80059fc:	813b      	strh	r3, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f8c2 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a48:	d103      	bne.n	8005a52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0aa      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	4952      	ldr	r1, [pc, #328]	@ (8005bb4 <I2C_RequestMemoryRead+0x1cc>)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f91d 	bl	8005cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e097      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f9a8 	bl	8005dec <I2C_WaitOnTXEFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d107      	bne.n	8005aba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e076      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d105      	bne.n	8005ad0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac4:	893b      	ldrh	r3, [r7, #8]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	e021      	b.n	8005b14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ad0:	893b      	ldrh	r3, [r7, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae0:	6a39      	ldr	r1, [r7, #32]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f982 	bl	8005dec <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00d      	beq.n	8005b0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d107      	bne.n	8005b06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e050      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0a:	893b      	ldrh	r3, [r7, #8]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b16:	6a39      	ldr	r1, [r7, #32]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f967 	bl	8005dec <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d107      	bne.n	8005b3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e035      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f82b 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b76:	d103      	bne.n	8005b80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e013      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b84:	897b      	ldrh	r3, [r7, #10]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	4906      	ldr	r1, [pc, #24]	@ (8005bb4 <I2C_RequestMemoryRead+0x1cc>)
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f886 	bl	8005cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	00010002 	.word	0x00010002

08005bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc8:	e048      	b.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d044      	beq.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fe fdbd 	bl	8004750 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d139      	bne.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d10d      	bne.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	43da      	mvns	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	e00c      	b.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d116      	bne.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e023      	b.n	8005ca4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	0c1b      	lsrs	r3, r3, #16
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10d      	bne.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	43da      	mvns	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	e00c      	b.n	8005c9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	43da      	mvns	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d093      	beq.n	8005bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cba:	e071      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cca:	d123      	bne.n	8005d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d00:	f043 0204 	orr.w	r2, r3, #4
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e067      	b.n	8005de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d041      	beq.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1c:	f7fe fd18 	bl	8004750 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d302      	bcc.n	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d136      	bne.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d10c      	bne.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	43da      	mvns	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bf14      	ite	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	2300      	moveq	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	e00b      	b.n	8005d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	43da      	mvns	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bf14      	ite	ne
 8005d68:	2301      	movne	r3, #1
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e021      	b.n	8005de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10c      	bne.n	8005dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	43da      	mvns	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e00b      	b.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af6d 	bne.w	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df8:	e034      	b.n	8005e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f8e3 	bl	8005fc6 <I2C_IsAcknowledgeFailed>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e034      	b.n	8005e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d028      	beq.n	8005e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e12:	f7fe fc9d 	bl	8004750 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d302      	bcc.n	8005e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11d      	bne.n	8005e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e32:	2b80      	cmp	r3, #128	@ 0x80
 8005e34:	d016      	beq.n	8005e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e007      	b.n	8005e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6e:	2b80      	cmp	r3, #128	@ 0x80
 8005e70:	d1c3      	bne.n	8005dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e88:	e034      	b.n	8005ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f89b 	bl	8005fc6 <I2C_IsAcknowledgeFailed>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e034      	b.n	8005f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d028      	beq.n	8005ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea2:	f7fe fc55 	bl	8004750 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11d      	bne.n	8005ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d016      	beq.n	8005ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e007      	b.n	8005f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d1c3      	bne.n	8005e8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f18:	e049      	b.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d119      	bne.n	8005f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0210 	mvn.w	r2, #16
 8005f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e030      	b.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5c:	f7fe fbf8 	bl	8004750 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11d      	bne.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d016      	beq.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e007      	b.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb8:	2b40      	cmp	r3, #64	@ 0x40
 8005fba:	d1ae      	bne.n	8005f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fdc:	d11b      	bne.n	8006016 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fe6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f043 0204 	orr.w	r2, r3, #4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b20      	cmp	r3, #32
 8006038:	d129      	bne.n	800608e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2224      	movs	r2, #36	@ 0x24
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0210 	bic.w	r2, r2, #16
 8006060:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d12a      	bne.n	800610c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2224      	movs	r2, #36	@ 0x24
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0201 	bic.w	r2, r2, #1
 80060cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80060d6:	89fb      	ldrh	r3, [r7, #14]
 80060d8:	f023 030f 	bic.w	r3, r3, #15
 80060dc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	89fa      	ldrh	r2, [r7, #14]
 80060ee:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e0bf      	b.n	80062ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fd fce4 	bl	8003b10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800615e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006174:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6899      	ldr	r1, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b4a      	ldr	r3, [pc, #296]	@ (80062b8 <HAL_LTDC_Init+0x19c>)
 8006190:	400b      	ands	r3, r1
 8006192:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b3e      	ldr	r3, [pc, #248]	@ (80062b8 <HAL_LTDC_Init+0x19c>)
 80061be:	400b      	ands	r3, r1
 80061c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68d9      	ldr	r1, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6919      	ldr	r1, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4b33      	ldr	r3, [pc, #204]	@ (80062b8 <HAL_LTDC_Init+0x19c>)
 80061ec:	400b      	ands	r3, r1
 80061ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	041b      	lsls	r3, r3, #16
 80061f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6919      	ldr	r1, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6959      	ldr	r1, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b27      	ldr	r3, [pc, #156]	@ (80062b8 <HAL_LTDC_Init+0x19c>)
 800621a:	400b      	ands	r3, r1
 800621c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6959      	ldr	r1, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800625e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0206 	orr.w	r2, r2, #6
 800628a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	f000f800 	.word	0xf000f800

080062bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062bc:	b5b0      	push	{r4, r5, r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_LTDC_ConfigLayer+0x1a>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e02c      	b.n	8006330 <HAL_LTDC_ConfigLayer+0x74>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2134      	movs	r1, #52	@ 0x34
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4614      	mov	r4, r2
 80062fa:	461d      	mov	r5, r3
 80062fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f811 	bl	8006338 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bdb0      	pop	{r4, r5, r7, pc}

08006338 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	@ 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006354:	4413      	add	r3, r2
 8006356:	041b      	lsls	r3, r3, #16
 8006358:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	01db      	lsls	r3, r3, #7
 8006364:	4413      	add	r3, r2
 8006366:	3384      	adds	r3, #132	@ 0x84
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	4611      	mov	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	01d2      	lsls	r2, r2, #7
 8006374:	440a      	add	r2, r1
 8006376:	3284      	adds	r2, #132	@ 0x84
 8006378:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800637c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800638e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006390:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4619      	mov	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	01db      	lsls	r3, r3, #7
 800639c:	440b      	add	r3, r1
 800639e:	3384      	adds	r3, #132	@ 0x84
 80063a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063b6:	4413      	add	r3, r2
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	01db      	lsls	r3, r3, #7
 80063c6:	4413      	add	r3, r2
 80063c8:	3384      	adds	r3, #132	@ 0x84
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	4611      	mov	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	01d2      	lsls	r2, r2, #7
 80063d6:	440a      	add	r2, r1
 80063d8:	3284      	adds	r2, #132	@ 0x84
 80063da:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80063de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ee:	4413      	add	r3, r2
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	01db      	lsls	r3, r3, #7
 80063fc:	440b      	add	r3, r1
 80063fe:	3384      	adds	r3, #132	@ 0x84
 8006400:	4619      	mov	r1, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	01db      	lsls	r3, r3, #7
 8006412:	4413      	add	r3, r2
 8006414:	3384      	adds	r3, #132	@ 0x84
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	4611      	mov	r1, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	01d2      	lsls	r2, r2, #7
 8006422:	440a      	add	r2, r1
 8006424:	3284      	adds	r2, #132	@ 0x84
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	01db      	lsls	r3, r3, #7
 8006436:	4413      	add	r3, r2
 8006438:	3384      	adds	r3, #132	@ 0x84
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	4413      	add	r3, r2
 800646a:	3384      	adds	r3, #132	@ 0x84
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	@ 0x84
 800647c:	461a      	mov	r2, r3
 800647e:	2300      	movs	r3, #0
 8006480:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006488:	461a      	mov	r2, r3
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	431a      	orrs	r2, r3
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	440b      	add	r3, r1
 800649e:	3384      	adds	r3, #132	@ 0x84
 80064a0:	4619      	mov	r1, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	01db      	lsls	r3, r3, #7
 80064b2:	4413      	add	r3, r2
 80064b4:	3384      	adds	r3, #132	@ 0x84
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	4611      	mov	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	01d2      	lsls	r2, r2, #7
 80064c2:	440a      	add	r2, r1
 80064c4:	3284      	adds	r2, #132	@ 0x84
 80064c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	4413      	add	r3, r2
 80064d8:	3384      	adds	r3, #132	@ 0x84
 80064da:	461a      	mov	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	01db      	lsls	r3, r3, #7
 80064ec:	4413      	add	r3, r2
 80064ee:	3384      	adds	r3, #132	@ 0x84
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	4611      	mov	r1, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	01d2      	lsls	r2, r2, #7
 80064fc:	440a      	add	r2, r1
 80064fe:	3284      	adds	r2, #132	@ 0x84
 8006500:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	6809      	ldr	r1, [r1, #0]
 8006516:	4608      	mov	r0, r1
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	01c9      	lsls	r1, r1, #7
 800651c:	4401      	add	r1, r0
 800651e:	3184      	adds	r1, #132	@ 0x84
 8006520:	4313      	orrs	r3, r2
 8006522:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	4413      	add	r3, r2
 8006530:	3384      	adds	r3, #132	@ 0x84
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	01db      	lsls	r3, r3, #7
 800653e:	4413      	add	r3, r2
 8006540:	3384      	adds	r3, #132	@ 0x84
 8006542:	461a      	mov	r2, r3
 8006544:	2300      	movs	r3, #0
 8006546:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	4413      	add	r3, r2
 8006554:	3384      	adds	r3, #132	@ 0x84
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006566:	2304      	movs	r3, #4
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e01b      	b.n	80065a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d102      	bne.n	800657a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006574:	2303      	movs	r3, #3
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	e014      	b.n	80065a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d00b      	beq.n	800659a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006586:	2b02      	cmp	r3, #2
 8006588:	d007      	beq.n	800659a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800658e:	2b03      	cmp	r3, #3
 8006590:	d003      	beq.n	800659a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006596:	2b07      	cmp	r3, #7
 8006598:	d102      	bne.n	80065a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800659a:	2302      	movs	r3, #2
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e001      	b.n	80065a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	01db      	lsls	r3, r3, #7
 80065ae:	4413      	add	r3, r2
 80065b0:	3384      	adds	r3, #132	@ 0x84
 80065b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	4611      	mov	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	01d2      	lsls	r2, r2, #7
 80065be:	440a      	add	r2, r1
 80065c0:	3284      	adds	r2, #132	@ 0x84
 80065c2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80065c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6859      	ldr	r1, [r3, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	1acb      	subs	r3, r1, r3
 80065de:	69f9      	ldr	r1, [r7, #28]
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	6809      	ldr	r1, [r1, #0]
 80065ea:	4608      	mov	r0, r1
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	01c9      	lsls	r1, r1, #7
 80065f0:	4401      	add	r1, r0
 80065f2:	3184      	adds	r1, #132	@ 0x84
 80065f4:	4313      	orrs	r3, r2
 80065f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	01db      	lsls	r3, r3, #7
 8006602:	4413      	add	r3, r2
 8006604:	3384      	adds	r3, #132	@ 0x84
 8006606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	4611      	mov	r1, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	01d2      	lsls	r2, r2, #7
 8006612:	440a      	add	r2, r1
 8006614:	3284      	adds	r2, #132	@ 0x84
 8006616:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	01db      	lsls	r3, r3, #7
 800662a:	4413      	add	r3, r2
 800662c:	3384      	adds	r3, #132	@ 0x84
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	01db      	lsls	r3, r3, #7
 8006640:	4413      	add	r3, r2
 8006642:	3384      	adds	r3, #132	@ 0x84
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	4611      	mov	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	01d2      	lsls	r2, r2, #7
 8006650:	440a      	add	r2, r1
 8006652:	3284      	adds	r2, #132	@ 0x84
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6013      	str	r3, [r2, #0]
}
 800665a:	bf00      	nop
 800665c:	3724      	adds	r7, #36	@ 0x24
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e267      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d075      	beq.n	8006772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006686:	4b88      	ldr	r3, [pc, #544]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b04      	cmp	r3, #4
 8006690:	d00c      	beq.n	80066ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006692:	4b85      	ldr	r3, [pc, #532]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800669a:	2b08      	cmp	r3, #8
 800669c:	d112      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800669e:	4b82      	ldr	r3, [pc, #520]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066aa:	d10b      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ac:	4b7e      	ldr	r3, [pc, #504]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05b      	beq.n	8006770 <HAL_RCC_OscConfig+0x108>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d157      	bne.n	8006770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e242      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066cc:	d106      	bne.n	80066dc <HAL_RCC_OscConfig+0x74>
 80066ce:	4b76      	ldr	r3, [pc, #472]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e01d      	b.n	8006718 <HAL_RCC_OscConfig+0xb0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x98>
 80066e6:	4b70      	ldr	r3, [pc, #448]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6f      	ldr	r2, [pc, #444]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4b6d      	ldr	r3, [pc, #436]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6c      	ldr	r2, [pc, #432]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e00b      	b.n	8006718 <HAL_RCC_OscConfig+0xb0>
 8006700:	4b69      	ldr	r3, [pc, #420]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a68      	ldr	r2, [pc, #416]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b66      	ldr	r3, [pc, #408]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a65      	ldr	r2, [pc, #404]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fe f816 	bl	8004750 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006728:	f7fe f812 	bl	8004750 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	@ 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e207      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673a:	4b5b      	ldr	r3, [pc, #364]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0xc0>
 8006746:	e014      	b.n	8006772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fe f802 	bl	8004750 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd fffe 	bl	8004750 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	@ 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e1f3      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006762:	4b51      	ldr	r3, [pc, #324]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0xe8>
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d063      	beq.n	8006846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800677e:	4b4a      	ldr	r3, [pc, #296]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b47      	ldr	r3, [pc, #284]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006792:	2b08      	cmp	r3, #8
 8006794:	d11c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006796:	4b44      	ldr	r3, [pc, #272]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a2:	4b41      	ldr	r3, [pc, #260]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCC_OscConfig+0x152>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e1c7      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b3b      	ldr	r3, [pc, #236]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4937      	ldr	r1, [pc, #220]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	e03a      	b.n	8006846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d020      	beq.n	800681a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4b34      	ldr	r3, [pc, #208]	@ (80068ac <HAL_RCC_OscConfig+0x244>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fd ffb7 	bl	8004750 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fd ffb3 	bl	8004750 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e1a8      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f8:	4b2b      	ldr	r3, [pc, #172]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b28      	ldr	r3, [pc, #160]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4925      	ldr	r1, [pc, #148]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	e015      	b.n	8006846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681a:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <HAL_RCC_OscConfig+0x244>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fd ff96 	bl	8004750 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006828:	f7fd ff92 	bl	8004750 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e187      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683a:	4b1b      	ldr	r3, [pc, #108]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d036      	beq.n	80068c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <HAL_RCC_OscConfig+0x248>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fd ff76 	bl	8004750 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006868:	f7fd ff72 	bl	8004750 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e167      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687a:	4b0b      	ldr	r3, [pc, #44]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800687c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x200>
 8006886:	e01b      	b.n	80068c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <HAL_RCC_OscConfig+0x248>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688e:	f7fd ff5f 	bl	8004750 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006894:	e00e      	b.n	80068b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006896:	f7fd ff5b 	bl	8004750 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d907      	bls.n	80068b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e150      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
 80068a8:	40023800 	.word	0x40023800
 80068ac:	42470000 	.word	0x42470000
 80068b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b4:	4b88      	ldr	r3, [pc, #544]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ea      	bne.n	8006896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8097 	beq.w	80069fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d2:	4b81      	ldr	r3, [pc, #516]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10f      	bne.n	80068fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80068ee:	4b7a      	ldr	r3, [pc, #488]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f6:	60bb      	str	r3, [r7, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fa:	2301      	movs	r3, #1
 80068fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fe:	4b77      	ldr	r3, [pc, #476]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d118      	bne.n	800693c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690a:	4b74      	ldr	r3, [pc, #464]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a73      	ldr	r2, [pc, #460]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006916:	f7fd ff1b 	bl	8004750 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fd ff17 	bl	8004750 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e10c      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006930:	4b6a      	ldr	r3, [pc, #424]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x2ea>
 8006944:	4b64      	ldr	r3, [pc, #400]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006948:	4a63      	ldr	r2, [pc, #396]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006950:	e01c      	b.n	800698c <HAL_RCC_OscConfig+0x324>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x30c>
 800695a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	6713      	str	r3, [r2, #112]	@ 0x70
 8006966:	4b5c      	ldr	r3, [pc, #368]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696a:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	@ 0x70
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0x324>
 8006974:	4b58      	ldr	r3, [pc, #352]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006978:	4a57      	ldr	r2, [pc, #348]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006980:	4b55      	ldr	r3, [pc, #340]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006984:	4a54      	ldr	r2, [pc, #336]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006986:	f023 0304 	bic.w	r3, r3, #4
 800698a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7fd fedc 	bl	8004750 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7fd fed8 	bl	8004750 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0cb      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b2:	4b49      	ldr	r3, [pc, #292]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0ee      	beq.n	800699c <HAL_RCC_OscConfig+0x334>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c0:	f7fd fec6 	bl	8004750 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fd fec2 	bl	8004750 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0b5      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069de:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1ee      	bne.n	80069c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d105      	bne.n	80069fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f0:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	4a38      	ldr	r2, [pc, #224]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80a1 	beq.w	8006b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a06:	4b34      	ldr	r3, [pc, #208]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d05c      	beq.n	8006acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d141      	bne.n	8006a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1a:	4b31      	ldr	r3, [pc, #196]	@ (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a20:	f7fd fe96 	bl	8004750 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fd fe92 	bl	8004750 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e087      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b27      	ldr	r3, [pc, #156]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	019b      	lsls	r3, r3, #6
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	491b      	ldr	r1, [pc, #108]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fd fe6b 	bl	8004750 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a7e:	f7fd fe67 	bl	8004750 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e05c      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a90:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x416>
 8006a9c:	e054      	b.n	8006b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fd fe54 	bl	8004750 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fd fe50 	bl	8004750 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e045      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006abe:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x444>
 8006aca:	e03d      	b.n	8006b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e038      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40007000 	.word	0x40007000
 8006ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b54 <HAL_RCC_OscConfig+0x4ec>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d028      	beq.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d121      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d11a      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d111      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d001      	beq.n	8006b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40023800 	.word	0x40023800

08006b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0cc      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b6c:	4b68      	ldr	r3, [pc, #416]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d90c      	bls.n	8006b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7a:	4b65      	ldr	r3, [pc, #404]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b82:	4b63      	ldr	r3, [pc, #396]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d001      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0b8      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d020      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bac:	4b59      	ldr	r3, [pc, #356]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	4a58      	ldr	r2, [pc, #352]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc4:	4b53      	ldr	r3, [pc, #332]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a52      	ldr	r2, [pc, #328]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd0:	4b50      	ldr	r3, [pc, #320]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	494d      	ldr	r1, [pc, #308]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d044      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	4b47      	ldr	r3, [pc, #284]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d119      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e07f      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d003      	beq.n	8006c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d107      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c16:	4b3f      	ldr	r3, [pc, #252]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e06f      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c26:	4b3b      	ldr	r3, [pc, #236]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e067      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c36:	4b37      	ldr	r3, [pc, #220]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 0203 	bic.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	4934      	ldr	r1, [pc, #208]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c48:	f7fd fd82 	bl	8004750 <HAL_GetTick>
 8006c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4e:	e00a      	b.n	8006c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c50:	f7fd fd7e 	bl	8004750 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e04f      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c66:	4b2b      	ldr	r3, [pc, #172]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 020c 	and.w	r2, r3, #12
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d1eb      	bne.n	8006c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c78:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d20c      	bcs.n	8006ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c86:	4b22      	ldr	r3, [pc, #136]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8e:	4b20      	ldr	r3, [pc, #128]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e032      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cac:	4b19      	ldr	r3, [pc, #100]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4916      	ldr	r1, [pc, #88]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cca:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	490e      	ldr	r1, [pc, #56]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cde:	f000 f821 	bl	8006d24 <HAL_RCC_GetSysClockFreq>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	091b      	lsrs	r3, r3, #4
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	490a      	ldr	r1, [pc, #40]	@ (8006d18 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf0:	5ccb      	ldrb	r3, [r1, r3]
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	4a09      	ldr	r2, [pc, #36]	@ (8006d1c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cfa:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd fce2 	bl	80046c8 <HAL_InitTick>

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023c00 	.word	0x40023c00
 8006d14:	40023800 	.word	0x40023800
 8006d18:	0800a558 	.word	0x0800a558
 8006d1c:	20000010 	.word	0x20000010
 8006d20:	20000014 	.word	0x20000014

08006d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d28:	b094      	sub	sp, #80	@ 0x50
 8006d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d3c:	4b79      	ldr	r3, [pc, #484]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 030c 	and.w	r3, r3, #12
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d00d      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0x40>
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	f200 80e1 	bhi.w	8006f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0x34>
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d003      	beq.n	8006d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d56:	e0db      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d58:	4b73      	ldr	r3, [pc, #460]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d5c:	e0db      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d5e:	4b73      	ldr	r3, [pc, #460]	@ (8006f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006d60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d62:	e0d8      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d64:	4b6f      	ldr	r3, [pc, #444]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d063      	beq.n	8006e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	099b      	lsrs	r3, r3, #6
 8006d80:	2200      	movs	r2, #0
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d8e:	2300      	movs	r3, #0
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	f04f 0000 	mov.w	r0, #0
 8006d9e:	f04f 0100 	mov.w	r1, #0
 8006da2:	0159      	lsls	r1, r3, #5
 8006da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006da8:	0150      	lsls	r0, r2, #5
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4621      	mov	r1, r4
 8006db0:	1a51      	subs	r1, r2, r1
 8006db2:	6139      	str	r1, [r7, #16]
 8006db4:	4629      	mov	r1, r5
 8006db6:	eb63 0301 	sbc.w	r3, r3, r1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dc8:	4659      	mov	r1, fp
 8006dca:	018b      	lsls	r3, r1, #6
 8006dcc:	4651      	mov	r1, sl
 8006dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dd2:	4651      	mov	r1, sl
 8006dd4:	018a      	lsls	r2, r1, #6
 8006dd6:	4651      	mov	r1, sl
 8006dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8006ddc:	4659      	mov	r1, fp
 8006dde:	eb63 0901 	sbc.w	r9, r3, r1
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	eb18 0303 	adds.w	r3, r8, r3
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	462b      	mov	r3, r5
 8006e04:	eb49 0303 	adc.w	r3, r9, r3
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e16:	4629      	mov	r1, r5
 8006e18:	024b      	lsls	r3, r1, #9
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e20:	4621      	mov	r1, r4
 8006e22:	024a      	lsls	r2, r1, #9
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e34:	f7f9 fa34 	bl	80002a0 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e40:	e058      	b.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e42:	4b38      	ldr	r3, [pc, #224]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	099b      	lsrs	r3, r3, #6
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e52:	623b      	str	r3, [r7, #32]
 8006e54:	2300      	movs	r3, #0
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	f04f 0000 	mov.w	r0, #0
 8006e64:	f04f 0100 	mov.w	r1, #0
 8006e68:	0159      	lsls	r1, r3, #5
 8006e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e6e:	0150      	lsls	r0, r2, #5
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4641      	mov	r1, r8
 8006e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e94:	ebb2 040a 	subs.w	r4, r2, sl
 8006e98:	eb63 050b 	sbc.w	r5, r3, fp
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	00eb      	lsls	r3, r5, #3
 8006ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eaa:	00e2      	lsls	r2, r4, #3
 8006eac:	4614      	mov	r4, r2
 8006eae:	461d      	mov	r5, r3
 8006eb0:	4643      	mov	r3, r8
 8006eb2:	18e3      	adds	r3, r4, r3
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	eb45 0303 	adc.w	r3, r5, r3
 8006ebc:	607b      	str	r3, [r7, #4]
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eca:	4629      	mov	r1, r5
 8006ecc:	028b      	lsls	r3, r1, #10
 8006ece:	4621      	mov	r1, r4
 8006ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	028a      	lsls	r2, r1, #10
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4619      	mov	r1, r3
 8006edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	61fa      	str	r2, [r7, #28]
 8006ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ee8:	f7f9 f9da 	bl	80002a0 <__aeabi_uldivmod>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	3301      	adds	r3, #1
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f0e:	e002      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f10:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3750      	adds	r7, #80	@ 0x50
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f22:	bf00      	nop
 8006f24:	40023800 	.word	0x40023800
 8006f28:	00f42400 	.word	0x00f42400
 8006f2c:	007a1200 	.word	0x007a1200

08006f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f34:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f36:	681b      	ldr	r3, [r3, #0]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000010 	.word	0x20000010

08006f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f4c:	f7ff fff0 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	0a9b      	lsrs	r3, r3, #10
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4903      	ldr	r1, [pc, #12]	@ (8006f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	0800a568 	.word	0x0800a568

08006f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d105      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d075      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fa4:	4b91      	ldr	r3, [pc, #580]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006faa:	f7fd fbd1 	bl	8004750 <HAL_GetTick>
 8006fae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fb2:	f7fd fbcd 	bl	8004750 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e189      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fc4:	4b8a      	ldr	r3, [pc, #552]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1f0      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	019a      	lsls	r2, r3, #6
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	071b      	lsls	r3, r3, #28
 8006fe8:	4981      	ldr	r1, [pc, #516]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ffc:	4b7c      	ldr	r3, [pc, #496]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007002:	0f1b      	lsrs	r3, r3, #28
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	019a      	lsls	r2, r3, #6
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	061b      	lsls	r3, r3, #24
 8007016:	431a      	orrs	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	071b      	lsls	r3, r3, #28
 800701c:	4974      	ldr	r1, [pc, #464]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007024:	4b72      	ldr	r3, [pc, #456]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800702a:	f023 021f 	bic.w	r2, r3, #31
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	3b01      	subs	r3, #1
 8007034:	496e      	ldr	r1, [pc, #440]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00d      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	019a      	lsls	r2, r3, #6
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	071b      	lsls	r3, r3, #28
 800705c:	4964      	ldr	r1, [pc, #400]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007064:	4b61      	ldr	r3, [pc, #388]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800706a:	f7fd fb71 	bl	8004750 <HAL_GetTick>
 800706e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007070:	e008      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007072:	f7fd fb6d 	bl	8004750 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e129      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007084:	4b5a      	ldr	r3, [pc, #360]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f0      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d079      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070a8:	4b52      	ldr	r3, [pc, #328]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070ae:	f7fd fb4f 	bl	8004750 <HAL_GetTick>
 80070b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070b4:	e008      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070b6:	f7fd fb4b 	bl	8004750 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e107      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070c8:	4b49      	ldr	r3, [pc, #292]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070d4:	d0ef      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d020      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070e2:	4b43      	ldr	r3, [pc, #268]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e8:	0f1b      	lsrs	r3, r3, #28
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	019a      	lsls	r2, r3, #6
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	431a      	orrs	r2, r3
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	071b      	lsls	r3, r3, #28
 8007102:	493b      	ldr	r1, [pc, #236]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800710a:	4b39      	ldr	r3, [pc, #228]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800710c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007110:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	3b01      	subs	r3, #1
 800711a:	021b      	lsls	r3, r3, #8
 800711c:	4934      	ldr	r1, [pc, #208]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01e      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007130:	4b2f      	ldr	r3, [pc, #188]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	0e1b      	lsrs	r3, r3, #24
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	019a      	lsls	r2, r3, #6
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	071b      	lsls	r3, r3, #28
 8007150:	4927      	ldr	r1, [pc, #156]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007158:	4b25      	ldr	r3, [pc, #148]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800715a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800715e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	4922      	ldr	r1, [pc, #136]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800716e:	4b21      	ldr	r3, [pc, #132]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007174:	f7fd faec 	bl	8004750 <HAL_GetTick>
 8007178:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800717a:	e008      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800717c:	f7fd fae8 	bl	8004750 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e0a4      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800718e:	4b18      	ldr	r3, [pc, #96]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719a:	d1ef      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 808b 	beq.w	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	4a0f      	ldr	r2, [pc, #60]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80071ba:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071c6:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a0b      	ldr	r2, [pc, #44]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071d2:	f7fd fabd 	bl	8004750 <HAL_GetTick>
 80071d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071d8:	e010      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071da:	f7fd fab9 	bl	8004750 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d909      	bls.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e075      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80071ec:	42470068 	.word	0x42470068
 80071f0:	40023800 	.word	0x40023800
 80071f4:	42470070 	.word	0x42470070
 80071f8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071fc:	4b38      	ldr	r3, [pc, #224]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0e8      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007208:	4b36      	ldr	r3, [pc, #216]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007210:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02f      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	d028      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007226:	4b2f      	ldr	r3, [pc, #188]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800722e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007230:	4b2d      	ldr	r3, [pc, #180]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007236:	4b2c      	ldr	r3, [pc, #176]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800723c:	4a29      	ldr	r2, [pc, #164]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007242:	4b28      	ldr	r3, [pc, #160]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b01      	cmp	r3, #1
 800724c:	d114      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800724e:	f7fd fa7f 	bl	8004750 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007254:	e00a      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007256:	f7fd fa7b 	bl	8004750 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007264:	4293      	cmp	r3, r2
 8007266:	d901      	bls.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e035      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726c:	4b1d      	ldr	r3, [pc, #116]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0ee      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007284:	d10d      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007286:	4b17      	ldr	r3, [pc, #92]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800729a:	4912      	ldr	r1, [pc, #72]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800729c:	4313      	orrs	r3, r2
 800729e:	608b      	str	r3, [r1, #8]
 80072a0:	e005      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80072a2:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	4a0f      	ldr	r2, [pc, #60]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80072ac:	6093      	str	r3, [r2, #8]
 80072ae:	4b0d      	ldr	r3, [pc, #52]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ba:	490a      	ldr	r1, [pc, #40]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80072d2:	4b06      	ldr	r3, [pc, #24]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40007000 	.word	0x40007000
 80072e4:	40023800 	.word	0x40023800
 80072e8:	42470e40 	.word	0x42470e40
 80072ec:	424711e0 	.word	0x424711e0

080072f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e01c      	b.n	800733c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	795b      	ldrb	r3, [r3, #5]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fc fd24 	bl	8003d60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0204 	orr.w	r2, r2, #4
 800732c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_RNG_GenerateRandomNumber+0x1a>
 800735a:	2302      	movs	r3, #2
 800735c:	e044      	b.n	80073e8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	795b      	ldrb	r3, [r3, #5]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d133      	bne.n	80073d6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007374:	f7fd f9ec 	bl	8004750 <HAL_GetTick>
 8007378:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800737a:	e018      	b.n	80073ae <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800737c:	f7fd f9e8 	bl	8004750 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d911      	bls.n	80073ae <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	d00a      	beq.n	80073ae <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e01c      	b.n	80073e8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d1df      	bne.n	800737c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	715a      	strb	r2, [r3, #5]
 80073d4:	e004      	b.n	80073e0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2204      	movs	r2, #4
 80073da:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	711a      	strb	r2, [r3, #4]

  return status;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e07b      	b.n	80074fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d108      	bne.n	800741c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007412:	d009      	beq.n	8007428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	61da      	str	r2, [r3, #28]
 800741a:	e005      	b.n	8007428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fc fcae 	bl	8003da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ac:	ea42 0103 	orr.w	r1, r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	f003 0104 	and.w	r1, r3, #4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	f003 0210 	and.w	r2, r3, #16
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e01a      	b.n	800754a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7fc fc81 	bl	8003e34 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b088      	sub	sp, #32
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007562:	f7fd f8f5 	bl	8004750 <HAL_GetTick>
 8007566:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007568:	88fb      	ldrh	r3, [r7, #6]
 800756a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d001      	beq.n	800757c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007578:	2302      	movs	r3, #2
 800757a:	e12a      	b.n	80077d2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_SPI_Transmit+0x36>
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e122      	b.n	80077d2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_SPI_Transmit+0x48>
 8007596:	2302      	movs	r3, #2
 8007598:	e11b      	b.n	80077d2 <HAL_SPI_Transmit+0x280>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2203      	movs	r2, #3
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075e8:	d10f      	bne.n	800760a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007608:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b40      	cmp	r3, #64	@ 0x40
 8007616:	d007      	beq.n	8007628 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007630:	d152      	bne.n	80076d8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_SPI_Transmit+0xee>
 800763a:	8b7b      	ldrh	r3, [r7, #26]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d145      	bne.n	80076cc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007644:	881a      	ldrh	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007664:	e032      	b.n	80076cc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b02      	cmp	r3, #2
 8007672:	d112      	bne.n	800769a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007678:	881a      	ldrh	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007684:	1c9a      	adds	r2, r3, #2
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007698:	e018      	b.n	80076cc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800769a:	f7fd f859 	bl	8004750 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d803      	bhi.n	80076b2 <HAL_SPI_Transmit+0x160>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d102      	bne.n	80076b8 <HAL_SPI_Transmit+0x166>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e082      	b.n	80077d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1c7      	bne.n	8007666 <HAL_SPI_Transmit+0x114>
 80076d6:	e053      	b.n	8007780 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_Transmit+0x194>
 80076e0:	8b7b      	ldrh	r3, [r7, #26]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d147      	bne.n	8007776 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	7812      	ldrb	r2, [r2, #0]
 80076f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800770c:	e033      	b.n	8007776 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d113      	bne.n	8007744 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007742:	e018      	b.n	8007776 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007744:	f7fd f804 	bl	8004750 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d803      	bhi.n	800775c <HAL_SPI_Transmit+0x20a>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d102      	bne.n	8007762 <HAL_SPI_Transmit+0x210>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e02d      	b.n	80077d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1c6      	bne.n	800770e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f8bf 	bl	8007908 <SPI_EndRxTxTransaction>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80077d0:	2300      	movs	r3, #0
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077e8:	b2db      	uxtb	r3, r3
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
	...

080077f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007808:	f7fc ffa2 	bl	8004750 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	4413      	add	r3, r2
 8007816:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007818:	f7fc ff9a 	bl	8004750 <HAL_GetTick>
 800781c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800781e:	4b39      	ldr	r3, [pc, #228]	@ (8007904 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	015b      	lsls	r3, r3, #5
 8007824:	0d1b      	lsrs	r3, r3, #20
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	fb02 f303 	mul.w	r3, r2, r3
 800782c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800782e:	e054      	b.n	80078da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d050      	beq.n	80078da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007838:	f7fc ff8a 	bl	8004750 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	429a      	cmp	r2, r3
 8007846:	d902      	bls.n	800784e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d13d      	bne.n	80078ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800785c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007866:	d111      	bne.n	800788c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007870:	d004      	beq.n	800787c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800787a:	d107      	bne.n	800788c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800788a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007894:	d10f      	bne.n	80078b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e017      	b.n	80078fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4013      	ands	r3, r2
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	bf0c      	ite	eq
 80078ea:	2301      	moveq	r3, #1
 80078ec:	2300      	movne	r3, #0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d19b      	bne.n	8007830 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000010 	.word	0x20000010

08007908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af02      	add	r7, sp, #8
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2201      	movs	r2, #1
 800791c:	2102      	movs	r1, #2
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff ff6a 	bl	80077f8 <SPI_WaitFlagStateUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d007      	beq.n	800793a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792e:	f043 0220 	orr.w	r2, r3, #32
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e032      	b.n	80079a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800793a:	4b1b      	ldr	r3, [pc, #108]	@ (80079a8 <SPI_EndRxTxTransaction+0xa0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1b      	ldr	r2, [pc, #108]	@ (80079ac <SPI_EndRxTxTransaction+0xa4>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	0d5b      	lsrs	r3, r3, #21
 8007946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007958:	d112      	bne.n	8007980 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	2180      	movs	r1, #128	@ 0x80
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff ff47 	bl	80077f8 <SPI_WaitFlagStateUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d016      	beq.n	800799e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007974:	f043 0220 	orr.w	r2, r3, #32
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e00f      	b.n	80079a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	3b01      	subs	r3, #1
 800798a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007996:	2b80      	cmp	r3, #128	@ 0x80
 8007998:	d0f2      	beq.n	8007980 <SPI_EndRxTxTransaction+0x78>
 800799a:	e000      	b.n	800799e <SPI_EndRxTxTransaction+0x96>
        break;
 800799c:	bf00      	nop
  }

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000010 	.word	0x20000010
 80079ac:	165e9f81 	.word	0x165e9f81

080079b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e041      	b.n	8007a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fc fa4a 	bl	8003e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 f8f4 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_TIM_ConfigClockSource+0x1c>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e0b4      	b.n	8007bd4 <HAL_TIM_ConfigClockSource+0x186>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a90:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aa2:	d03e      	beq.n	8007b22 <HAL_TIM_ConfigClockSource+0xd4>
 8007aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aa8:	f200 8087 	bhi.w	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ab0:	f000 8086 	beq.w	8007bc0 <HAL_TIM_ConfigClockSource+0x172>
 8007ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ab8:	d87f      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007aba:	2b70      	cmp	r3, #112	@ 0x70
 8007abc:	d01a      	beq.n	8007af4 <HAL_TIM_ConfigClockSource+0xa6>
 8007abe:	2b70      	cmp	r3, #112	@ 0x70
 8007ac0:	d87b      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007ac2:	2b60      	cmp	r3, #96	@ 0x60
 8007ac4:	d050      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0x11a>
 8007ac6:	2b60      	cmp	r3, #96	@ 0x60
 8007ac8:	d877      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007aca:	2b50      	cmp	r3, #80	@ 0x50
 8007acc:	d03c      	beq.n	8007b48 <HAL_TIM_ConfigClockSource+0xfa>
 8007ace:	2b50      	cmp	r3, #80	@ 0x50
 8007ad0:	d873      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007ad2:	2b40      	cmp	r3, #64	@ 0x40
 8007ad4:	d058      	beq.n	8007b88 <HAL_TIM_ConfigClockSource+0x13a>
 8007ad6:	2b40      	cmp	r3, #64	@ 0x40
 8007ad8:	d86f      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007ada:	2b30      	cmp	r3, #48	@ 0x30
 8007adc:	d064      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x15a>
 8007ade:	2b30      	cmp	r3, #48	@ 0x30
 8007ae0:	d86b      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d060      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x15a>
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d867      	bhi.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d05c      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x15a>
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d05a      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x15a>
 8007af2:	e062      	b.n	8007bba <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b04:	f000 f990 	bl	8007e28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]
      break;
 8007b20:	e04f      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b32:	f000 f979 	bl	8007e28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b44:	609a      	str	r2, [r3, #8]
      break;
 8007b46:	e03c      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b54:	461a      	mov	r2, r3
 8007b56:	f000 f8ed 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2150      	movs	r1, #80	@ 0x50
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f946 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007b66:	e02c      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b74:	461a      	mov	r2, r3
 8007b76:	f000 f90c 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2160      	movs	r1, #96	@ 0x60
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f936 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007b86:	e01c      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b94:	461a      	mov	r2, r3
 8007b96:	f000 f8cd 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2140      	movs	r1, #64	@ 0x40
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f926 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007ba6:	e00c      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f000 f91d 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007bb8:	e003      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bbe:	e000      	b.n	8007bc2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a46      	ldr	r2, [pc, #280]	@ (8007d08 <TIM_Base_SetConfig+0x12c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfa:	d00f      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a43      	ldr	r2, [pc, #268]	@ (8007d0c <TIM_Base_SetConfig+0x130>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00b      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a42      	ldr	r2, [pc, #264]	@ (8007d10 <TIM_Base_SetConfig+0x134>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d007      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a41      	ldr	r2, [pc, #260]	@ (8007d14 <TIM_Base_SetConfig+0x138>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a40      	ldr	r2, [pc, #256]	@ (8007d18 <TIM_Base_SetConfig+0x13c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d108      	bne.n	8007c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a35      	ldr	r2, [pc, #212]	@ (8007d08 <TIM_Base_SetConfig+0x12c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d02b      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3c:	d027      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a32      	ldr	r2, [pc, #200]	@ (8007d0c <TIM_Base_SetConfig+0x130>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d023      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a31      	ldr	r2, [pc, #196]	@ (8007d10 <TIM_Base_SetConfig+0x134>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01f      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a30      	ldr	r2, [pc, #192]	@ (8007d14 <TIM_Base_SetConfig+0x138>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01b      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a2f      	ldr	r2, [pc, #188]	@ (8007d18 <TIM_Base_SetConfig+0x13c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d017      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2e      	ldr	r2, [pc, #184]	@ (8007d1c <TIM_Base_SetConfig+0x140>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a2d      	ldr	r2, [pc, #180]	@ (8007d20 <TIM_Base_SetConfig+0x144>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00f      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a2c      	ldr	r2, [pc, #176]	@ (8007d24 <TIM_Base_SetConfig+0x148>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00b      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a2b      	ldr	r2, [pc, #172]	@ (8007d28 <TIM_Base_SetConfig+0x14c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2a      	ldr	r2, [pc, #168]	@ (8007d2c <TIM_Base_SetConfig+0x150>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a29      	ldr	r2, [pc, #164]	@ (8007d30 <TIM_Base_SetConfig+0x154>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d108      	bne.n	8007ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a10      	ldr	r2, [pc, #64]	@ (8007d08 <TIM_Base_SetConfig+0x12c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d003      	beq.n	8007cd4 <TIM_Base_SetConfig+0xf8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a12      	ldr	r2, [pc, #72]	@ (8007d18 <TIM_Base_SetConfig+0x13c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d103      	bne.n	8007cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d105      	bne.n	8007cfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f023 0201 	bic.w	r2, r3, #1
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	611a      	str	r2, [r3, #16]
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40010400 	.word	0x40010400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800
 8007d28:	40001800 	.word	0x40001800
 8007d2c:	40001c00 	.word	0x40001c00
 8007d30:	40002000 	.word	0x40002000

08007d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	f023 0210 	bic.w	r2, r3, #16
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f043 0307 	orr.w	r3, r3, #7
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	021a      	lsls	r2, r3, #8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	609a      	str	r2, [r3, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e05a      	b.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a21      	ldr	r2, [pc, #132]	@ (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ecc:	d01d      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d018      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a18      	ldr	r2, [pc, #96]	@ (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	@ (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a15      	ldr	r2, [pc, #84]	@ (8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d10c      	bne.n	8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40010400 	.word	0x40010400
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40001800 	.word	0x40001800

08007f60 <findslot>:
 8007f60:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <findslot+0x2c>)
 8007f62:	b510      	push	{r4, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	b118      	cbz	r0, 8007f72 <findslot+0x12>
 8007f6a:	6a03      	ldr	r3, [r0, #32]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <findslot+0x12>
 8007f6e:	f000 faed 	bl	800854c <__sinit>
 8007f72:	2c13      	cmp	r4, #19
 8007f74:	d807      	bhi.n	8007f86 <findslot+0x26>
 8007f76:	4806      	ldr	r0, [pc, #24]	@ (8007f90 <findslot+0x30>)
 8007f78:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007f7c:	3201      	adds	r2, #1
 8007f7e:	d002      	beq.n	8007f86 <findslot+0x26>
 8007f80:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	2000      	movs	r0, #0
 8007f88:	e7fc      	b.n	8007f84 <findslot+0x24>
 8007f8a:	bf00      	nop
 8007f8c:	20000030 	.word	0x20000030
 8007f90:	20025cc4 	.word	0x20025cc4

08007f94 <error>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	4604      	mov	r4, r0
 8007f98:	f000 fbc0 	bl	800871c <__errno>
 8007f9c:	2613      	movs	r6, #19
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	2700      	movs	r7, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	beab      	bkpt	0x00ab
 8007fa8:	4606      	mov	r6, r0
 8007faa:	602e      	str	r6, [r5, #0]
 8007fac:	4620      	mov	r0, r4
 8007fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fb0 <checkerror>:
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d101      	bne.n	8007fb8 <checkerror+0x8>
 8007fb4:	f7ff bfee 	b.w	8007f94 <error>
 8007fb8:	4770      	bx	lr

08007fba <_swiread>:
 8007fba:	b530      	push	{r4, r5, lr}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007fc2:	9203      	str	r2, [sp, #12]
 8007fc4:	2406      	movs	r4, #6
 8007fc6:	ad01      	add	r5, sp, #4
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	beab      	bkpt	0x00ab
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7ff ffed 	bl	8007fb0 <checkerror>
 8007fd6:	b005      	add	sp, #20
 8007fd8:	bd30      	pop	{r4, r5, pc}

08007fda <_read>:
 8007fda:	b570      	push	{r4, r5, r6, lr}
 8007fdc:	460e      	mov	r6, r1
 8007fde:	4614      	mov	r4, r2
 8007fe0:	f7ff ffbe 	bl	8007f60 <findslot>
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	b930      	cbnz	r0, 8007ff6 <_read+0x1c>
 8007fe8:	f000 fb98 	bl	800871c <__errno>
 8007fec:	2309      	movs	r3, #9
 8007fee:	6003      	str	r3, [r0, #0]
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	bd70      	pop	{r4, r5, r6, pc}
 8007ff6:	6800      	ldr	r0, [r0, #0]
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	f7ff ffdd 	bl	8007fba <_swiread>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d0f5      	beq.n	8007ff0 <_read+0x16>
 8008004:	686b      	ldr	r3, [r5, #4]
 8008006:	1a20      	subs	r0, r4, r0
 8008008:	4403      	add	r3, r0
 800800a:	606b      	str	r3, [r5, #4]
 800800c:	e7f2      	b.n	8007ff4 <_read+0x1a>

0800800e <_swilseek>:
 800800e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4616      	mov	r6, r2
 8008014:	f7ff ffa4 	bl	8007f60 <findslot>
 8008018:	4605      	mov	r5, r0
 800801a:	b940      	cbnz	r0, 800802e <_swilseek+0x20>
 800801c:	f000 fb7e 	bl	800871c <__errno>
 8008020:	2309      	movs	r3, #9
 8008022:	6003      	str	r3, [r0, #0]
 8008024:	f04f 34ff 	mov.w	r4, #4294967295
 8008028:	4620      	mov	r0, r4
 800802a:	b003      	add	sp, #12
 800802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802e:	2e02      	cmp	r6, #2
 8008030:	d903      	bls.n	800803a <_swilseek+0x2c>
 8008032:	f000 fb73 	bl	800871c <__errno>
 8008036:	2316      	movs	r3, #22
 8008038:	e7f3      	b.n	8008022 <_swilseek+0x14>
 800803a:	2e01      	cmp	r6, #1
 800803c:	d112      	bne.n	8008064 <_swilseek+0x56>
 800803e:	6843      	ldr	r3, [r0, #4]
 8008040:	18e4      	adds	r4, r4, r3
 8008042:	d4f6      	bmi.n	8008032 <_swilseek+0x24>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	260a      	movs	r6, #10
 8008048:	e9cd 3400 	strd	r3, r4, [sp]
 800804c:	466f      	mov	r7, sp
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	beab      	bkpt	0x00ab
 8008054:	4606      	mov	r6, r0
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff ffaa 	bl	8007fb0 <checkerror>
 800805c:	2800      	cmp	r0, #0
 800805e:	dbe1      	blt.n	8008024 <_swilseek+0x16>
 8008060:	606c      	str	r4, [r5, #4]
 8008062:	e7e1      	b.n	8008028 <_swilseek+0x1a>
 8008064:	2e02      	cmp	r6, #2
 8008066:	6803      	ldr	r3, [r0, #0]
 8008068:	d1ec      	bne.n	8008044 <_swilseek+0x36>
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	260c      	movs	r6, #12
 800806e:	466f      	mov	r7, sp
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	beab      	bkpt	0x00ab
 8008076:	4606      	mov	r6, r0
 8008078:	4630      	mov	r0, r6
 800807a:	f7ff ff99 	bl	8007fb0 <checkerror>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d0d0      	beq.n	8008024 <_swilseek+0x16>
 8008082:	4404      	add	r4, r0
 8008084:	e7de      	b.n	8008044 <_swilseek+0x36>

08008086 <_lseek>:
 8008086:	f7ff bfc2 	b.w	800800e <_swilseek>

0800808a <_swiwrite>:
 800808a:	b530      	push	{r4, r5, lr}
 800808c:	b085      	sub	sp, #20
 800808e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008092:	9203      	str	r2, [sp, #12]
 8008094:	2405      	movs	r4, #5
 8008096:	ad01      	add	r5, sp, #4
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	beab      	bkpt	0x00ab
 800809e:	4604      	mov	r4, r0
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7ff ff85 	bl	8007fb0 <checkerror>
 80080a6:	b005      	add	sp, #20
 80080a8:	bd30      	pop	{r4, r5, pc}

080080aa <_write>:
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	460e      	mov	r6, r1
 80080ae:	4615      	mov	r5, r2
 80080b0:	f7ff ff56 	bl	8007f60 <findslot>
 80080b4:	4604      	mov	r4, r0
 80080b6:	b930      	cbnz	r0, 80080c6 <_write+0x1c>
 80080b8:	f000 fb30 	bl	800871c <__errno>
 80080bc:	2309      	movs	r3, #9
 80080be:	6003      	str	r3, [r0, #0]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	6800      	ldr	r0, [r0, #0]
 80080c8:	462a      	mov	r2, r5
 80080ca:	4631      	mov	r1, r6
 80080cc:	f7ff ffdd 	bl	800808a <_swiwrite>
 80080d0:	1e03      	subs	r3, r0, #0
 80080d2:	dbf5      	blt.n	80080c0 <_write+0x16>
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	1ae8      	subs	r0, r5, r3
 80080d8:	4402      	add	r2, r0
 80080da:	42ab      	cmp	r3, r5
 80080dc:	6062      	str	r2, [r4, #4]
 80080de:	d1f1      	bne.n	80080c4 <_write+0x1a>
 80080e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080e4:	2000      	movs	r0, #0
 80080e6:	f7ff bf55 	b.w	8007f94 <error>

080080ea <_swiclose>:
 80080ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ec:	2402      	movs	r4, #2
 80080ee:	9001      	str	r0, [sp, #4]
 80080f0:	ad01      	add	r5, sp, #4
 80080f2:	4620      	mov	r0, r4
 80080f4:	4629      	mov	r1, r5
 80080f6:	beab      	bkpt	0x00ab
 80080f8:	4604      	mov	r4, r0
 80080fa:	4620      	mov	r0, r4
 80080fc:	f7ff ff58 	bl	8007fb0 <checkerror>
 8008100:	b003      	add	sp, #12
 8008102:	bd30      	pop	{r4, r5, pc}

08008104 <_close>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4605      	mov	r5, r0
 8008108:	f7ff ff2a 	bl	8007f60 <findslot>
 800810c:	4604      	mov	r4, r0
 800810e:	b930      	cbnz	r0, 800811e <_close+0x1a>
 8008110:	f000 fb04 	bl	800871c <__errno>
 8008114:	2309      	movs	r3, #9
 8008116:	6003      	str	r3, [r0, #0]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	bd38      	pop	{r3, r4, r5, pc}
 800811e:	3d01      	subs	r5, #1
 8008120:	2d01      	cmp	r5, #1
 8008122:	d809      	bhi.n	8008138 <_close+0x34>
 8008124:	4b07      	ldr	r3, [pc, #28]	@ (8008144 <_close+0x40>)
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d104      	bne.n	8008138 <_close+0x34>
 800812e:	f04f 33ff 	mov.w	r3, #4294967295
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	2000      	movs	r0, #0
 8008136:	e7f1      	b.n	800811c <_close+0x18>
 8008138:	6820      	ldr	r0, [r4, #0]
 800813a:	f7ff ffd6 	bl	80080ea <_swiclose>
 800813e:	2800      	cmp	r0, #0
 8008140:	d0f5      	beq.n	800812e <_close+0x2a>
 8008142:	e7eb      	b.n	800811c <_close+0x18>
 8008144:	20025cc4 	.word	0x20025cc4

08008148 <_swistat>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	460c      	mov	r4, r1
 800814c:	f7ff ff08 	bl	8007f60 <findslot>
 8008150:	4605      	mov	r5, r0
 8008152:	b930      	cbnz	r0, 8008162 <_swistat+0x1a>
 8008154:	f000 fae2 	bl	800871c <__errno>
 8008158:	2309      	movs	r3, #9
 800815a:	6003      	str	r3, [r0, #0]
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	bd70      	pop	{r4, r5, r6, pc}
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008168:	6063      	str	r3, [r4, #4]
 800816a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800816e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008170:	260c      	movs	r6, #12
 8008172:	4630      	mov	r0, r6
 8008174:	4629      	mov	r1, r5
 8008176:	beab      	bkpt	0x00ab
 8008178:	4605      	mov	r5, r0
 800817a:	4628      	mov	r0, r5
 800817c:	f7ff ff18 	bl	8007fb0 <checkerror>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d0eb      	beq.n	800815c <_swistat+0x14>
 8008184:	6120      	str	r0, [r4, #16]
 8008186:	2000      	movs	r0, #0
 8008188:	e7ea      	b.n	8008160 <_swistat+0x18>

0800818a <_stat>:
 800818a:	b538      	push	{r3, r4, r5, lr}
 800818c:	460d      	mov	r5, r1
 800818e:	4604      	mov	r4, r0
 8008190:	2258      	movs	r2, #88	@ 0x58
 8008192:	2100      	movs	r1, #0
 8008194:	4628      	mov	r0, r5
 8008196:	f000 fa72 	bl	800867e <memset>
 800819a:	4620      	mov	r0, r4
 800819c:	2100      	movs	r1, #0
 800819e:	f000 f811 	bl	80081c4 <_swiopen>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	4604      	mov	r4, r0
 80081a6:	d00b      	beq.n	80081c0 <_stat+0x36>
 80081a8:	686b      	ldr	r3, [r5, #4]
 80081aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80081ae:	606b      	str	r3, [r5, #4]
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7ff ffc9 	bl	8008148 <_swistat>
 80081b6:	4605      	mov	r5, r0
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff ffa3 	bl	8008104 <_close>
 80081be:	462c      	mov	r4, r5
 80081c0:	4620      	mov	r0, r4
 80081c2:	bd38      	pop	{r3, r4, r5, pc}

080081c4 <_swiopen>:
 80081c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	4f29      	ldr	r7, [pc, #164]	@ (8008270 <_swiopen+0xac>)
 80081ca:	b096      	sub	sp, #88	@ 0x58
 80081cc:	4682      	mov	sl, r0
 80081ce:	460e      	mov	r6, r1
 80081d0:	2400      	movs	r4, #0
 80081d2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80081d6:	3301      	adds	r3, #1
 80081d8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80081dc:	d00c      	beq.n	80081f8 <_swiopen+0x34>
 80081de:	3401      	adds	r4, #1
 80081e0:	2c14      	cmp	r4, #20
 80081e2:	d1f6      	bne.n	80081d2 <_swiopen+0xe>
 80081e4:	f000 fa9a 	bl	800871c <__errno>
 80081e8:	2318      	movs	r3, #24
 80081ea:	6003      	str	r3, [r0, #0]
 80081ec:	f04f 34ff 	mov.w	r4, #4294967295
 80081f0:	4620      	mov	r0, r4
 80081f2:	b016      	add	sp, #88	@ 0x58
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80081fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008200:	46e9      	mov	r9, sp
 8008202:	d109      	bne.n	8008218 <_swiopen+0x54>
 8008204:	4649      	mov	r1, r9
 8008206:	4650      	mov	r0, sl
 8008208:	f7ff ffbf 	bl	800818a <_stat>
 800820c:	3001      	adds	r0, #1
 800820e:	d003      	beq.n	8008218 <_swiopen+0x54>
 8008210:	f000 fa84 	bl	800871c <__errno>
 8008214:	2311      	movs	r3, #17
 8008216:	e7e8      	b.n	80081ea <_swiopen+0x26>
 8008218:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800821c:	f240 6301 	movw	r3, #1537	@ 0x601
 8008220:	07b2      	lsls	r2, r6, #30
 8008222:	bf48      	it	mi
 8008224:	f045 0502 	orrmi.w	r5, r5, #2
 8008228:	421e      	tst	r6, r3
 800822a:	bf18      	it	ne
 800822c:	f045 0504 	orrne.w	r5, r5, #4
 8008230:	0733      	lsls	r3, r6, #28
 8008232:	bf48      	it	mi
 8008234:	f025 0504 	bicmi.w	r5, r5, #4
 8008238:	4650      	mov	r0, sl
 800823a:	bf48      	it	mi
 800823c:	f045 0508 	orrmi.w	r5, r5, #8
 8008240:	f8cd a000 	str.w	sl, [sp]
 8008244:	f7f7 ffd4 	bl	80001f0 <strlen>
 8008248:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800824c:	2501      	movs	r5, #1
 800824e:	4628      	mov	r0, r5
 8008250:	4649      	mov	r1, r9
 8008252:	beab      	bkpt	0x00ab
 8008254:	4605      	mov	r5, r0
 8008256:	2d00      	cmp	r5, #0
 8008258:	db05      	blt.n	8008266 <_swiopen+0xa2>
 800825a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800825e:	4447      	add	r7, r8
 8008260:	2300      	movs	r3, #0
 8008262:	607b      	str	r3, [r7, #4]
 8008264:	e7c4      	b.n	80081f0 <_swiopen+0x2c>
 8008266:	4628      	mov	r0, r5
 8008268:	f7ff fe94 	bl	8007f94 <error>
 800826c:	4604      	mov	r4, r0
 800826e:	e7bf      	b.n	80081f0 <_swiopen+0x2c>
 8008270:	20025cc4 	.word	0x20025cc4

08008274 <_get_semihosting_exts>:
 8008274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008278:	4606      	mov	r6, r0
 800827a:	460f      	mov	r7, r1
 800827c:	4829      	ldr	r0, [pc, #164]	@ (8008324 <_get_semihosting_exts+0xb0>)
 800827e:	2100      	movs	r1, #0
 8008280:	4615      	mov	r5, r2
 8008282:	f7ff ff9f 	bl	80081c4 <_swiopen>
 8008286:	462a      	mov	r2, r5
 8008288:	4604      	mov	r4, r0
 800828a:	2100      	movs	r1, #0
 800828c:	4630      	mov	r0, r6
 800828e:	f000 f9f6 	bl	800867e <memset>
 8008292:	1c63      	adds	r3, r4, #1
 8008294:	d014      	beq.n	80082c0 <_get_semihosting_exts+0x4c>
 8008296:	4620      	mov	r0, r4
 8008298:	f7ff fe62 	bl	8007f60 <findslot>
 800829c:	f04f 080c 	mov.w	r8, #12
 80082a0:	4681      	mov	r9, r0
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	beab      	bkpt	0x00ab
 80082a8:	4680      	mov	r8, r0
 80082aa:	4640      	mov	r0, r8
 80082ac:	f7ff fe80 	bl	8007fb0 <checkerror>
 80082b0:	2803      	cmp	r0, #3
 80082b2:	dd02      	ble.n	80082ba <_get_semihosting_exts+0x46>
 80082b4:	1ec3      	subs	r3, r0, #3
 80082b6:	42ab      	cmp	r3, r5
 80082b8:	dc07      	bgt.n	80082ca <_get_semihosting_exts+0x56>
 80082ba:	4620      	mov	r0, r4
 80082bc:	f7ff ff22 	bl	8008104 <_close>
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	b003      	add	sp, #12
 80082c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ca:	2204      	movs	r2, #4
 80082cc:	eb0d 0102 	add.w	r1, sp, r2
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7ff fe82 	bl	8007fda <_read>
 80082d6:	2803      	cmp	r0, #3
 80082d8:	ddef      	ble.n	80082ba <_get_semihosting_exts+0x46>
 80082da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082de:	2b53      	cmp	r3, #83	@ 0x53
 80082e0:	d1eb      	bne.n	80082ba <_get_semihosting_exts+0x46>
 80082e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80082e6:	2b48      	cmp	r3, #72	@ 0x48
 80082e8:	d1e7      	bne.n	80082ba <_get_semihosting_exts+0x46>
 80082ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082ee:	2b46      	cmp	r3, #70	@ 0x46
 80082f0:	d1e3      	bne.n	80082ba <_get_semihosting_exts+0x46>
 80082f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082f6:	2b42      	cmp	r3, #66	@ 0x42
 80082f8:	d1df      	bne.n	80082ba <_get_semihosting_exts+0x46>
 80082fa:	2201      	movs	r2, #1
 80082fc:	4639      	mov	r1, r7
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fe85 	bl	800800e <_swilseek>
 8008304:	2800      	cmp	r0, #0
 8008306:	dbd8      	blt.n	80082ba <_get_semihosting_exts+0x46>
 8008308:	462a      	mov	r2, r5
 800830a:	4631      	mov	r1, r6
 800830c:	4620      	mov	r0, r4
 800830e:	f7ff fe64 	bl	8007fda <_read>
 8008312:	4605      	mov	r5, r0
 8008314:	4620      	mov	r0, r4
 8008316:	f7ff fef5 	bl	8008104 <_close>
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff fe48 	bl	8007fb0 <checkerror>
 8008320:	e7d0      	b.n	80082c4 <_get_semihosting_exts+0x50>
 8008322:	bf00      	nop
 8008324:	0800a570 	.word	0x0800a570

08008328 <initialise_semihosting_exts>:
 8008328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800832a:	4d0a      	ldr	r5, [pc, #40]	@ (8008354 <initialise_semihosting_exts+0x2c>)
 800832c:	4c0a      	ldr	r4, [pc, #40]	@ (8008358 <initialise_semihosting_exts+0x30>)
 800832e:	2100      	movs	r1, #0
 8008330:	2201      	movs	r2, #1
 8008332:	a801      	add	r0, sp, #4
 8008334:	6029      	str	r1, [r5, #0]
 8008336:	6022      	str	r2, [r4, #0]
 8008338:	f7ff ff9c 	bl	8008274 <_get_semihosting_exts>
 800833c:	2800      	cmp	r0, #0
 800833e:	dd07      	ble.n	8008350 <initialise_semihosting_exts+0x28>
 8008340:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008344:	f003 0201 	and.w	r2, r3, #1
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	b003      	add	sp, #12
 8008352:	bd30      	pop	{r4, r5, pc}
 8008354:	20000020 	.word	0x20000020
 8008358:	2000001c 	.word	0x2000001c

0800835c <_has_ext_stdout_stderr>:
 800835c:	b510      	push	{r4, lr}
 800835e:	4c04      	ldr	r4, [pc, #16]	@ (8008370 <_has_ext_stdout_stderr+0x14>)
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	da01      	bge.n	800836a <_has_ext_stdout_stderr+0xe>
 8008366:	f7ff ffdf 	bl	8008328 <initialise_semihosting_exts>
 800836a:	6820      	ldr	r0, [r4, #0]
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	2000001c 	.word	0x2000001c

08008374 <initialise_monitor_handles>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	b085      	sub	sp, #20
 800837a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800842c <initialise_monitor_handles+0xb8>
 800837e:	f8cd 9004 	str.w	r9, [sp, #4]
 8008382:	2303      	movs	r3, #3
 8008384:	2400      	movs	r4, #0
 8008386:	9303      	str	r3, [sp, #12]
 8008388:	af01      	add	r7, sp, #4
 800838a:	9402      	str	r4, [sp, #8]
 800838c:	2501      	movs	r5, #1
 800838e:	4628      	mov	r0, r5
 8008390:	4639      	mov	r1, r7
 8008392:	beab      	bkpt	0x00ab
 8008394:	4605      	mov	r5, r0
 8008396:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008430 <initialise_monitor_handles+0xbc>
 800839a:	4623      	mov	r3, r4
 800839c:	4c20      	ldr	r4, [pc, #128]	@ (8008420 <initialise_monitor_handles+0xac>)
 800839e:	f8c8 5000 	str.w	r5, [r8]
 80083a2:	f04f 32ff 	mov.w	r2, #4294967295
 80083a6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80083aa:	3301      	adds	r3, #1
 80083ac:	2b14      	cmp	r3, #20
 80083ae:	d1fa      	bne.n	80083a6 <initialise_monitor_handles+0x32>
 80083b0:	f7ff ffd4 	bl	800835c <_has_ext_stdout_stderr>
 80083b4:	4d1b      	ldr	r5, [pc, #108]	@ (8008424 <initialise_monitor_handles+0xb0>)
 80083b6:	b1d0      	cbz	r0, 80083ee <initialise_monitor_handles+0x7a>
 80083b8:	f04f 0a03 	mov.w	sl, #3
 80083bc:	2304      	movs	r3, #4
 80083be:	f8cd 9004 	str.w	r9, [sp, #4]
 80083c2:	2601      	movs	r6, #1
 80083c4:	f8cd a00c 	str.w	sl, [sp, #12]
 80083c8:	9302      	str	r3, [sp, #8]
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	beab      	bkpt	0x00ab
 80083d0:	4683      	mov	fp, r0
 80083d2:	4b15      	ldr	r3, [pc, #84]	@ (8008428 <initialise_monitor_handles+0xb4>)
 80083d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80083d8:	f8c3 b000 	str.w	fp, [r3]
 80083dc:	2308      	movs	r3, #8
 80083de:	f8cd a00c 	str.w	sl, [sp, #12]
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	beab      	bkpt	0x00ab
 80083ea:	4606      	mov	r6, r0
 80083ec:	602e      	str	r6, [r5, #0]
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	bf02      	ittt	eq
 80083f4:	4b0c      	ldreq	r3, [pc, #48]	@ (8008428 <initialise_monitor_handles+0xb4>)
 80083f6:	681b      	ldreq	r3, [r3, #0]
 80083f8:	602b      	streq	r3, [r5, #0]
 80083fa:	2600      	movs	r6, #0
 80083fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	6066      	str	r6, [r4, #4]
 8008404:	f7ff ffaa 	bl	800835c <_has_ext_stdout_stderr>
 8008408:	b130      	cbz	r0, 8008418 <initialise_monitor_handles+0xa4>
 800840a:	4b07      	ldr	r3, [pc, #28]	@ (8008428 <initialise_monitor_handles+0xb4>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8008418:	b005      	add	sp, #20
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	bf00      	nop
 8008420:	20025cc4 	.word	0x20025cc4
 8008424:	20025cb8 	.word	0x20025cb8
 8008428:	20025cbc 	.word	0x20025cbc
 800842c:	0800a586 	.word	0x0800a586
 8008430:	20025cc0 	.word	0x20025cc0

08008434 <std>:
 8008434:	2300      	movs	r3, #0
 8008436:	b510      	push	{r4, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	e9c0 3300 	strd	r3, r3, [r0]
 800843e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008442:	6083      	str	r3, [r0, #8]
 8008444:	8181      	strh	r1, [r0, #12]
 8008446:	6643      	str	r3, [r0, #100]	@ 0x64
 8008448:	81c2      	strh	r2, [r0, #14]
 800844a:	6183      	str	r3, [r0, #24]
 800844c:	4619      	mov	r1, r3
 800844e:	2208      	movs	r2, #8
 8008450:	305c      	adds	r0, #92	@ 0x5c
 8008452:	f000 f914 	bl	800867e <memset>
 8008456:	4b0d      	ldr	r3, [pc, #52]	@ (800848c <std+0x58>)
 8008458:	6263      	str	r3, [r4, #36]	@ 0x24
 800845a:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <std+0x5c>)
 800845c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800845e:	4b0d      	ldr	r3, [pc, #52]	@ (8008494 <std+0x60>)
 8008460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008462:	4b0d      	ldr	r3, [pc, #52]	@ (8008498 <std+0x64>)
 8008464:	6323      	str	r3, [r4, #48]	@ 0x30
 8008466:	4b0d      	ldr	r3, [pc, #52]	@ (800849c <std+0x68>)
 8008468:	6224      	str	r4, [r4, #32]
 800846a:	429c      	cmp	r4, r3
 800846c:	d006      	beq.n	800847c <std+0x48>
 800846e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008472:	4294      	cmp	r4, r2
 8008474:	d002      	beq.n	800847c <std+0x48>
 8008476:	33d0      	adds	r3, #208	@ 0xd0
 8008478:	429c      	cmp	r4, r3
 800847a:	d105      	bne.n	8008488 <std+0x54>
 800847c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008484:	f000 b974 	b.w	8008770 <__retarget_lock_init_recursive>
 8008488:	bd10      	pop	{r4, pc}
 800848a:	bf00      	nop
 800848c:	080085f9 	.word	0x080085f9
 8008490:	0800861b 	.word	0x0800861b
 8008494:	08008653 	.word	0x08008653
 8008498:	08008677 	.word	0x08008677
 800849c:	20025d64 	.word	0x20025d64

080084a0 <stdio_exit_handler>:
 80084a0:	4a02      	ldr	r2, [pc, #8]	@ (80084ac <stdio_exit_handler+0xc>)
 80084a2:	4903      	ldr	r1, [pc, #12]	@ (80084b0 <stdio_exit_handler+0x10>)
 80084a4:	4803      	ldr	r0, [pc, #12]	@ (80084b4 <stdio_exit_handler+0x14>)
 80084a6:	f000 b869 	b.w	800857c <_fwalk_sglue>
 80084aa:	bf00      	nop
 80084ac:	20000024 	.word	0x20000024
 80084b0:	0800903d 	.word	0x0800903d
 80084b4:	20000034 	.word	0x20000034

080084b8 <cleanup_stdio>:
 80084b8:	6841      	ldr	r1, [r0, #4]
 80084ba:	4b0c      	ldr	r3, [pc, #48]	@ (80084ec <cleanup_stdio+0x34>)
 80084bc:	4299      	cmp	r1, r3
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
 80084c2:	d001      	beq.n	80084c8 <cleanup_stdio+0x10>
 80084c4:	f000 fdba 	bl	800903c <_fflush_r>
 80084c8:	68a1      	ldr	r1, [r4, #8]
 80084ca:	4b09      	ldr	r3, [pc, #36]	@ (80084f0 <cleanup_stdio+0x38>)
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d002      	beq.n	80084d6 <cleanup_stdio+0x1e>
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 fdb3 	bl	800903c <_fflush_r>
 80084d6:	68e1      	ldr	r1, [r4, #12]
 80084d8:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <cleanup_stdio+0x3c>)
 80084da:	4299      	cmp	r1, r3
 80084dc:	d004      	beq.n	80084e8 <cleanup_stdio+0x30>
 80084de:	4620      	mov	r0, r4
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f000 bdaa 	b.w	800903c <_fflush_r>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	20025d64 	.word	0x20025d64
 80084f0:	20025dcc 	.word	0x20025dcc
 80084f4:	20025e34 	.word	0x20025e34

080084f8 <global_stdio_init.part.0>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <global_stdio_init.part.0+0x30>)
 80084fc:	4c0b      	ldr	r4, [pc, #44]	@ (800852c <global_stdio_init.part.0+0x34>)
 80084fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008530 <global_stdio_init.part.0+0x38>)
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	4620      	mov	r0, r4
 8008504:	2200      	movs	r2, #0
 8008506:	2104      	movs	r1, #4
 8008508:	f7ff ff94 	bl	8008434 <std>
 800850c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008510:	2201      	movs	r2, #1
 8008512:	2109      	movs	r1, #9
 8008514:	f7ff ff8e 	bl	8008434 <std>
 8008518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800851c:	2202      	movs	r2, #2
 800851e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008522:	2112      	movs	r1, #18
 8008524:	f7ff bf86 	b.w	8008434 <std>
 8008528:	20025e9c 	.word	0x20025e9c
 800852c:	20025d64 	.word	0x20025d64
 8008530:	080084a1 	.word	0x080084a1

08008534 <__sfp_lock_acquire>:
 8008534:	4801      	ldr	r0, [pc, #4]	@ (800853c <__sfp_lock_acquire+0x8>)
 8008536:	f000 b91c 	b.w	8008772 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	20025ea5 	.word	0x20025ea5

08008540 <__sfp_lock_release>:
 8008540:	4801      	ldr	r0, [pc, #4]	@ (8008548 <__sfp_lock_release+0x8>)
 8008542:	f000 b917 	b.w	8008774 <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	20025ea5 	.word	0x20025ea5

0800854c <__sinit>:
 800854c:	b510      	push	{r4, lr}
 800854e:	4604      	mov	r4, r0
 8008550:	f7ff fff0 	bl	8008534 <__sfp_lock_acquire>
 8008554:	6a23      	ldr	r3, [r4, #32]
 8008556:	b11b      	cbz	r3, 8008560 <__sinit+0x14>
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	f7ff bff0 	b.w	8008540 <__sfp_lock_release>
 8008560:	4b04      	ldr	r3, [pc, #16]	@ (8008574 <__sinit+0x28>)
 8008562:	6223      	str	r3, [r4, #32]
 8008564:	4b04      	ldr	r3, [pc, #16]	@ (8008578 <__sinit+0x2c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f5      	bne.n	8008558 <__sinit+0xc>
 800856c:	f7ff ffc4 	bl	80084f8 <global_stdio_init.part.0>
 8008570:	e7f2      	b.n	8008558 <__sinit+0xc>
 8008572:	bf00      	nop
 8008574:	080084b9 	.word	0x080084b9
 8008578:	20025e9c 	.word	0x20025e9c

0800857c <_fwalk_sglue>:
 800857c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008580:	4607      	mov	r7, r0
 8008582:	4688      	mov	r8, r1
 8008584:	4614      	mov	r4, r2
 8008586:	2600      	movs	r6, #0
 8008588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800858c:	f1b9 0901 	subs.w	r9, r9, #1
 8008590:	d505      	bpl.n	800859e <_fwalk_sglue+0x22>
 8008592:	6824      	ldr	r4, [r4, #0]
 8008594:	2c00      	cmp	r4, #0
 8008596:	d1f7      	bne.n	8008588 <_fwalk_sglue+0xc>
 8008598:	4630      	mov	r0, r6
 800859a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d907      	bls.n	80085b4 <_fwalk_sglue+0x38>
 80085a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a8:	3301      	adds	r3, #1
 80085aa:	d003      	beq.n	80085b4 <_fwalk_sglue+0x38>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4638      	mov	r0, r7
 80085b0:	47c0      	blx	r8
 80085b2:	4306      	orrs	r6, r0
 80085b4:	3568      	adds	r5, #104	@ 0x68
 80085b6:	e7e9      	b.n	800858c <_fwalk_sglue+0x10>

080085b8 <siprintf>:
 80085b8:	b40e      	push	{r1, r2, r3}
 80085ba:	b500      	push	{lr}
 80085bc:	b09c      	sub	sp, #112	@ 0x70
 80085be:	ab1d      	add	r3, sp, #116	@ 0x74
 80085c0:	9002      	str	r0, [sp, #8]
 80085c2:	9006      	str	r0, [sp, #24]
 80085c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085c8:	4809      	ldr	r0, [pc, #36]	@ (80085f0 <siprintf+0x38>)
 80085ca:	9107      	str	r1, [sp, #28]
 80085cc:	9104      	str	r1, [sp, #16]
 80085ce:	4909      	ldr	r1, [pc, #36]	@ (80085f4 <siprintf+0x3c>)
 80085d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d4:	9105      	str	r1, [sp, #20]
 80085d6:	6800      	ldr	r0, [r0, #0]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	a902      	add	r1, sp, #8
 80085dc:	f000 fa20 	bl	8008a20 <_svfiprintf_r>
 80085e0:	9b02      	ldr	r3, [sp, #8]
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	b01c      	add	sp, #112	@ 0x70
 80085e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085ec:	b003      	add	sp, #12
 80085ee:	4770      	bx	lr
 80085f0:	20000030 	.word	0x20000030
 80085f4:	ffff0208 	.word	0xffff0208

080085f8 <__sread>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	460c      	mov	r4, r1
 80085fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008600:	f000 f868 	bl	80086d4 <_read_r>
 8008604:	2800      	cmp	r0, #0
 8008606:	bfab      	itete	ge
 8008608:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800860a:	89a3      	ldrhlt	r3, [r4, #12]
 800860c:	181b      	addge	r3, r3, r0
 800860e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008612:	bfac      	ite	ge
 8008614:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008616:	81a3      	strhlt	r3, [r4, #12]
 8008618:	bd10      	pop	{r4, pc}

0800861a <__swrite>:
 800861a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861e:	461f      	mov	r7, r3
 8008620:	898b      	ldrh	r3, [r1, #12]
 8008622:	05db      	lsls	r3, r3, #23
 8008624:	4605      	mov	r5, r0
 8008626:	460c      	mov	r4, r1
 8008628:	4616      	mov	r6, r2
 800862a:	d505      	bpl.n	8008638 <__swrite+0x1e>
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	2302      	movs	r3, #2
 8008632:	2200      	movs	r2, #0
 8008634:	f000 f83c 	bl	80086b0 <_lseek_r>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800863e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	4632      	mov	r2, r6
 8008646:	463b      	mov	r3, r7
 8008648:	4628      	mov	r0, r5
 800864a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	f000 b853 	b.w	80086f8 <_write_r>

08008652 <__sseek>:
 8008652:	b510      	push	{r4, lr}
 8008654:	460c      	mov	r4, r1
 8008656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865a:	f000 f829 	bl	80086b0 <_lseek_r>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	bf15      	itete	ne
 8008664:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008666:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800866a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800866e:	81a3      	strheq	r3, [r4, #12]
 8008670:	bf18      	it	ne
 8008672:	81a3      	strhne	r3, [r4, #12]
 8008674:	bd10      	pop	{r4, pc}

08008676 <__sclose>:
 8008676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867a:	f000 b809 	b.w	8008690 <_close_r>

0800867e <memset>:
 800867e:	4402      	add	r2, r0
 8008680:	4603      	mov	r3, r0
 8008682:	4293      	cmp	r3, r2
 8008684:	d100      	bne.n	8008688 <memset+0xa>
 8008686:	4770      	bx	lr
 8008688:	f803 1b01 	strb.w	r1, [r3], #1
 800868c:	e7f9      	b.n	8008682 <memset+0x4>
	...

08008690 <_close_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d06      	ldr	r5, [pc, #24]	@ (80086ac <_close_r+0x1c>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7ff fd32 	bl	8008104 <_close>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_close_r+0x1a>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_close_r+0x1a>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20025ea0 	.word	0x20025ea0

080086b0 <_lseek_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	@ (80086d0 <_lseek_r+0x20>)
 80086b4:	4604      	mov	r4, r0
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7ff fce1 	bl	8008086 <_lseek>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_lseek_r+0x1e>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_lseek_r+0x1e>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20025ea0 	.word	0x20025ea0

080086d4 <_read_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	@ (80086f4 <_read_r+0x20>)
 80086d8:	4604      	mov	r4, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7ff fc79 	bl	8007fda <_read>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_read_r+0x1e>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_read_r+0x1e>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20025ea0 	.word	0x20025ea0

080086f8 <_write_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d07      	ldr	r5, [pc, #28]	@ (8008718 <_write_r+0x20>)
 80086fc:	4604      	mov	r4, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	602a      	str	r2, [r5, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7ff fccf 	bl	80080aa <_write>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_write_r+0x1e>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_write_r+0x1e>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20025ea0 	.word	0x20025ea0

0800871c <__errno>:
 800871c:	4b01      	ldr	r3, [pc, #4]	@ (8008724 <__errno+0x8>)
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000030 	.word	0x20000030

08008728 <__libc_init_array>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	4d0d      	ldr	r5, [pc, #52]	@ (8008760 <__libc_init_array+0x38>)
 800872c:	4c0d      	ldr	r4, [pc, #52]	@ (8008764 <__libc_init_array+0x3c>)
 800872e:	1b64      	subs	r4, r4, r5
 8008730:	10a4      	asrs	r4, r4, #2
 8008732:	2600      	movs	r6, #0
 8008734:	42a6      	cmp	r6, r4
 8008736:	d109      	bne.n	800874c <__libc_init_array+0x24>
 8008738:	4d0b      	ldr	r5, [pc, #44]	@ (8008768 <__libc_init_array+0x40>)
 800873a:	4c0c      	ldr	r4, [pc, #48]	@ (800876c <__libc_init_array+0x44>)
 800873c:	f000 fd14 	bl	8009168 <_init>
 8008740:	1b64      	subs	r4, r4, r5
 8008742:	10a4      	asrs	r4, r4, #2
 8008744:	2600      	movs	r6, #0
 8008746:	42a6      	cmp	r6, r4
 8008748:	d105      	bne.n	8008756 <__libc_init_array+0x2e>
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008750:	4798      	blx	r3
 8008752:	3601      	adds	r6, #1
 8008754:	e7ee      	b.n	8008734 <__libc_init_array+0xc>
 8008756:	f855 3b04 	ldr.w	r3, [r5], #4
 800875a:	4798      	blx	r3
 800875c:	3601      	adds	r6, #1
 800875e:	e7f2      	b.n	8008746 <__libc_init_array+0x1e>
 8008760:	0800a5c8 	.word	0x0800a5c8
 8008764:	0800a5c8 	.word	0x0800a5c8
 8008768:	0800a5c8 	.word	0x0800a5c8
 800876c:	0800a5cc 	.word	0x0800a5cc

08008770 <__retarget_lock_init_recursive>:
 8008770:	4770      	bx	lr

08008772 <__retarget_lock_acquire_recursive>:
 8008772:	4770      	bx	lr

08008774 <__retarget_lock_release_recursive>:
 8008774:	4770      	bx	lr
	...

08008778 <_free_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4605      	mov	r5, r0
 800877c:	2900      	cmp	r1, #0
 800877e:	d041      	beq.n	8008804 <_free_r+0x8c>
 8008780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008784:	1f0c      	subs	r4, r1, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfb8      	it	lt
 800878a:	18e4      	addlt	r4, r4, r3
 800878c:	f000 f8e0 	bl	8008950 <__malloc_lock>
 8008790:	4a1d      	ldr	r2, [pc, #116]	@ (8008808 <_free_r+0x90>)
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	b933      	cbnz	r3, 80087a4 <_free_r+0x2c>
 8008796:	6063      	str	r3, [r4, #4]
 8008798:	6014      	str	r4, [r2, #0]
 800879a:	4628      	mov	r0, r5
 800879c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087a0:	f000 b8dc 	b.w	800895c <__malloc_unlock>
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	d908      	bls.n	80087ba <_free_r+0x42>
 80087a8:	6820      	ldr	r0, [r4, #0]
 80087aa:	1821      	adds	r1, r4, r0
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf01      	itttt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	1809      	addeq	r1, r1, r0
 80087b6:	6021      	streq	r1, [r4, #0]
 80087b8:	e7ed      	b.n	8008796 <_free_r+0x1e>
 80087ba:	461a      	mov	r2, r3
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	b10b      	cbz	r3, 80087c4 <_free_r+0x4c>
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d9fa      	bls.n	80087ba <_free_r+0x42>
 80087c4:	6811      	ldr	r1, [r2, #0]
 80087c6:	1850      	adds	r0, r2, r1
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d10b      	bne.n	80087e4 <_free_r+0x6c>
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	4401      	add	r1, r0
 80087d0:	1850      	adds	r0, r2, r1
 80087d2:	4283      	cmp	r3, r0
 80087d4:	6011      	str	r1, [r2, #0]
 80087d6:	d1e0      	bne.n	800879a <_free_r+0x22>
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	6053      	str	r3, [r2, #4]
 80087de:	4408      	add	r0, r1
 80087e0:	6010      	str	r0, [r2, #0]
 80087e2:	e7da      	b.n	800879a <_free_r+0x22>
 80087e4:	d902      	bls.n	80087ec <_free_r+0x74>
 80087e6:	230c      	movs	r3, #12
 80087e8:	602b      	str	r3, [r5, #0]
 80087ea:	e7d6      	b.n	800879a <_free_r+0x22>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	1821      	adds	r1, r4, r0
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf04      	itt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	bf04      	itt	eq
 80087fc:	1809      	addeq	r1, r1, r0
 80087fe:	6021      	streq	r1, [r4, #0]
 8008800:	6054      	str	r4, [r2, #4]
 8008802:	e7ca      	b.n	800879a <_free_r+0x22>
 8008804:	bd38      	pop	{r3, r4, r5, pc}
 8008806:	bf00      	nop
 8008808:	20025eac 	.word	0x20025eac

0800880c <sbrk_aligned>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4e0f      	ldr	r6, [pc, #60]	@ (800884c <sbrk_aligned+0x40>)
 8008810:	460c      	mov	r4, r1
 8008812:	6831      	ldr	r1, [r6, #0]
 8008814:	4605      	mov	r5, r0
 8008816:	b911      	cbnz	r1, 800881e <sbrk_aligned+0x12>
 8008818:	f000 fc52 	bl	80090c0 <_sbrk_r>
 800881c:	6030      	str	r0, [r6, #0]
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f000 fc4d 	bl	80090c0 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d103      	bne.n	8008832 <sbrk_aligned+0x26>
 800882a:	f04f 34ff 	mov.w	r4, #4294967295
 800882e:	4620      	mov	r0, r4
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d0f8      	beq.n	800882e <sbrk_aligned+0x22>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4628      	mov	r0, r5
 8008840:	f000 fc3e 	bl	80090c0 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d1f2      	bne.n	800882e <sbrk_aligned+0x22>
 8008848:	e7ef      	b.n	800882a <sbrk_aligned+0x1e>
 800884a:	bf00      	nop
 800884c:	20025ea8 	.word	0x20025ea8

08008850 <_malloc_r>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	1ccd      	adds	r5, r1, #3
 8008856:	f025 0503 	bic.w	r5, r5, #3
 800885a:	3508      	adds	r5, #8
 800885c:	2d0c      	cmp	r5, #12
 800885e:	bf38      	it	cc
 8008860:	250c      	movcc	r5, #12
 8008862:	2d00      	cmp	r5, #0
 8008864:	4606      	mov	r6, r0
 8008866:	db01      	blt.n	800886c <_malloc_r+0x1c>
 8008868:	42a9      	cmp	r1, r5
 800886a:	d904      	bls.n	8008876 <_malloc_r+0x26>
 800886c:	230c      	movs	r3, #12
 800886e:	6033      	str	r3, [r6, #0]
 8008870:	2000      	movs	r0, #0
 8008872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800894c <_malloc_r+0xfc>
 800887a:	f000 f869 	bl	8008950 <__malloc_lock>
 800887e:	f8d8 3000 	ldr.w	r3, [r8]
 8008882:	461c      	mov	r4, r3
 8008884:	bb44      	cbnz	r4, 80088d8 <_malloc_r+0x88>
 8008886:	4629      	mov	r1, r5
 8008888:	4630      	mov	r0, r6
 800888a:	f7ff ffbf 	bl	800880c <sbrk_aligned>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	4604      	mov	r4, r0
 8008892:	d158      	bne.n	8008946 <_malloc_r+0xf6>
 8008894:	f8d8 4000 	ldr.w	r4, [r8]
 8008898:	4627      	mov	r7, r4
 800889a:	2f00      	cmp	r7, #0
 800889c:	d143      	bne.n	8008926 <_malloc_r+0xd6>
 800889e:	2c00      	cmp	r4, #0
 80088a0:	d04b      	beq.n	800893a <_malloc_r+0xea>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	4639      	mov	r1, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	eb04 0903 	add.w	r9, r4, r3
 80088ac:	f000 fc08 	bl	80090c0 <_sbrk_r>
 80088b0:	4581      	cmp	r9, r0
 80088b2:	d142      	bne.n	800893a <_malloc_r+0xea>
 80088b4:	6821      	ldr	r1, [r4, #0]
 80088b6:	1a6d      	subs	r5, r5, r1
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ffa6 	bl	800880c <sbrk_aligned>
 80088c0:	3001      	adds	r0, #1
 80088c2:	d03a      	beq.n	800893a <_malloc_r+0xea>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	442b      	add	r3, r5
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	f8d8 3000 	ldr.w	r3, [r8]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	bb62      	cbnz	r2, 800892c <_malloc_r+0xdc>
 80088d2:	f8c8 7000 	str.w	r7, [r8]
 80088d6:	e00f      	b.n	80088f8 <_malloc_r+0xa8>
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	1b52      	subs	r2, r2, r5
 80088dc:	d420      	bmi.n	8008920 <_malloc_r+0xd0>
 80088de:	2a0b      	cmp	r2, #11
 80088e0:	d917      	bls.n	8008912 <_malloc_r+0xc2>
 80088e2:	1961      	adds	r1, r4, r5
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	6025      	str	r5, [r4, #0]
 80088e8:	bf18      	it	ne
 80088ea:	6059      	strne	r1, [r3, #4]
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	bf08      	it	eq
 80088f0:	f8c8 1000 	streq.w	r1, [r8]
 80088f4:	5162      	str	r2, [r4, r5]
 80088f6:	604b      	str	r3, [r1, #4]
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f82f 	bl	800895c <__malloc_unlock>
 80088fe:	f104 000b 	add.w	r0, r4, #11
 8008902:	1d23      	adds	r3, r4, #4
 8008904:	f020 0007 	bic.w	r0, r0, #7
 8008908:	1ac2      	subs	r2, r0, r3
 800890a:	bf1c      	itt	ne
 800890c:	1a1b      	subne	r3, r3, r0
 800890e:	50a3      	strne	r3, [r4, r2]
 8008910:	e7af      	b.n	8008872 <_malloc_r+0x22>
 8008912:	6862      	ldr	r2, [r4, #4]
 8008914:	42a3      	cmp	r3, r4
 8008916:	bf0c      	ite	eq
 8008918:	f8c8 2000 	streq.w	r2, [r8]
 800891c:	605a      	strne	r2, [r3, #4]
 800891e:	e7eb      	b.n	80088f8 <_malloc_r+0xa8>
 8008920:	4623      	mov	r3, r4
 8008922:	6864      	ldr	r4, [r4, #4]
 8008924:	e7ae      	b.n	8008884 <_malloc_r+0x34>
 8008926:	463c      	mov	r4, r7
 8008928:	687f      	ldr	r7, [r7, #4]
 800892a:	e7b6      	b.n	800889a <_malloc_r+0x4a>
 800892c:	461a      	mov	r2, r3
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	42a3      	cmp	r3, r4
 8008932:	d1fb      	bne.n	800892c <_malloc_r+0xdc>
 8008934:	2300      	movs	r3, #0
 8008936:	6053      	str	r3, [r2, #4]
 8008938:	e7de      	b.n	80088f8 <_malloc_r+0xa8>
 800893a:	230c      	movs	r3, #12
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	4630      	mov	r0, r6
 8008940:	f000 f80c 	bl	800895c <__malloc_unlock>
 8008944:	e794      	b.n	8008870 <_malloc_r+0x20>
 8008946:	6005      	str	r5, [r0, #0]
 8008948:	e7d6      	b.n	80088f8 <_malloc_r+0xa8>
 800894a:	bf00      	nop
 800894c:	20025eac 	.word	0x20025eac

08008950 <__malloc_lock>:
 8008950:	4801      	ldr	r0, [pc, #4]	@ (8008958 <__malloc_lock+0x8>)
 8008952:	f7ff bf0e 	b.w	8008772 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	20025ea4 	.word	0x20025ea4

0800895c <__malloc_unlock>:
 800895c:	4801      	ldr	r0, [pc, #4]	@ (8008964 <__malloc_unlock+0x8>)
 800895e:	f7ff bf09 	b.w	8008774 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	20025ea4 	.word	0x20025ea4

08008968 <__ssputs_r>:
 8008968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	688e      	ldr	r6, [r1, #8]
 800896e:	461f      	mov	r7, r3
 8008970:	42be      	cmp	r6, r7
 8008972:	680b      	ldr	r3, [r1, #0]
 8008974:	4682      	mov	sl, r0
 8008976:	460c      	mov	r4, r1
 8008978:	4690      	mov	r8, r2
 800897a:	d82d      	bhi.n	80089d8 <__ssputs_r+0x70>
 800897c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008980:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008984:	d026      	beq.n	80089d4 <__ssputs_r+0x6c>
 8008986:	6965      	ldr	r5, [r4, #20]
 8008988:	6909      	ldr	r1, [r1, #16]
 800898a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800898e:	eba3 0901 	sub.w	r9, r3, r1
 8008992:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008996:	1c7b      	adds	r3, r7, #1
 8008998:	444b      	add	r3, r9
 800899a:	106d      	asrs	r5, r5, #1
 800899c:	429d      	cmp	r5, r3
 800899e:	bf38      	it	cc
 80089a0:	461d      	movcc	r5, r3
 80089a2:	0553      	lsls	r3, r2, #21
 80089a4:	d527      	bpl.n	80089f6 <__ssputs_r+0x8e>
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7ff ff52 	bl	8008850 <_malloc_r>
 80089ac:	4606      	mov	r6, r0
 80089ae:	b360      	cbz	r0, 8008a0a <__ssputs_r+0xa2>
 80089b0:	6921      	ldr	r1, [r4, #16]
 80089b2:	464a      	mov	r2, r9
 80089b4:	f000 fb94 	bl	80090e0 <memcpy>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	6126      	str	r6, [r4, #16]
 80089c6:	6165      	str	r5, [r4, #20]
 80089c8:	444e      	add	r6, r9
 80089ca:	eba5 0509 	sub.w	r5, r5, r9
 80089ce:	6026      	str	r6, [r4, #0]
 80089d0:	60a5      	str	r5, [r4, #8]
 80089d2:	463e      	mov	r6, r7
 80089d4:	42be      	cmp	r6, r7
 80089d6:	d900      	bls.n	80089da <__ssputs_r+0x72>
 80089d8:	463e      	mov	r6, r7
 80089da:	6820      	ldr	r0, [r4, #0]
 80089dc:	4632      	mov	r2, r6
 80089de:	4641      	mov	r1, r8
 80089e0:	f000 fb54 	bl	800908c <memmove>
 80089e4:	68a3      	ldr	r3, [r4, #8]
 80089e6:	1b9b      	subs	r3, r3, r6
 80089e8:	60a3      	str	r3, [r4, #8]
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	4433      	add	r3, r6
 80089ee:	6023      	str	r3, [r4, #0]
 80089f0:	2000      	movs	r0, #0
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	462a      	mov	r2, r5
 80089f8:	f000 fb80 	bl	80090fc <_realloc_r>
 80089fc:	4606      	mov	r6, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d1e0      	bne.n	80089c4 <__ssputs_r+0x5c>
 8008a02:	6921      	ldr	r1, [r4, #16]
 8008a04:	4650      	mov	r0, sl
 8008a06:	f7ff feb7 	bl	8008778 <_free_r>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	f8ca 3000 	str.w	r3, [sl]
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	e7e9      	b.n	80089f2 <__ssputs_r+0x8a>
	...

08008a20 <_svfiprintf_r>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	4698      	mov	r8, r3
 8008a26:	898b      	ldrh	r3, [r1, #12]
 8008a28:	061b      	lsls	r3, r3, #24
 8008a2a:	b09d      	sub	sp, #116	@ 0x74
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	460d      	mov	r5, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	d510      	bpl.n	8008a56 <_svfiprintf_r+0x36>
 8008a34:	690b      	ldr	r3, [r1, #16]
 8008a36:	b973      	cbnz	r3, 8008a56 <_svfiprintf_r+0x36>
 8008a38:	2140      	movs	r1, #64	@ 0x40
 8008a3a:	f7ff ff09 	bl	8008850 <_malloc_r>
 8008a3e:	6028      	str	r0, [r5, #0]
 8008a40:	6128      	str	r0, [r5, #16]
 8008a42:	b930      	cbnz	r0, 8008a52 <_svfiprintf_r+0x32>
 8008a44:	230c      	movs	r3, #12
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	b01d      	add	sp, #116	@ 0x74
 8008a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a52:	2340      	movs	r3, #64	@ 0x40
 8008a54:	616b      	str	r3, [r5, #20]
 8008a56:	2300      	movs	r3, #0
 8008a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5a:	2320      	movs	r3, #32
 8008a5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a64:	2330      	movs	r3, #48	@ 0x30
 8008a66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c04 <_svfiprintf_r+0x1e4>
 8008a6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a6e:	f04f 0901 	mov.w	r9, #1
 8008a72:	4623      	mov	r3, r4
 8008a74:	469a      	mov	sl, r3
 8008a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7a:	b10a      	cbz	r2, 8008a80 <_svfiprintf_r+0x60>
 8008a7c:	2a25      	cmp	r2, #37	@ 0x25
 8008a7e:	d1f9      	bne.n	8008a74 <_svfiprintf_r+0x54>
 8008a80:	ebba 0b04 	subs.w	fp, sl, r4
 8008a84:	d00b      	beq.n	8008a9e <_svfiprintf_r+0x7e>
 8008a86:	465b      	mov	r3, fp
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff ff6b 	bl	8008968 <__ssputs_r>
 8008a92:	3001      	adds	r0, #1
 8008a94:	f000 80a7 	beq.w	8008be6 <_svfiprintf_r+0x1c6>
 8008a98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a9a:	445a      	add	r2, fp
 8008a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 809f 	beq.w	8008be6 <_svfiprintf_r+0x1c6>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab2:	f10a 0a01 	add.w	sl, sl, #1
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	9307      	str	r3, [sp, #28]
 8008aba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008abe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ac0:	4654      	mov	r4, sl
 8008ac2:	2205      	movs	r2, #5
 8008ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac8:	484e      	ldr	r0, [pc, #312]	@ (8008c04 <_svfiprintf_r+0x1e4>)
 8008aca:	f7f7 fb99 	bl	8000200 <memchr>
 8008ace:	9a04      	ldr	r2, [sp, #16]
 8008ad0:	b9d8      	cbnz	r0, 8008b0a <_svfiprintf_r+0xea>
 8008ad2:	06d0      	lsls	r0, r2, #27
 8008ad4:	bf44      	itt	mi
 8008ad6:	2320      	movmi	r3, #32
 8008ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008adc:	0711      	lsls	r1, r2, #28
 8008ade:	bf44      	itt	mi
 8008ae0:	232b      	movmi	r3, #43	@ 0x2b
 8008ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aea:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aec:	d015      	beq.n	8008b1a <_svfiprintf_r+0xfa>
 8008aee:	9a07      	ldr	r2, [sp, #28]
 8008af0:	4654      	mov	r4, sl
 8008af2:	2000      	movs	r0, #0
 8008af4:	f04f 0c0a 	mov.w	ip, #10
 8008af8:	4621      	mov	r1, r4
 8008afa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afe:	3b30      	subs	r3, #48	@ 0x30
 8008b00:	2b09      	cmp	r3, #9
 8008b02:	d94b      	bls.n	8008b9c <_svfiprintf_r+0x17c>
 8008b04:	b1b0      	cbz	r0, 8008b34 <_svfiprintf_r+0x114>
 8008b06:	9207      	str	r2, [sp, #28]
 8008b08:	e014      	b.n	8008b34 <_svfiprintf_r+0x114>
 8008b0a:	eba0 0308 	sub.w	r3, r0, r8
 8008b0e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b12:	4313      	orrs	r3, r2
 8008b14:	9304      	str	r3, [sp, #16]
 8008b16:	46a2      	mov	sl, r4
 8008b18:	e7d2      	b.n	8008ac0 <_svfiprintf_r+0xa0>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	1d19      	adds	r1, r3, #4
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	9103      	str	r1, [sp, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bfbb      	ittet	lt
 8008b26:	425b      	neglt	r3, r3
 8008b28:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2c:	9307      	strge	r3, [sp, #28]
 8008b2e:	9307      	strlt	r3, [sp, #28]
 8008b30:	bfb8      	it	lt
 8008b32:	9204      	strlt	r2, [sp, #16]
 8008b34:	7823      	ldrb	r3, [r4, #0]
 8008b36:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b38:	d10a      	bne.n	8008b50 <_svfiprintf_r+0x130>
 8008b3a:	7863      	ldrb	r3, [r4, #1]
 8008b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3e:	d132      	bne.n	8008ba6 <_svfiprintf_r+0x186>
 8008b40:	9b03      	ldr	r3, [sp, #12]
 8008b42:	1d1a      	adds	r2, r3, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	9203      	str	r2, [sp, #12]
 8008b48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b4c:	3402      	adds	r4, #2
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c14 <_svfiprintf_r+0x1f4>
 8008b54:	7821      	ldrb	r1, [r4, #0]
 8008b56:	2203      	movs	r2, #3
 8008b58:	4650      	mov	r0, sl
 8008b5a:	f7f7 fb51 	bl	8000200 <memchr>
 8008b5e:	b138      	cbz	r0, 8008b70 <_svfiprintf_r+0x150>
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	eba0 000a 	sub.w	r0, r0, sl
 8008b66:	2240      	movs	r2, #64	@ 0x40
 8008b68:	4082      	lsls	r2, r0
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	3401      	adds	r4, #1
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b74:	4824      	ldr	r0, [pc, #144]	@ (8008c08 <_svfiprintf_r+0x1e8>)
 8008b76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b7a:	2206      	movs	r2, #6
 8008b7c:	f7f7 fb40 	bl	8000200 <memchr>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d036      	beq.n	8008bf2 <_svfiprintf_r+0x1d2>
 8008b84:	4b21      	ldr	r3, [pc, #132]	@ (8008c0c <_svfiprintf_r+0x1ec>)
 8008b86:	bb1b      	cbnz	r3, 8008bd0 <_svfiprintf_r+0x1b0>
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	3307      	adds	r3, #7
 8008b8c:	f023 0307 	bic.w	r3, r3, #7
 8008b90:	3308      	adds	r3, #8
 8008b92:	9303      	str	r3, [sp, #12]
 8008b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b96:	4433      	add	r3, r6
 8008b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9a:	e76a      	b.n	8008a72 <_svfiprintf_r+0x52>
 8008b9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	e7a8      	b.n	8008af8 <_svfiprintf_r+0xd8>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	3401      	adds	r4, #1
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	4619      	mov	r1, r3
 8008bae:	f04f 0c0a 	mov.w	ip, #10
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb8:	3a30      	subs	r2, #48	@ 0x30
 8008bba:	2a09      	cmp	r2, #9
 8008bbc:	d903      	bls.n	8008bc6 <_svfiprintf_r+0x1a6>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0c6      	beq.n	8008b50 <_svfiprintf_r+0x130>
 8008bc2:	9105      	str	r1, [sp, #20]
 8008bc4:	e7c4      	b.n	8008b50 <_svfiprintf_r+0x130>
 8008bc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bca:	4604      	mov	r4, r0
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e7f0      	b.n	8008bb2 <_svfiprintf_r+0x192>
 8008bd0:	ab03      	add	r3, sp, #12
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008c10 <_svfiprintf_r+0x1f0>)
 8008bd8:	a904      	add	r1, sp, #16
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f3af 8000 	nop.w
 8008be0:	1c42      	adds	r2, r0, #1
 8008be2:	4606      	mov	r6, r0
 8008be4:	d1d6      	bne.n	8008b94 <_svfiprintf_r+0x174>
 8008be6:	89ab      	ldrh	r3, [r5, #12]
 8008be8:	065b      	lsls	r3, r3, #25
 8008bea:	f53f af2d 	bmi.w	8008a48 <_svfiprintf_r+0x28>
 8008bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf0:	e72c      	b.n	8008a4c <_svfiprintf_r+0x2c>
 8008bf2:	ab03      	add	r3, sp, #12
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	4b05      	ldr	r3, [pc, #20]	@ (8008c10 <_svfiprintf_r+0x1f0>)
 8008bfa:	a904      	add	r1, sp, #16
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f000 f879 	bl	8008cf4 <_printf_i>
 8008c02:	e7ed      	b.n	8008be0 <_svfiprintf_r+0x1c0>
 8008c04:	0800a58a 	.word	0x0800a58a
 8008c08:	0800a594 	.word	0x0800a594
 8008c0c:	00000000 	.word	0x00000000
 8008c10:	08008969 	.word	0x08008969
 8008c14:	0800a590 	.word	0x0800a590

08008c18 <_printf_common>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	4698      	mov	r8, r3
 8008c20:	688a      	ldr	r2, [r1, #8]
 8008c22:	690b      	ldr	r3, [r1, #16]
 8008c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	bfb8      	it	lt
 8008c2c:	4613      	movlt	r3, r2
 8008c2e:	6033      	str	r3, [r6, #0]
 8008c30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c34:	4607      	mov	r7, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b10a      	cbz	r2, 8008c3e <_printf_common+0x26>
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	6033      	str	r3, [r6, #0]
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	0699      	lsls	r1, r3, #26
 8008c42:	bf42      	ittt	mi
 8008c44:	6833      	ldrmi	r3, [r6, #0]
 8008c46:	3302      	addmi	r3, #2
 8008c48:	6033      	strmi	r3, [r6, #0]
 8008c4a:	6825      	ldr	r5, [r4, #0]
 8008c4c:	f015 0506 	ands.w	r5, r5, #6
 8008c50:	d106      	bne.n	8008c60 <_printf_common+0x48>
 8008c52:	f104 0a19 	add.w	sl, r4, #25
 8008c56:	68e3      	ldr	r3, [r4, #12]
 8008c58:	6832      	ldr	r2, [r6, #0]
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	42ab      	cmp	r3, r5
 8008c5e:	dc26      	bgt.n	8008cae <_printf_common+0x96>
 8008c60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c64:	6822      	ldr	r2, [r4, #0]
 8008c66:	3b00      	subs	r3, #0
 8008c68:	bf18      	it	ne
 8008c6a:	2301      	movne	r3, #1
 8008c6c:	0692      	lsls	r2, r2, #26
 8008c6e:	d42b      	bmi.n	8008cc8 <_printf_common+0xb0>
 8008c70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c74:	4641      	mov	r1, r8
 8008c76:	4638      	mov	r0, r7
 8008c78:	47c8      	blx	r9
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d01e      	beq.n	8008cbc <_printf_common+0xa4>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	6922      	ldr	r2, [r4, #16]
 8008c82:	f003 0306 	and.w	r3, r3, #6
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	bf02      	ittt	eq
 8008c8a:	68e5      	ldreq	r5, [r4, #12]
 8008c8c:	6833      	ldreq	r3, [r6, #0]
 8008c8e:	1aed      	subeq	r5, r5, r3
 8008c90:	68a3      	ldr	r3, [r4, #8]
 8008c92:	bf0c      	ite	eq
 8008c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c98:	2500      	movne	r5, #0
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	bfc4      	itt	gt
 8008c9e:	1a9b      	subgt	r3, r3, r2
 8008ca0:	18ed      	addgt	r5, r5, r3
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	341a      	adds	r4, #26
 8008ca6:	42b5      	cmp	r5, r6
 8008ca8:	d11a      	bne.n	8008ce0 <_printf_common+0xc8>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e008      	b.n	8008cc0 <_printf_common+0xa8>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	4641      	mov	r1, r8
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	47c8      	blx	r9
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d103      	bne.n	8008cc4 <_printf_common+0xac>
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	e7c6      	b.n	8008c56 <_printf_common+0x3e>
 8008cc8:	18e1      	adds	r1, r4, r3
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	2030      	movs	r0, #48	@ 0x30
 8008cce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cd2:	4422      	add	r2, r4
 8008cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cdc:	3302      	adds	r3, #2
 8008cde:	e7c7      	b.n	8008c70 <_printf_common+0x58>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	4641      	mov	r1, r8
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	47c8      	blx	r9
 8008cea:	3001      	adds	r0, #1
 8008cec:	d0e6      	beq.n	8008cbc <_printf_common+0xa4>
 8008cee:	3601      	adds	r6, #1
 8008cf0:	e7d9      	b.n	8008ca6 <_printf_common+0x8e>
	...

08008cf4 <_printf_i>:
 8008cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	7e0f      	ldrb	r7, [r1, #24]
 8008cfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cfc:	2f78      	cmp	r7, #120	@ 0x78
 8008cfe:	4691      	mov	r9, r2
 8008d00:	4680      	mov	r8, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	469a      	mov	sl, r3
 8008d06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d0a:	d807      	bhi.n	8008d1c <_printf_i+0x28>
 8008d0c:	2f62      	cmp	r7, #98	@ 0x62
 8008d0e:	d80a      	bhi.n	8008d26 <_printf_i+0x32>
 8008d10:	2f00      	cmp	r7, #0
 8008d12:	f000 80d2 	beq.w	8008eba <_printf_i+0x1c6>
 8008d16:	2f58      	cmp	r7, #88	@ 0x58
 8008d18:	f000 80b9 	beq.w	8008e8e <_printf_i+0x19a>
 8008d1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d24:	e03a      	b.n	8008d9c <_printf_i+0xa8>
 8008d26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d2a:	2b15      	cmp	r3, #21
 8008d2c:	d8f6      	bhi.n	8008d1c <_printf_i+0x28>
 8008d2e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d34 <_printf_i+0x40>)
 8008d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d34:	08008d8d 	.word	0x08008d8d
 8008d38:	08008da1 	.word	0x08008da1
 8008d3c:	08008d1d 	.word	0x08008d1d
 8008d40:	08008d1d 	.word	0x08008d1d
 8008d44:	08008d1d 	.word	0x08008d1d
 8008d48:	08008d1d 	.word	0x08008d1d
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008d1d 	.word	0x08008d1d
 8008d54:	08008d1d 	.word	0x08008d1d
 8008d58:	08008d1d 	.word	0x08008d1d
 8008d5c:	08008d1d 	.word	0x08008d1d
 8008d60:	08008ea1 	.word	0x08008ea1
 8008d64:	08008dcb 	.word	0x08008dcb
 8008d68:	08008e5b 	.word	0x08008e5b
 8008d6c:	08008d1d 	.word	0x08008d1d
 8008d70:	08008d1d 	.word	0x08008d1d
 8008d74:	08008ec3 	.word	0x08008ec3
 8008d78:	08008d1d 	.word	0x08008d1d
 8008d7c:	08008dcb 	.word	0x08008dcb
 8008d80:	08008d1d 	.word	0x08008d1d
 8008d84:	08008d1d 	.word	0x08008d1d
 8008d88:	08008e63 	.word	0x08008e63
 8008d8c:	6833      	ldr	r3, [r6, #0]
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6032      	str	r2, [r6, #0]
 8008d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e09d      	b.n	8008edc <_printf_i+0x1e8>
 8008da0:	6833      	ldr	r3, [r6, #0]
 8008da2:	6820      	ldr	r0, [r4, #0]
 8008da4:	1d19      	adds	r1, r3, #4
 8008da6:	6031      	str	r1, [r6, #0]
 8008da8:	0606      	lsls	r6, r0, #24
 8008daa:	d501      	bpl.n	8008db0 <_printf_i+0xbc>
 8008dac:	681d      	ldr	r5, [r3, #0]
 8008dae:	e003      	b.n	8008db8 <_printf_i+0xc4>
 8008db0:	0645      	lsls	r5, r0, #25
 8008db2:	d5fb      	bpl.n	8008dac <_printf_i+0xb8>
 8008db4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008db8:	2d00      	cmp	r5, #0
 8008dba:	da03      	bge.n	8008dc4 <_printf_i+0xd0>
 8008dbc:	232d      	movs	r3, #45	@ 0x2d
 8008dbe:	426d      	negs	r5, r5
 8008dc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dc4:	4859      	ldr	r0, [pc, #356]	@ (8008f2c <_printf_i+0x238>)
 8008dc6:	230a      	movs	r3, #10
 8008dc8:	e011      	b.n	8008dee <_printf_i+0xfa>
 8008dca:	6821      	ldr	r1, [r4, #0]
 8008dcc:	6833      	ldr	r3, [r6, #0]
 8008dce:	0608      	lsls	r0, r1, #24
 8008dd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dd4:	d402      	bmi.n	8008ddc <_printf_i+0xe8>
 8008dd6:	0649      	lsls	r1, r1, #25
 8008dd8:	bf48      	it	mi
 8008dda:	b2ad      	uxthmi	r5, r5
 8008ddc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dde:	4853      	ldr	r0, [pc, #332]	@ (8008f2c <_printf_i+0x238>)
 8008de0:	6033      	str	r3, [r6, #0]
 8008de2:	bf14      	ite	ne
 8008de4:	230a      	movne	r3, #10
 8008de6:	2308      	moveq	r3, #8
 8008de8:	2100      	movs	r1, #0
 8008dea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008dee:	6866      	ldr	r6, [r4, #4]
 8008df0:	60a6      	str	r6, [r4, #8]
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	bfa2      	ittt	ge
 8008df6:	6821      	ldrge	r1, [r4, #0]
 8008df8:	f021 0104 	bicge.w	r1, r1, #4
 8008dfc:	6021      	strge	r1, [r4, #0]
 8008dfe:	b90d      	cbnz	r5, 8008e04 <_printf_i+0x110>
 8008e00:	2e00      	cmp	r6, #0
 8008e02:	d04b      	beq.n	8008e9c <_printf_i+0x1a8>
 8008e04:	4616      	mov	r6, r2
 8008e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e0e:	5dc7      	ldrb	r7, [r0, r7]
 8008e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e14:	462f      	mov	r7, r5
 8008e16:	42bb      	cmp	r3, r7
 8008e18:	460d      	mov	r5, r1
 8008e1a:	d9f4      	bls.n	8008e06 <_printf_i+0x112>
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d10b      	bne.n	8008e38 <_printf_i+0x144>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	07df      	lsls	r7, r3, #31
 8008e24:	d508      	bpl.n	8008e38 <_printf_i+0x144>
 8008e26:	6923      	ldr	r3, [r4, #16]
 8008e28:	6861      	ldr	r1, [r4, #4]
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	bfde      	ittt	le
 8008e2e:	2330      	movle	r3, #48	@ 0x30
 8008e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e38:	1b92      	subs	r2, r2, r6
 8008e3a:	6122      	str	r2, [r4, #16]
 8008e3c:	f8cd a000 	str.w	sl, [sp]
 8008e40:	464b      	mov	r3, r9
 8008e42:	aa03      	add	r2, sp, #12
 8008e44:	4621      	mov	r1, r4
 8008e46:	4640      	mov	r0, r8
 8008e48:	f7ff fee6 	bl	8008c18 <_printf_common>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d14a      	bne.n	8008ee6 <_printf_i+0x1f2>
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	b004      	add	sp, #16
 8008e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f043 0320 	orr.w	r3, r3, #32
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	4833      	ldr	r0, [pc, #204]	@ (8008f30 <_printf_i+0x23c>)
 8008e64:	2778      	movs	r7, #120	@ 0x78
 8008e66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	6831      	ldr	r1, [r6, #0]
 8008e6e:	061f      	lsls	r7, r3, #24
 8008e70:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e74:	d402      	bmi.n	8008e7c <_printf_i+0x188>
 8008e76:	065f      	lsls	r7, r3, #25
 8008e78:	bf48      	it	mi
 8008e7a:	b2ad      	uxthmi	r5, r5
 8008e7c:	6031      	str	r1, [r6, #0]
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	bf44      	itt	mi
 8008e82:	f043 0320 	orrmi.w	r3, r3, #32
 8008e86:	6023      	strmi	r3, [r4, #0]
 8008e88:	b11d      	cbz	r5, 8008e92 <_printf_i+0x19e>
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	e7ac      	b.n	8008de8 <_printf_i+0xf4>
 8008e8e:	4827      	ldr	r0, [pc, #156]	@ (8008f2c <_printf_i+0x238>)
 8008e90:	e7e9      	b.n	8008e66 <_printf_i+0x172>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	f023 0320 	bic.w	r3, r3, #32
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	e7f6      	b.n	8008e8a <_printf_i+0x196>
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	e7bd      	b.n	8008e1c <_printf_i+0x128>
 8008ea0:	6833      	ldr	r3, [r6, #0]
 8008ea2:	6825      	ldr	r5, [r4, #0]
 8008ea4:	6961      	ldr	r1, [r4, #20]
 8008ea6:	1d18      	adds	r0, r3, #4
 8008ea8:	6030      	str	r0, [r6, #0]
 8008eaa:	062e      	lsls	r6, r5, #24
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	d501      	bpl.n	8008eb4 <_printf_i+0x1c0>
 8008eb0:	6019      	str	r1, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <_printf_i+0x1c6>
 8008eb4:	0668      	lsls	r0, r5, #25
 8008eb6:	d5fb      	bpl.n	8008eb0 <_printf_i+0x1bc>
 8008eb8:	8019      	strh	r1, [r3, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	4616      	mov	r6, r2
 8008ec0:	e7bc      	b.n	8008e3c <_printf_i+0x148>
 8008ec2:	6833      	ldr	r3, [r6, #0]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	6032      	str	r2, [r6, #0]
 8008ec8:	681e      	ldr	r6, [r3, #0]
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7f7 f996 	bl	8000200 <memchr>
 8008ed4:	b108      	cbz	r0, 8008eda <_printf_i+0x1e6>
 8008ed6:	1b80      	subs	r0, r0, r6
 8008ed8:	6060      	str	r0, [r4, #4]
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee4:	e7aa      	b.n	8008e3c <_printf_i+0x148>
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4649      	mov	r1, r9
 8008eec:	4640      	mov	r0, r8
 8008eee:	47d0      	blx	sl
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d0ad      	beq.n	8008e50 <_printf_i+0x15c>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	079b      	lsls	r3, r3, #30
 8008ef8:	d413      	bmi.n	8008f22 <_printf_i+0x22e>
 8008efa:	68e0      	ldr	r0, [r4, #12]
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	4298      	cmp	r0, r3
 8008f00:	bfb8      	it	lt
 8008f02:	4618      	movlt	r0, r3
 8008f04:	e7a6      	b.n	8008e54 <_printf_i+0x160>
 8008f06:	2301      	movs	r3, #1
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	47d0      	blx	sl
 8008f10:	3001      	adds	r0, #1
 8008f12:	d09d      	beq.n	8008e50 <_printf_i+0x15c>
 8008f14:	3501      	adds	r5, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	9903      	ldr	r1, [sp, #12]
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	42ab      	cmp	r3, r5
 8008f1e:	dcf2      	bgt.n	8008f06 <_printf_i+0x212>
 8008f20:	e7eb      	b.n	8008efa <_printf_i+0x206>
 8008f22:	2500      	movs	r5, #0
 8008f24:	f104 0619 	add.w	r6, r4, #25
 8008f28:	e7f5      	b.n	8008f16 <_printf_i+0x222>
 8008f2a:	bf00      	nop
 8008f2c:	0800a59b 	.word	0x0800a59b
 8008f30:	0800a5ac 	.word	0x0800a5ac

08008f34 <__sflush_r>:
 8008f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	0716      	lsls	r6, r2, #28
 8008f3e:	4605      	mov	r5, r0
 8008f40:	460c      	mov	r4, r1
 8008f42:	d454      	bmi.n	8008fee <__sflush_r+0xba>
 8008f44:	684b      	ldr	r3, [r1, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	dc02      	bgt.n	8008f50 <__sflush_r+0x1c>
 8008f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd48      	ble.n	8008fe2 <__sflush_r+0xae>
 8008f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	d045      	beq.n	8008fe2 <__sflush_r+0xae>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f5c:	682f      	ldr	r7, [r5, #0]
 8008f5e:	6a21      	ldr	r1, [r4, #32]
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	d030      	beq.n	8008fc6 <__sflush_r+0x92>
 8008f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	0759      	lsls	r1, r3, #29
 8008f6a:	d505      	bpl.n	8008f78 <__sflush_r+0x44>
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f72:	b10b      	cbz	r3, 8008f78 <__sflush_r+0x44>
 8008f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f7c:	6a21      	ldr	r1, [r4, #32]
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b0      	blx	r6
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	d106      	bne.n	8008f96 <__sflush_r+0x62>
 8008f88:	6829      	ldr	r1, [r5, #0]
 8008f8a:	291d      	cmp	r1, #29
 8008f8c:	d82b      	bhi.n	8008fe6 <__sflush_r+0xb2>
 8008f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009038 <__sflush_r+0x104>)
 8008f90:	410a      	asrs	r2, r1
 8008f92:	07d6      	lsls	r6, r2, #31
 8008f94:	d427      	bmi.n	8008fe6 <__sflush_r+0xb2>
 8008f96:	2200      	movs	r2, #0
 8008f98:	6062      	str	r2, [r4, #4]
 8008f9a:	04d9      	lsls	r1, r3, #19
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	d504      	bpl.n	8008fac <__sflush_r+0x78>
 8008fa2:	1c42      	adds	r2, r0, #1
 8008fa4:	d101      	bne.n	8008faa <__sflush_r+0x76>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	b903      	cbnz	r3, 8008fac <__sflush_r+0x78>
 8008faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	b1b9      	cbz	r1, 8008fe2 <__sflush_r+0xae>
 8008fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d002      	beq.n	8008fc0 <__sflush_r+0x8c>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7ff fbdc 	bl	8008778 <_free_r>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fc4:	e00d      	b.n	8008fe2 <__sflush_r+0xae>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b0      	blx	r6
 8008fcc:	4602      	mov	r2, r0
 8008fce:	1c50      	adds	r0, r2, #1
 8008fd0:	d1c9      	bne.n	8008f66 <__sflush_r+0x32>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0c6      	beq.n	8008f66 <__sflush_r+0x32>
 8008fd8:	2b1d      	cmp	r3, #29
 8008fda:	d001      	beq.n	8008fe0 <__sflush_r+0xac>
 8008fdc:	2b16      	cmp	r3, #22
 8008fde:	d11e      	bne.n	800901e <__sflush_r+0xea>
 8008fe0:	602f      	str	r7, [r5, #0]
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e022      	b.n	800902c <__sflush_r+0xf8>
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	e01b      	b.n	8009026 <__sflush_r+0xf2>
 8008fee:	690f      	ldr	r7, [r1, #16]
 8008ff0:	2f00      	cmp	r7, #0
 8008ff2:	d0f6      	beq.n	8008fe2 <__sflush_r+0xae>
 8008ff4:	0793      	lsls	r3, r2, #30
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	bf08      	it	eq
 8008ffa:	694b      	ldreq	r3, [r1, #20]
 8008ffc:	600f      	str	r7, [r1, #0]
 8008ffe:	bf18      	it	ne
 8009000:	2300      	movne	r3, #0
 8009002:	eba6 0807 	sub.w	r8, r6, r7
 8009006:	608b      	str	r3, [r1, #8]
 8009008:	f1b8 0f00 	cmp.w	r8, #0
 800900c:	dde9      	ble.n	8008fe2 <__sflush_r+0xae>
 800900e:	6a21      	ldr	r1, [r4, #32]
 8009010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009012:	4643      	mov	r3, r8
 8009014:	463a      	mov	r2, r7
 8009016:	4628      	mov	r0, r5
 8009018:	47b0      	blx	r6
 800901a:	2800      	cmp	r0, #0
 800901c:	dc08      	bgt.n	8009030 <__sflush_r+0xfc>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	f04f 30ff 	mov.w	r0, #4294967295
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	4407      	add	r7, r0
 8009032:	eba8 0800 	sub.w	r8, r8, r0
 8009036:	e7e7      	b.n	8009008 <__sflush_r+0xd4>
 8009038:	dfbffffe 	.word	0xdfbffffe

0800903c <_fflush_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	690b      	ldr	r3, [r1, #16]
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	b913      	cbnz	r3, 800904c <_fflush_r+0x10>
 8009046:	2500      	movs	r5, #0
 8009048:	4628      	mov	r0, r5
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	b118      	cbz	r0, 8009056 <_fflush_r+0x1a>
 800904e:	6a03      	ldr	r3, [r0, #32]
 8009050:	b90b      	cbnz	r3, 8009056 <_fflush_r+0x1a>
 8009052:	f7ff fa7b 	bl	800854c <__sinit>
 8009056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0f3      	beq.n	8009046 <_fflush_r+0xa>
 800905e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009060:	07d0      	lsls	r0, r2, #31
 8009062:	d404      	bmi.n	800906e <_fflush_r+0x32>
 8009064:	0599      	lsls	r1, r3, #22
 8009066:	d402      	bmi.n	800906e <_fflush_r+0x32>
 8009068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800906a:	f7ff fb82 	bl	8008772 <__retarget_lock_acquire_recursive>
 800906e:	4628      	mov	r0, r5
 8009070:	4621      	mov	r1, r4
 8009072:	f7ff ff5f 	bl	8008f34 <__sflush_r>
 8009076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009078:	07da      	lsls	r2, r3, #31
 800907a:	4605      	mov	r5, r0
 800907c:	d4e4      	bmi.n	8009048 <_fflush_r+0xc>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	059b      	lsls	r3, r3, #22
 8009082:	d4e1      	bmi.n	8009048 <_fflush_r+0xc>
 8009084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009086:	f7ff fb75 	bl	8008774 <__retarget_lock_release_recursive>
 800908a:	e7dd      	b.n	8009048 <_fflush_r+0xc>

0800908c <memmove>:
 800908c:	4288      	cmp	r0, r1
 800908e:	b510      	push	{r4, lr}
 8009090:	eb01 0402 	add.w	r4, r1, r2
 8009094:	d902      	bls.n	800909c <memmove+0x10>
 8009096:	4284      	cmp	r4, r0
 8009098:	4623      	mov	r3, r4
 800909a:	d807      	bhi.n	80090ac <memmove+0x20>
 800909c:	1e43      	subs	r3, r0, #1
 800909e:	42a1      	cmp	r1, r4
 80090a0:	d008      	beq.n	80090b4 <memmove+0x28>
 80090a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090aa:	e7f8      	b.n	800909e <memmove+0x12>
 80090ac:	4402      	add	r2, r0
 80090ae:	4601      	mov	r1, r0
 80090b0:	428a      	cmp	r2, r1
 80090b2:	d100      	bne.n	80090b6 <memmove+0x2a>
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090be:	e7f7      	b.n	80090b0 <memmove+0x24>

080090c0 <_sbrk_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	@ (80090dc <_sbrk_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7fb fa68 	bl	80045a0 <_sbrk>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_sbrk_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_sbrk_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20025ea0 	.word	0x20025ea0

080090e0 <memcpy>:
 80090e0:	440a      	add	r2, r1
 80090e2:	4291      	cmp	r1, r2
 80090e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e8:	d100      	bne.n	80090ec <memcpy+0xc>
 80090ea:	4770      	bx	lr
 80090ec:	b510      	push	{r4, lr}
 80090ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f6:	4291      	cmp	r1, r2
 80090f8:	d1f9      	bne.n	80090ee <memcpy+0xe>
 80090fa:	bd10      	pop	{r4, pc}

080090fc <_realloc_r>:
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	4680      	mov	r8, r0
 8009102:	4615      	mov	r5, r2
 8009104:	460c      	mov	r4, r1
 8009106:	b921      	cbnz	r1, 8009112 <_realloc_r+0x16>
 8009108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	4611      	mov	r1, r2
 800910e:	f7ff bb9f 	b.w	8008850 <_malloc_r>
 8009112:	b92a      	cbnz	r2, 8009120 <_realloc_r+0x24>
 8009114:	f7ff fb30 	bl	8008778 <_free_r>
 8009118:	2400      	movs	r4, #0
 800911a:	4620      	mov	r0, r4
 800911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009120:	f000 f81a 	bl	8009158 <_malloc_usable_size_r>
 8009124:	4285      	cmp	r5, r0
 8009126:	4606      	mov	r6, r0
 8009128:	d802      	bhi.n	8009130 <_realloc_r+0x34>
 800912a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800912e:	d8f4      	bhi.n	800911a <_realloc_r+0x1e>
 8009130:	4629      	mov	r1, r5
 8009132:	4640      	mov	r0, r8
 8009134:	f7ff fb8c 	bl	8008850 <_malloc_r>
 8009138:	4607      	mov	r7, r0
 800913a:	2800      	cmp	r0, #0
 800913c:	d0ec      	beq.n	8009118 <_realloc_r+0x1c>
 800913e:	42b5      	cmp	r5, r6
 8009140:	462a      	mov	r2, r5
 8009142:	4621      	mov	r1, r4
 8009144:	bf28      	it	cs
 8009146:	4632      	movcs	r2, r6
 8009148:	f7ff ffca 	bl	80090e0 <memcpy>
 800914c:	4621      	mov	r1, r4
 800914e:	4640      	mov	r0, r8
 8009150:	f7ff fb12 	bl	8008778 <_free_r>
 8009154:	463c      	mov	r4, r7
 8009156:	e7e0      	b.n	800911a <_realloc_r+0x1e>

08009158 <_malloc_usable_size_r>:
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f18      	subs	r0, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfbc      	itt	lt
 8009162:	580b      	ldrlt	r3, [r1, r0]
 8009164:	18c0      	addlt	r0, r0, r3
 8009166:	4770      	bx	lr

08009168 <_init>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr

08009174 <_fini>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr
